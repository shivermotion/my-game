{"ast":null,"code":"import { CompressedTextureLoader, CompressedTexture, FileLoader, sRGBEncoding, LinearEncoding } from 'three';\nimport { BasisTextureLoader } from './BasisTextureLoader.js';\nimport { ZSTDDecoder } from 'zstddec';\nimport { read, KTX2Model, KTX2Transfer, KTX2SupercompressionScheme, KTX2ChannelUASTC, KTX2ChannelETC1S, KTX2Flags } from 'ktx-parse';\n\n/**\n * Loader for KTX 2.0 GPU Texture containers.\n *\n * KTX 2.0 is a container format for various GPU texture formats. The loader\n * supports Basis Universal GPU textures, which can be quickly transcoded to\n * a wide variety of GPU texture compression formats. While KTX 2.0 also allows\n * other hardware-specific formats, this loader does not yet parse them.\n *\n * This loader parses the KTX 2.0 container and then relies on\n * THREE.BasisTextureLoader to complete the transcoding process.\n *\n * References:\n * - KTX: http://github.khronos.org/KTX-Specification/\n * - DFD: https://www.khronos.org/registry/DataFormat/specs/1.3/dataformat.1.3.html#basicdescriptor\n */\n\nclass KTX2Loader extends CompressedTextureLoader {\n  constructor(manager) {\n    super(manager);\n    this.basisLoader = new BasisTextureLoader(manager);\n    this.zstd = new ZSTDDecoder();\n    this.zstd.init();\n    if (typeof MSC_TRANSCODER !== 'undefined') {\n      console.warn('THREE.KTX2Loader: Please update to latest \"basis_transcoder\".' + ' \"msc_basis_transcoder\" is no longer supported in three.js r125+.');\n    }\n  }\n  setTranscoderPath(path) {\n    this.basisLoader.setTranscoderPath(path);\n    return this;\n  }\n  setWorkerLimit(path) {\n    this.basisLoader.setWorkerLimit(path);\n    return this;\n  }\n  detectSupport(renderer) {\n    this.basisLoader.detectSupport(renderer);\n    return this;\n  }\n  dispose() {\n    this.basisLoader.dispose();\n    return this;\n  }\n  load(url, onLoad, onProgress, onError) {\n    var scope = this;\n    var texture = new CompressedTexture();\n    var bufferPending = new Promise(function (resolve, reject) {\n      new FileLoader(scope.manager).setPath(scope.path).setResponseType('arraybuffer').load(url, resolve, onProgress, reject);\n    });\n    bufferPending.then(function (buffer) {\n      scope.parse(buffer, function (_texture) {\n        texture.copy(_texture);\n        texture.needsUpdate = true;\n        if (onLoad) onLoad(texture);\n      }, onError);\n    }).catch(onError);\n    return texture;\n  }\n  parse(buffer, onLoad, onError) {\n    var scope = this;\n    var ktx = read(new Uint8Array(buffer));\n    if (ktx.pixelDepth > 0) {\n      throw new Error('THREE.KTX2Loader: Only 2D textures are currently supported.');\n    }\n    if (ktx.layerCount > 1) {\n      throw new Error('THREE.KTX2Loader: Array textures are not currently supported.');\n    }\n    if (ktx.faceCount > 1) {\n      throw new Error('THREE.KTX2Loader: Cube textures are not currently supported.');\n    }\n    var dfd = KTX2Utils.getBasicDFD(ktx);\n    KTX2Utils.createLevels(ktx, this.zstd).then(function (levels) {\n      var basisFormat = dfd.colorModel === KTX2Model.UASTC ? BasisTextureLoader.BasisFormat.UASTC_4x4 : BasisTextureLoader.BasisFormat.ETC1S;\n      var parseConfig = {\n        levels: levels,\n        width: ktx.pixelWidth,\n        height: ktx.pixelHeight,\n        basisFormat: basisFormat,\n        hasAlpha: KTX2Utils.getAlpha(ktx)\n      };\n      if (basisFormat === BasisTextureLoader.BasisFormat.ETC1S) {\n        parseConfig.globalData = ktx.globalData;\n      }\n      return scope.basisLoader.parseInternalAsync(parseConfig);\n    }).then(function (texture) {\n      texture.encoding = dfd.transferFunction === KTX2Transfer.SRGB ? sRGBEncoding : LinearEncoding;\n      texture.premultiplyAlpha = KTX2Utils.getPremultiplyAlpha(ktx);\n      onLoad(texture);\n    }).catch(onError);\n    return this;\n  }\n}\nvar KTX2Utils = {\n  createLevels: async function (ktx, zstd) {\n    if (ktx.supercompressionScheme === KTX2SupercompressionScheme.ZSTD) {\n      await zstd.init();\n    }\n    var levels = [];\n    var width = ktx.pixelWidth;\n    var height = ktx.pixelHeight;\n    for (var levelIndex = 0; levelIndex < ktx.levels.length; levelIndex++) {\n      var levelWidth = Math.max(1, Math.floor(width / Math.pow(2, levelIndex)));\n      var levelHeight = Math.max(1, Math.floor(height / Math.pow(2, levelIndex)));\n      var levelData = ktx.levels[levelIndex].levelData;\n      if (ktx.supercompressionScheme === KTX2SupercompressionScheme.ZSTD) {\n        levelData = zstd.decode(levelData, ktx.levels[levelIndex].uncompressedByteLength);\n      }\n      levels.push({\n        index: levelIndex,\n        width: levelWidth,\n        height: levelHeight,\n        data: levelData\n      });\n    }\n    return levels;\n  },\n  getBasicDFD: function (ktx) {\n    // Basic Data Format Descriptor Block is always the first DFD.\n    return ktx.dataFormatDescriptor[0];\n  },\n  getAlpha: function (ktx) {\n    var dfd = this.getBasicDFD(ktx); // UASTC\n\n    if (dfd.colorModel === KTX2Model.UASTC) {\n      if ((dfd.samples[0].channelID & 0xf) === KTX2ChannelUASTC.RGBA) {\n        return true;\n      }\n      return false;\n    } // ETC1S\n\n    if (dfd.samples.length === 2 && (dfd.samples[1].channelID & 0xf) === KTX2ChannelETC1S.AAA) {\n      return true;\n    }\n    return false;\n  },\n  getPremultiplyAlpha: function (ktx) {\n    var dfd = this.getBasicDFD(ktx);\n    return !!(dfd.flags & KTX2Flags.ALPHA_PREMULTIPLIED);\n  }\n};\nexport { KTX2Loader };","map":{"version":3,"names":["CompressedTextureLoader","CompressedTexture","FileLoader","sRGBEncoding","LinearEncoding","BasisTextureLoader","ZSTDDecoder","read","KTX2Model","KTX2Transfer","KTX2SupercompressionScheme","KTX2ChannelUASTC","KTX2ChannelETC1S","KTX2Flags","KTX2Loader","constructor","manager","basisLoader","zstd","init","MSC_TRANSCODER","console","warn","setTranscoderPath","path","setWorkerLimit","detectSupport","renderer","dispose","load","url","onLoad","onProgress","onError","scope","texture","bufferPending","Promise","resolve","reject","setPath","setResponseType","then","buffer","parse","_texture","copy","needsUpdate","catch","ktx","Uint8Array","pixelDepth","Error","layerCount","faceCount","dfd","KTX2Utils","getBasicDFD","createLevels","levels","basisFormat","colorModel","UASTC","BasisFormat","UASTC_4x4","ETC1S","parseConfig","width","pixelWidth","height","pixelHeight","hasAlpha","getAlpha","globalData","parseInternalAsync","encoding","transferFunction","SRGB","premultiplyAlpha","getPremultiplyAlpha","supercompressionScheme","ZSTD","levelIndex","length","levelWidth","Math","max","floor","pow","levelHeight","levelData","decode","uncompressedByteLength","push","index","data","dataFormatDescriptor","samples","channelID","RGBA","AAA","flags","ALPHA_PREMULTIPLIED"],"sources":["C:/Users/Work/node_modules/three-stdlib/loaders/KTX2Loader.js"],"sourcesContent":["import { CompressedTextureLoader, CompressedTexture, FileLoader, sRGBEncoding, LinearEncoding } from 'three';\nimport { BasisTextureLoader } from './BasisTextureLoader.js';\nimport { ZSTDDecoder } from 'zstddec';\nimport { read, KTX2Model, KTX2Transfer, KTX2SupercompressionScheme, KTX2ChannelUASTC, KTX2ChannelETC1S, KTX2Flags } from 'ktx-parse';\n\n/**\n * Loader for KTX 2.0 GPU Texture containers.\n *\n * KTX 2.0 is a container format for various GPU texture formats. The loader\n * supports Basis Universal GPU textures, which can be quickly transcoded to\n * a wide variety of GPU texture compression formats. While KTX 2.0 also allows\n * other hardware-specific formats, this loader does not yet parse them.\n *\n * This loader parses the KTX 2.0 container and then relies on\n * THREE.BasisTextureLoader to complete the transcoding process.\n *\n * References:\n * - KTX: http://github.khronos.org/KTX-Specification/\n * - DFD: https://www.khronos.org/registry/DataFormat/specs/1.3/dataformat.1.3.html#basicdescriptor\n */\n\nclass KTX2Loader extends CompressedTextureLoader {\n  constructor(manager) {\n    super(manager);\n    this.basisLoader = new BasisTextureLoader(manager);\n    this.zstd = new ZSTDDecoder();\n    this.zstd.init();\n\n    if (typeof MSC_TRANSCODER !== 'undefined') {\n      console.warn('THREE.KTX2Loader: Please update to latest \"basis_transcoder\".' + ' \"msc_basis_transcoder\" is no longer supported in three.js r125+.');\n    }\n  }\n\n  setTranscoderPath(path) {\n    this.basisLoader.setTranscoderPath(path);\n    return this;\n  }\n\n  setWorkerLimit(path) {\n    this.basisLoader.setWorkerLimit(path);\n    return this;\n  }\n\n  detectSupport(renderer) {\n    this.basisLoader.detectSupport(renderer);\n    return this;\n  }\n\n  dispose() {\n    this.basisLoader.dispose();\n    return this;\n  }\n\n  load(url, onLoad, onProgress, onError) {\n    var scope = this;\n    var texture = new CompressedTexture();\n    var bufferPending = new Promise(function (resolve, reject) {\n      new FileLoader(scope.manager).setPath(scope.path).setResponseType('arraybuffer').load(url, resolve, onProgress, reject);\n    });\n    bufferPending.then(function (buffer) {\n      scope.parse(buffer, function (_texture) {\n        texture.copy(_texture);\n        texture.needsUpdate = true;\n        if (onLoad) onLoad(texture);\n      }, onError);\n    }).catch(onError);\n    return texture;\n  }\n\n  parse(buffer, onLoad, onError) {\n    var scope = this;\n    var ktx = read(new Uint8Array(buffer));\n\n    if (ktx.pixelDepth > 0) {\n      throw new Error('THREE.KTX2Loader: Only 2D textures are currently supported.');\n    }\n\n    if (ktx.layerCount > 1) {\n      throw new Error('THREE.KTX2Loader: Array textures are not currently supported.');\n    }\n\n    if (ktx.faceCount > 1) {\n      throw new Error('THREE.KTX2Loader: Cube textures are not currently supported.');\n    }\n\n    var dfd = KTX2Utils.getBasicDFD(ktx);\n    KTX2Utils.createLevels(ktx, this.zstd).then(function (levels) {\n      var basisFormat = dfd.colorModel === KTX2Model.UASTC ? BasisTextureLoader.BasisFormat.UASTC_4x4 : BasisTextureLoader.BasisFormat.ETC1S;\n      var parseConfig = {\n        levels: levels,\n        width: ktx.pixelWidth,\n        height: ktx.pixelHeight,\n        basisFormat: basisFormat,\n        hasAlpha: KTX2Utils.getAlpha(ktx)\n      };\n\n      if (basisFormat === BasisTextureLoader.BasisFormat.ETC1S) {\n        parseConfig.globalData = ktx.globalData;\n      }\n\n      return scope.basisLoader.parseInternalAsync(parseConfig);\n    }).then(function (texture) {\n      texture.encoding = dfd.transferFunction === KTX2Transfer.SRGB ? sRGBEncoding : LinearEncoding;\n      texture.premultiplyAlpha = KTX2Utils.getPremultiplyAlpha(ktx);\n      onLoad(texture);\n    }).catch(onError);\n    return this;\n  }\n\n}\n\nvar KTX2Utils = {\n  createLevels: async function (ktx, zstd) {\n    if (ktx.supercompressionScheme === KTX2SupercompressionScheme.ZSTD) {\n      await zstd.init();\n    }\n\n    var levels = [];\n    var width = ktx.pixelWidth;\n    var height = ktx.pixelHeight;\n\n    for (var levelIndex = 0; levelIndex < ktx.levels.length; levelIndex++) {\n      var levelWidth = Math.max(1, Math.floor(width / Math.pow(2, levelIndex)));\n      var levelHeight = Math.max(1, Math.floor(height / Math.pow(2, levelIndex)));\n      var levelData = ktx.levels[levelIndex].levelData;\n\n      if (ktx.supercompressionScheme === KTX2SupercompressionScheme.ZSTD) {\n        levelData = zstd.decode(levelData, ktx.levels[levelIndex].uncompressedByteLength);\n      }\n\n      levels.push({\n        index: levelIndex,\n        width: levelWidth,\n        height: levelHeight,\n        data: levelData\n      });\n    }\n\n    return levels;\n  },\n  getBasicDFD: function (ktx) {\n    // Basic Data Format Descriptor Block is always the first DFD.\n    return ktx.dataFormatDescriptor[0];\n  },\n  getAlpha: function (ktx) {\n    var dfd = this.getBasicDFD(ktx); // UASTC\n\n    if (dfd.colorModel === KTX2Model.UASTC) {\n      if ((dfd.samples[0].channelID & 0xf) === KTX2ChannelUASTC.RGBA) {\n        return true;\n      }\n\n      return false;\n    } // ETC1S\n\n\n    if (dfd.samples.length === 2 && (dfd.samples[1].channelID & 0xf) === KTX2ChannelETC1S.AAA) {\n      return true;\n    }\n\n    return false;\n  },\n  getPremultiplyAlpha: function (ktx) {\n    var dfd = this.getBasicDFD(ktx);\n    return !!(dfd.flags & KTX2Flags.ALPHA_PREMULTIPLIED);\n  }\n};\n\nexport { KTX2Loader };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}