{"ast":null,"code":"import { Ray, Matrix4, Mesh } from 'three';\nimport MeshBVH from './MeshBVH.js';\nimport Visualizer from './MeshBVHVisualizer.js';\nimport { CENTER, AVERAGE, SAH, NOT_INTERSECTED, INTERSECTED, CONTAINED } from './Constants.js';\nimport { getBVHExtremes, estimateMemoryInBytes } from './Utils/Debug.js';\nimport { MeshBVHDebug } from './MeshBVHDebug.js';\nconst ray = new Ray();\nconst tmpInverseMatrix = new Matrix4();\nconst origMeshRaycastFunc = Mesh.prototype.raycast;\nfunction acceleratedRaycast(raycaster, intersects) {\n  if (this.geometry.boundsTree) {\n    if (this.material === undefined) return;\n    tmpInverseMatrix.copy(this.matrixWorld).invert();\n    ray.copy(raycaster.ray).applyMatrix4(tmpInverseMatrix);\n    if (raycaster.firstHitOnly === true) {\n      const res = this.geometry.boundsTree.raycastFirst(this, raycaster, ray);\n      if (res) intersects.push(res);\n    } else {\n      this.geometry.boundsTree.raycast(this, raycaster, ray, intersects);\n    }\n  } else {\n    origMeshRaycastFunc.call(this, raycaster, intersects);\n  }\n}\nfunction computeBoundsTree(options) {\n  this.boundsTree = new MeshBVH(this, options);\n  return this.boundsTree;\n}\nfunction disposeBoundsTree() {\n  this.boundsTree = null;\n}\nexport { MeshBVH, Visualizer, Visualizer as MeshBVHVisualizer, MeshBVHDebug, acceleratedRaycast, computeBoundsTree, disposeBoundsTree, CENTER, AVERAGE, SAH, NOT_INTERSECTED, INTERSECTED, CONTAINED, estimateMemoryInBytes, getBVHExtremes };","map":{"version":3,"names":["Ray","Matrix4","Mesh","MeshBVH","Visualizer","CENTER","AVERAGE","SAH","NOT_INTERSECTED","INTERSECTED","CONTAINED","getBVHExtremes","estimateMemoryInBytes","MeshBVHDebug","ray","tmpInverseMatrix","origMeshRaycastFunc","prototype","raycast","acceleratedRaycast","raycaster","intersects","geometry","boundsTree","material","undefined","copy","matrixWorld","invert","applyMatrix4","firstHitOnly","res","raycastFirst","push","call","computeBoundsTree","options","disposeBoundsTree","MeshBVHVisualizer"],"sources":["C:/Users/Work/node_modules/three-mesh-bvh/src/index.js"],"sourcesContent":["import { Ray, Matrix4, Mesh } from 'three';\r\nimport MeshBVH from './MeshBVH.js';\r\nimport Visualizer from './MeshBVHVisualizer.js';\r\nimport { CENTER, AVERAGE, SAH, NOT_INTERSECTED, INTERSECTED, CONTAINED } from './Constants.js';\r\nimport { getBVHExtremes, estimateMemoryInBytes } from './Utils/Debug.js';\r\nimport { MeshBVHDebug } from './MeshBVHDebug.js';\r\n\r\nconst ray = new Ray();\r\nconst tmpInverseMatrix = new Matrix4();\r\nconst origMeshRaycastFunc = Mesh.prototype.raycast;\r\n\r\nfunction acceleratedRaycast( raycaster, intersects ) {\r\n\r\n\tif ( this.geometry.boundsTree ) {\r\n\r\n\t\tif ( this.material === undefined ) return;\r\n\r\n\t\ttmpInverseMatrix.copy( this.matrixWorld ).invert();\r\n\t\tray.copy( raycaster.ray ).applyMatrix4( tmpInverseMatrix );\r\n\r\n\t\tif ( raycaster.firstHitOnly === true ) {\r\n\r\n\t\t\tconst res = this.geometry.boundsTree.raycastFirst( this, raycaster, ray );\r\n\t\t\tif ( res ) intersects.push( res );\r\n\r\n\t\t} else {\r\n\r\n\t\t\tthis.geometry.boundsTree.raycast( this, raycaster, ray, intersects );\r\n\r\n\t\t}\r\n\r\n\t} else {\r\n\r\n\t\torigMeshRaycastFunc.call( this, raycaster, intersects );\r\n\r\n\t}\r\n\r\n}\r\n\r\nfunction computeBoundsTree( options ) {\r\n\r\n\tthis.boundsTree = new MeshBVH( this, options );\r\n\treturn this.boundsTree;\r\n\r\n}\r\n\r\nfunction disposeBoundsTree() {\r\n\r\n\tthis.boundsTree = null;\r\n\r\n}\r\n\r\nexport {\r\n\tMeshBVH, Visualizer, Visualizer as MeshBVHVisualizer, MeshBVHDebug,\r\n\tacceleratedRaycast, computeBoundsTree, disposeBoundsTree,\r\n\tCENTER, AVERAGE, SAH, NOT_INTERSECTED, INTERSECTED, CONTAINED,\r\n\testimateMemoryInBytes, getBVHExtremes\r\n};\r\n"],"mappings":"AAAA,SAASA,GAAG,EAAEC,OAAO,EAAEC,IAAI,QAAQ,OAAO;AAC1C,OAAOC,OAAO,MAAM,cAAc;AAClC,OAAOC,UAAU,MAAM,wBAAwB;AAC/C,SAASC,MAAM,EAAEC,OAAO,EAAEC,GAAG,EAAEC,eAAe,EAAEC,WAAW,EAAEC,SAAS,QAAQ,gBAAgB;AAC9F,SAASC,cAAc,EAAEC,qBAAqB,QAAQ,kBAAkB;AACxE,SAASC,YAAY,QAAQ,mBAAmB;AAEhD,MAAMC,GAAG,GAAG,IAAId,GAAG,CAAC,CAAC;AACrB,MAAMe,gBAAgB,GAAG,IAAId,OAAO,CAAC,CAAC;AACtC,MAAMe,mBAAmB,GAAGd,IAAI,CAACe,SAAS,CAACC,OAAO;AAElD,SAASC,kBAAkBA,CAAEC,SAAS,EAAEC,UAAU,EAAG;EAEpD,IAAK,IAAI,CAACC,QAAQ,CAACC,UAAU,EAAG;IAE/B,IAAK,IAAI,CAACC,QAAQ,KAAKC,SAAS,EAAG;IAEnCV,gBAAgB,CAACW,IAAI,CAAE,IAAI,CAACC,WAAY,CAAC,CAACC,MAAM,CAAC,CAAC;IAClDd,GAAG,CAACY,IAAI,CAAEN,SAAS,CAACN,GAAI,CAAC,CAACe,YAAY,CAAEd,gBAAiB,CAAC;IAE1D,IAAKK,SAAS,CAACU,YAAY,KAAK,IAAI,EAAG;MAEtC,MAAMC,GAAG,GAAG,IAAI,CAACT,QAAQ,CAACC,UAAU,CAACS,YAAY,CAAE,IAAI,EAAEZ,SAAS,EAAEN,GAAI,CAAC;MACzE,IAAKiB,GAAG,EAAGV,UAAU,CAACY,IAAI,CAAEF,GAAI,CAAC;IAElC,CAAC,MAAM;MAEN,IAAI,CAACT,QAAQ,CAACC,UAAU,CAACL,OAAO,CAAE,IAAI,EAAEE,SAAS,EAAEN,GAAG,EAAEO,UAAW,CAAC;IAErE;EAED,CAAC,MAAM;IAENL,mBAAmB,CAACkB,IAAI,CAAE,IAAI,EAAEd,SAAS,EAAEC,UAAW,CAAC;EAExD;AAED;AAEA,SAASc,iBAAiBA,CAAEC,OAAO,EAAG;EAErC,IAAI,CAACb,UAAU,GAAG,IAAIpB,OAAO,CAAE,IAAI,EAAEiC,OAAQ,CAAC;EAC9C,OAAO,IAAI,CAACb,UAAU;AAEvB;AAEA,SAASc,iBAAiBA,CAAA,EAAG;EAE5B,IAAI,CAACd,UAAU,GAAG,IAAI;AAEvB;AAEA,SACCpB,OAAO,EAAEC,UAAU,EAAEA,UAAU,IAAIkC,iBAAiB,EAAEzB,YAAY,EAClEM,kBAAkB,EAAEgB,iBAAiB,EAAEE,iBAAiB,EACxDhC,MAAM,EAAEC,OAAO,EAAEC,GAAG,EAAEC,eAAe,EAAEC,WAAW,EAAEC,SAAS,EAC7DE,qBAAqB,EAAED,cAAc"},"metadata":{},"sourceType":"module","externalDependencies":[]}