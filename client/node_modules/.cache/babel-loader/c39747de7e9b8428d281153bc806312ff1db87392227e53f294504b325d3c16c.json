{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ErrorHandler = void 0;\nvar exceptions_public_1 = require(\"../../exceptions_public\");\nvar utils_1 = require(\"@chevrotain/utils\");\nvar lookahead_1 = require(\"../../grammar/lookahead\");\nvar parser_1 = require(\"../parser\");\n/**\n * Trait responsible for runtime parsing errors.\n */\nvar ErrorHandler = /** @class */function () {\n  function ErrorHandler() {}\n  ErrorHandler.prototype.initErrorHandler = function (config) {\n    this._errors = [];\n    this.errorMessageProvider = utils_1.has(config, \"errorMessageProvider\") ? config.errorMessageProvider : parser_1.DEFAULT_PARSER_CONFIG.errorMessageProvider;\n  };\n  ErrorHandler.prototype.SAVE_ERROR = function (error) {\n    if (exceptions_public_1.isRecognitionException(error)) {\n      error.context = {\n        ruleStack: this.getHumanReadableRuleStack(),\n        ruleOccurrenceStack: utils_1.cloneArr(this.RULE_OCCURRENCE_STACK)\n      };\n      this._errors.push(error);\n      return error;\n    } else {\n      throw Error(\"Trying to save an Error which is not a RecognitionException\");\n    }\n  };\n  Object.defineProperty(ErrorHandler.prototype, \"errors\", {\n    get: function () {\n      return utils_1.cloneArr(this._errors);\n    },\n    set: function (newErrors) {\n      this._errors = newErrors;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  // TODO: consider caching the error message computed information\n  ErrorHandler.prototype.raiseEarlyExitException = function (occurrence, prodType, userDefinedErrMsg) {\n    var ruleName = this.getCurrRuleFullName();\n    var ruleGrammar = this.getGAstProductions()[ruleName];\n    var lookAheadPathsPerAlternative = lookahead_1.getLookaheadPathsForOptionalProd(occurrence, ruleGrammar, prodType, this.maxLookahead);\n    var insideProdPaths = lookAheadPathsPerAlternative[0];\n    var actualTokens = [];\n    for (var i = 1; i <= this.maxLookahead; i++) {\n      actualTokens.push(this.LA(i));\n    }\n    var msg = this.errorMessageProvider.buildEarlyExitMessage({\n      expectedIterationPaths: insideProdPaths,\n      actual: actualTokens,\n      previous: this.LA(0),\n      customUserDescription: userDefinedErrMsg,\n      ruleName: ruleName\n    });\n    throw this.SAVE_ERROR(new exceptions_public_1.EarlyExitException(msg, this.LA(1), this.LA(0)));\n  };\n  // TODO: consider caching the error message computed information\n  ErrorHandler.prototype.raiseNoAltException = function (occurrence, errMsgTypes) {\n    var ruleName = this.getCurrRuleFullName();\n    var ruleGrammar = this.getGAstProductions()[ruleName];\n    // TODO: getLookaheadPathsForOr can be slow for large enough maxLookahead and certain grammars, consider caching ?\n    var lookAheadPathsPerAlternative = lookahead_1.getLookaheadPathsForOr(occurrence, ruleGrammar, this.maxLookahead);\n    var actualTokens = [];\n    for (var i = 1; i <= this.maxLookahead; i++) {\n      actualTokens.push(this.LA(i));\n    }\n    var previousToken = this.LA(0);\n    var errMsg = this.errorMessageProvider.buildNoViableAltMessage({\n      expectedPathsPerAlt: lookAheadPathsPerAlternative,\n      actual: actualTokens,\n      previous: previousToken,\n      customUserDescription: errMsgTypes,\n      ruleName: this.getCurrRuleFullName()\n    });\n    throw this.SAVE_ERROR(new exceptions_public_1.NoViableAltException(errMsg, this.LA(1), previousToken));\n  };\n  return ErrorHandler;\n}();\nexports.ErrorHandler = ErrorHandler;","map":{"version":3,"names":["exceptions_public_1","require","utils_1","lookahead_1","parser_1","ErrorHandler","prototype","initErrorHandler","config","_errors","errorMessageProvider","has","DEFAULT_PARSER_CONFIG","SAVE_ERROR","error","isRecognitionException","context","ruleStack","getHumanReadableRuleStack","ruleOccurrenceStack","cloneArr","RULE_OCCURRENCE_STACK","push","Error","Object","defineProperty","get","set","newErrors","raiseEarlyExitException","occurrence","prodType","userDefinedErrMsg","ruleName","getCurrRuleFullName","ruleGrammar","getGAstProductions","lookAheadPathsPerAlternative","getLookaheadPathsForOptionalProd","maxLookahead","insideProdPaths","actualTokens","i","LA","msg","buildEarlyExitMessage","expectedIterationPaths","actual","previous","customUserDescription","EarlyExitException","raiseNoAltException","errMsgTypes","getLookaheadPathsForOr","previousToken","errMsg","buildNoViableAltMessage","expectedPathsPerAlt","NoViableAltException","exports"],"sources":["C:\\Users\\Work\\node_modules\\chevrotain\\src\\parse\\parser\\traits\\error_handler.ts"],"sourcesContent":["import {\n  IParserConfig,\n  IParserErrorMessageProvider,\n  IRecognitionException\n} from \"@chevrotain/types\"\nimport {\n  EarlyExitException,\n  isRecognitionException,\n  NoViableAltException\n} from \"../../exceptions_public\"\nimport { cloneArr, has } from \"@chevrotain/utils\"\nimport {\n  getLookaheadPathsForOptionalProd,\n  getLookaheadPathsForOr,\n  PROD_TYPE\n} from \"../../grammar/lookahead\"\nimport { MixedInParser } from \"./parser_traits\"\nimport { DEFAULT_PARSER_CONFIG } from \"../parser\"\n\n/**\n * Trait responsible for runtime parsing errors.\n */\nexport class ErrorHandler {\n  _errors: IRecognitionException[]\n  errorMessageProvider: IParserErrorMessageProvider\n\n  initErrorHandler(config: IParserConfig) {\n    this._errors = []\n    this.errorMessageProvider = has(config, \"errorMessageProvider\")\n      ? config.errorMessageProvider\n      : DEFAULT_PARSER_CONFIG.errorMessageProvider\n  }\n\n  SAVE_ERROR(\n    this: MixedInParser,\n    error: IRecognitionException\n  ): IRecognitionException {\n    if (isRecognitionException(error)) {\n      error.context = {\n        ruleStack: this.getHumanReadableRuleStack(),\n        ruleOccurrenceStack: cloneArr(this.RULE_OCCURRENCE_STACK)\n      }\n      this._errors.push(error)\n      return error\n    } else {\n      throw Error(\"Trying to save an Error which is not a RecognitionException\")\n    }\n  }\n\n  get errors(): IRecognitionException[] {\n    return cloneArr(this._errors)\n  }\n\n  set errors(newErrors: IRecognitionException[]) {\n    this._errors = newErrors\n  }\n\n  // TODO: consider caching the error message computed information\n  raiseEarlyExitException(\n    this: MixedInParser,\n    occurrence: number,\n    prodType: PROD_TYPE,\n    userDefinedErrMsg: string\n  ): void {\n    const ruleName = this.getCurrRuleFullName()\n    const ruleGrammar = this.getGAstProductions()[ruleName]\n    const lookAheadPathsPerAlternative = getLookaheadPathsForOptionalProd(\n      occurrence,\n      ruleGrammar,\n      prodType,\n      this.maxLookahead\n    )\n    const insideProdPaths = lookAheadPathsPerAlternative[0]\n    const actualTokens = []\n    for (let i = 1; i <= this.maxLookahead; i++) {\n      actualTokens.push(this.LA(i))\n    }\n    const msg = this.errorMessageProvider.buildEarlyExitMessage({\n      expectedIterationPaths: insideProdPaths,\n      actual: actualTokens,\n      previous: this.LA(0),\n      customUserDescription: userDefinedErrMsg,\n      ruleName: ruleName\n    })\n\n    throw this.SAVE_ERROR(new EarlyExitException(msg, this.LA(1), this.LA(0)))\n  }\n\n  // TODO: consider caching the error message computed information\n  raiseNoAltException(\n    this: MixedInParser,\n    occurrence: number,\n    errMsgTypes: string\n  ): void {\n    const ruleName = this.getCurrRuleFullName()\n    const ruleGrammar = this.getGAstProductions()[ruleName]\n    // TODO: getLookaheadPathsForOr can be slow for large enough maxLookahead and certain grammars, consider caching ?\n    const lookAheadPathsPerAlternative = getLookaheadPathsForOr(\n      occurrence,\n      ruleGrammar,\n      this.maxLookahead\n    )\n\n    const actualTokens = []\n    for (let i = 1; i <= this.maxLookahead; i++) {\n      actualTokens.push(this.LA(i))\n    }\n    const previousToken = this.LA(0)\n\n    const errMsg = this.errorMessageProvider.buildNoViableAltMessage({\n      expectedPathsPerAlt: lookAheadPathsPerAlternative,\n      actual: actualTokens,\n      previous: previousToken,\n      customUserDescription: errMsgTypes,\n      ruleName: this.getCurrRuleFullName()\n    })\n\n    throw this.SAVE_ERROR(\n      new NoViableAltException(errMsg, this.LA(1), previousToken)\n    )\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}