{"ast":null,"code":"import _extends from '@babel/runtime/helpers/esm/extends';\nimport * as React from 'react';\nimport { Plane, Vector3, Matrix4, Vector4, PerspectiveCamera, LinearFilter, RGBFormat, WebGLRenderTarget, DepthTexture, DepthFormat, UnsignedShortType, Vector2 } from 'three';\nimport { extend, useThree, useFrame } from '@react-three/fiber';\nimport mergeRefs from 'react-merge-refs';\nimport { MeshReflectorMaterial } from '../materials/MeshReflectorMaterial.js';\nextend({\n  MeshReflectorMaterial\n});\nconst MIPMAP_NUM = 8;\nconst Reflector = /*#__PURE__*/React.forwardRef(({\n  mixBlur = 0.0,\n  mixStrength = 0.5,\n  resolution = 256,\n  args = [1, 1],\n  minDepthThreshold = 0.9,\n  maxDepthThreshold = 1,\n  depthScale = 0,\n  depthToBlurRatioBias = 0.25,\n  mirror,\n  children,\n  debug = 0,\n  distortion = 1,\n  distortionMap,\n  ...props\n}, ref) => {\n  const gl = useThree(({\n    gl\n  }) => gl);\n  const camera = useThree(({\n    camera\n  }) => camera);\n  const scene = useThree(({\n    scene\n  }) => scene);\n  const meshRef = React.useRef(null);\n  const [reflectorPlane] = React.useState(() => new Plane());\n  const [normal] = React.useState(() => new Vector3());\n  const [reflectorWorldPosition] = React.useState(() => new Vector3());\n  const [cameraWorldPosition] = React.useState(() => new Vector3());\n  const [rotationMatrix] = React.useState(() => new Matrix4());\n  const [lookAtPosition] = React.useState(() => new Vector3(0, 0, -1));\n  const [clipPlane] = React.useState(() => new Vector4());\n  const [view] = React.useState(() => new Vector3());\n  const [target] = React.useState(() => new Vector3());\n  const [q] = React.useState(() => new Vector4());\n  const [textureMatrix] = React.useState(() => new Matrix4());\n  const [virtualCamera] = React.useState(() => new PerspectiveCamera());\n  const [renderTargets] = React.useState(() => {\n    const renderTargets = [];\n    const pars = {\n      minFilter: LinearFilter,\n      magFilter: LinearFilter,\n      format: RGBFormat,\n      encoding: gl.outputEncoding\n    };\n    for (let i = 0; i < MIPMAP_NUM; i++) {\n      const res = Math.max(8, Math.round(resolution / Math.pow(2, i)));\n      const renderTarget = new WebGLRenderTarget(res, res, pars);\n      renderTarget.texture.generateMipmaps = false;\n      renderTargets.push(renderTarget);\n    }\n    return renderTargets;\n  });\n  const beforeRender = React.useCallback(() => {\n    reflectorWorldPosition.setFromMatrixPosition(meshRef.current.matrixWorld);\n    cameraWorldPosition.setFromMatrixPosition(camera.matrixWorld);\n    rotationMatrix.extractRotation(meshRef.current.matrixWorld);\n    normal.set(0, 0, 1);\n    normal.applyMatrix4(rotationMatrix);\n    view.subVectors(reflectorWorldPosition, cameraWorldPosition); // Avoid rendering when reflector is facing away\n\n    if (view.dot(normal) > 0) return;\n    view.reflect(normal).negate();\n    view.add(reflectorWorldPosition);\n    rotationMatrix.extractRotation(camera.matrixWorld);\n    lookAtPosition.set(0, 0, -1);\n    lookAtPosition.applyMatrix4(rotationMatrix);\n    lookAtPosition.add(cameraWorldPosition);\n    target.subVectors(reflectorWorldPosition, lookAtPosition);\n    target.reflect(normal).negate();\n    target.add(reflectorWorldPosition);\n    virtualCamera.position.copy(view);\n    virtualCamera.up.set(0, 1, 0);\n    virtualCamera.up.applyMatrix4(rotationMatrix);\n    virtualCamera.up.reflect(normal);\n    virtualCamera.lookAt(target);\n    virtualCamera.far = camera.far; // Used in WebGLBackground\n\n    virtualCamera.updateMatrixWorld();\n    virtualCamera.projectionMatrix.copy(camera.projectionMatrix); // Update the texture matrix\n\n    textureMatrix.set(0.5, 0.0, 0.0, 0.5, 0.0, 0.5, 0.0, 0.5, 0.0, 0.0, 0.5, 0.5, 0.0, 0.0, 0.0, 1.0);\n    textureMatrix.multiply(virtualCamera.projectionMatrix);\n    textureMatrix.multiply(virtualCamera.matrixWorldInverse);\n    textureMatrix.multiply(meshRef.current.matrixWorld); // Now update projection matrix with new clip plane, implementing code from: http://www.terathon.com/code/oblique.html\n    // Paper explaining this technique: http://www.terathon.com/lengyel/Lengyel-Oblique.pdf\n\n    reflectorPlane.setFromNormalAndCoplanarPoint(normal, reflectorWorldPosition);\n    reflectorPlane.applyMatrix4(virtualCamera.matrixWorldInverse);\n    clipPlane.set(reflectorPlane.normal.x, reflectorPlane.normal.y, reflectorPlane.normal.z, reflectorPlane.constant);\n    const projectionMatrix = virtualCamera.projectionMatrix;\n    q.x = (Math.sign(clipPlane.x) + projectionMatrix.elements[8]) / projectionMatrix.elements[0];\n    q.y = (Math.sign(clipPlane.y) + projectionMatrix.elements[9]) / projectionMatrix.elements[5];\n    q.z = -1.0;\n    q.w = (1.0 + projectionMatrix.elements[10]) / projectionMatrix.elements[14]; // Calculate the scaled plane vector\n\n    clipPlane.multiplyScalar(2.0 / clipPlane.dot(q)); // Replacing the third row of the projection matrix\n\n    projectionMatrix.elements[2] = clipPlane.x;\n    projectionMatrix.elements[6] = clipPlane.y;\n    projectionMatrix.elements[10] = clipPlane.z + 1.0;\n    projectionMatrix.elements[14] = clipPlane.w;\n  }, [camera.far, camera.matrixWorld, camera.projectionMatrix, cameraWorldPosition, clipPlane, lookAtPosition, normal, q, reflectorPlane, reflectorWorldPosition, rotationMatrix, target, textureMatrix, view, virtualCamera]);\n  const [fbo1, reflectorProps] = React.useMemo(() => {\n    const parameters = {\n      minFilter: LinearFilter,\n      magFilter: LinearFilter,\n      format: RGBFormat,\n      encoding: gl.outputEncoding\n    };\n    const fbo1 = new WebGLRenderTarget(resolution, resolution, parameters);\n    if (depthScale > 0) {\n      fbo1.depthBuffer = true;\n      fbo1.depthTexture = new DepthTexture(resolution, resolution);\n      fbo1.depthTexture.format = DepthFormat;\n      fbo1.depthTexture.type = UnsignedShortType;\n    }\n    const mipmaps = renderTargets.reduce((acc, fbo, index) => {\n      acc[`u_mipmap_${index}`] = fbo.texture;\n      acc[`u_mipmap_res_${index}`] = new Vector2(fbo.width, fbo.height);\n      return acc;\n    }, {});\n    const reflectorProps = {\n      mirror,\n      textureMatrix,\n      mixBlur,\n      tDiffuse: fbo1.texture,\n      tDepth: fbo1.depthTexture,\n      mixStrength,\n      minDepthThreshold,\n      maxDepthThreshold,\n      depthScale,\n      depthToBlurRatioBias,\n      debug,\n      distortion,\n      distortionMap,\n      'defines-USE_DEPTH': depthScale > 0 ? '' : undefined,\n      'defines-USE_DISTORTION': distortionMap ? '' : undefined,\n      ...mipmaps\n    };\n    return [fbo1, reflectorProps];\n  }, [gl, textureMatrix, resolution, mirror, mixBlur, mixStrength, minDepthThreshold, maxDepthThreshold, depthScale, depthToBlurRatioBias, debug, distortion, distortionMap, renderTargets]);\n  useFrame(() => {\n    if (!(meshRef != null && meshRef.current)) return;\n    meshRef.current.visible = false;\n    const currentXrEnabled = gl.xr.enabled;\n    const currentShadowAutoUpdate = gl.shadowMap.autoUpdate;\n    beforeRender();\n    gl.xr.enabled = false;\n    gl.shadowMap.autoUpdate = false;\n    gl.setRenderTarget(fbo1);\n    gl.state.buffers.depth.setMask(true);\n    if (!gl.autoClear) gl.clear();\n    gl.render(scene, virtualCamera);\n    if (mixBlur !== 0) {\n      renderTargets.forEach(fbo => {\n        gl.setRenderTarget(fbo);\n        gl.state.buffers.depth.setMask(true);\n        gl.render(scene, virtualCamera);\n      });\n    }\n    gl.xr.enabled = currentXrEnabled;\n    gl.shadowMap.autoUpdate = currentShadowAutoUpdate;\n    meshRef.current.visible = true;\n    gl.setRenderTarget(null);\n  });\n  return /*#__PURE__*/React.createElement(\"mesh\", _extends({\n    ref: mergeRefs([meshRef, ref])\n  }, props), /*#__PURE__*/React.createElement(\"planeBufferGeometry\", {\n    args: args\n  }), children ? children('meshReflectorMaterial', reflectorProps) : /*#__PURE__*/React.createElement(\"meshReflectorMaterial\", reflectorProps));\n});\nexport { Reflector };","map":{"version":3,"names":["_extends","React","Plane","Vector3","Matrix4","Vector4","PerspectiveCamera","LinearFilter","RGBFormat","WebGLRenderTarget","DepthTexture","DepthFormat","UnsignedShortType","Vector2","extend","useThree","useFrame","mergeRefs","MeshReflectorMaterial","MIPMAP_NUM","Reflector","forwardRef","mixBlur","mixStrength","resolution","args","minDepthThreshold","maxDepthThreshold","depthScale","depthToBlurRatioBias","mirror","children","debug","distortion","distortionMap","props","ref","gl","camera","scene","meshRef","useRef","reflectorPlane","useState","normal","reflectorWorldPosition","cameraWorldPosition","rotationMatrix","lookAtPosition","clipPlane","view","target","q","textureMatrix","virtualCamera","renderTargets","pars","minFilter","magFilter","format","encoding","outputEncoding","i","res","Math","max","round","pow","renderTarget","texture","generateMipmaps","push","beforeRender","useCallback","setFromMatrixPosition","current","matrixWorld","extractRotation","set","applyMatrix4","subVectors","dot","reflect","negate","add","position","copy","up","lookAt","far","updateMatrixWorld","projectionMatrix","multiply","matrixWorldInverse","setFromNormalAndCoplanarPoint","x","y","z","constant","sign","elements","w","multiplyScalar","fbo1","reflectorProps","useMemo","parameters","depthBuffer","depthTexture","type","mipmaps","reduce","acc","fbo","index","width","height","tDiffuse","tDepth","undefined","visible","currentXrEnabled","xr","enabled","currentShadowAutoUpdate","shadowMap","autoUpdate","setRenderTarget","state","buffers","depth","setMask","autoClear","clear","render","forEach","createElement"],"sources":["C:/Users/Work/node_modules/@react-three/drei/core/Reflector.js"],"sourcesContent":["import _extends from '@babel/runtime/helpers/esm/extends';\nimport * as React from 'react';\nimport { Plane, Vector3, Matrix4, Vector4, PerspectiveCamera, LinearFilter, RGBFormat, WebGLRenderTarget, DepthTexture, DepthFormat, UnsignedShortType, Vector2 } from 'three';\nimport { extend, useThree, useFrame } from '@react-three/fiber';\nimport mergeRefs from 'react-merge-refs';\nimport { MeshReflectorMaterial } from '../materials/MeshReflectorMaterial.js';\n\nextend({\n  MeshReflectorMaterial\n});\nconst MIPMAP_NUM = 8;\nconst Reflector = /*#__PURE__*/React.forwardRef(({\n  mixBlur = 0.0,\n  mixStrength = 0.5,\n  resolution = 256,\n  args = [1, 1],\n  minDepthThreshold = 0.9,\n  maxDepthThreshold = 1,\n  depthScale = 0,\n  depthToBlurRatioBias = 0.25,\n  mirror,\n  children,\n  debug = 0,\n  distortion = 1,\n  distortionMap,\n  ...props\n}, ref) => {\n  const gl = useThree(({\n    gl\n  }) => gl);\n  const camera = useThree(({\n    camera\n  }) => camera);\n  const scene = useThree(({\n    scene\n  }) => scene);\n  const meshRef = React.useRef(null);\n  const [reflectorPlane] = React.useState(() => new Plane());\n  const [normal] = React.useState(() => new Vector3());\n  const [reflectorWorldPosition] = React.useState(() => new Vector3());\n  const [cameraWorldPosition] = React.useState(() => new Vector3());\n  const [rotationMatrix] = React.useState(() => new Matrix4());\n  const [lookAtPosition] = React.useState(() => new Vector3(0, 0, -1));\n  const [clipPlane] = React.useState(() => new Vector4());\n  const [view] = React.useState(() => new Vector3());\n  const [target] = React.useState(() => new Vector3());\n  const [q] = React.useState(() => new Vector4());\n  const [textureMatrix] = React.useState(() => new Matrix4());\n  const [virtualCamera] = React.useState(() => new PerspectiveCamera());\n  const [renderTargets] = React.useState(() => {\n    const renderTargets = [];\n    const pars = {\n      minFilter: LinearFilter,\n      magFilter: LinearFilter,\n      format: RGBFormat,\n      encoding: gl.outputEncoding\n    };\n\n    for (let i = 0; i < MIPMAP_NUM; i++) {\n      const res = Math.max(8, Math.round(resolution / Math.pow(2, i)));\n      const renderTarget = new WebGLRenderTarget(res, res, pars);\n      renderTarget.texture.generateMipmaps = false;\n      renderTargets.push(renderTarget);\n    }\n\n    return renderTargets;\n  });\n  const beforeRender = React.useCallback(() => {\n    reflectorWorldPosition.setFromMatrixPosition(meshRef.current.matrixWorld);\n    cameraWorldPosition.setFromMatrixPosition(camera.matrixWorld);\n    rotationMatrix.extractRotation(meshRef.current.matrixWorld);\n    normal.set(0, 0, 1);\n    normal.applyMatrix4(rotationMatrix);\n    view.subVectors(reflectorWorldPosition, cameraWorldPosition); // Avoid rendering when reflector is facing away\n\n    if (view.dot(normal) > 0) return;\n    view.reflect(normal).negate();\n    view.add(reflectorWorldPosition);\n    rotationMatrix.extractRotation(camera.matrixWorld);\n    lookAtPosition.set(0, 0, -1);\n    lookAtPosition.applyMatrix4(rotationMatrix);\n    lookAtPosition.add(cameraWorldPosition);\n    target.subVectors(reflectorWorldPosition, lookAtPosition);\n    target.reflect(normal).negate();\n    target.add(reflectorWorldPosition);\n    virtualCamera.position.copy(view);\n    virtualCamera.up.set(0, 1, 0);\n    virtualCamera.up.applyMatrix4(rotationMatrix);\n    virtualCamera.up.reflect(normal);\n    virtualCamera.lookAt(target);\n    virtualCamera.far = camera.far; // Used in WebGLBackground\n\n    virtualCamera.updateMatrixWorld();\n    virtualCamera.projectionMatrix.copy(camera.projectionMatrix); // Update the texture matrix\n\n    textureMatrix.set(0.5, 0.0, 0.0, 0.5, 0.0, 0.5, 0.0, 0.5, 0.0, 0.0, 0.5, 0.5, 0.0, 0.0, 0.0, 1.0);\n    textureMatrix.multiply(virtualCamera.projectionMatrix);\n    textureMatrix.multiply(virtualCamera.matrixWorldInverse);\n    textureMatrix.multiply(meshRef.current.matrixWorld); // Now update projection matrix with new clip plane, implementing code from: http://www.terathon.com/code/oblique.html\n    // Paper explaining this technique: http://www.terathon.com/lengyel/Lengyel-Oblique.pdf\n\n    reflectorPlane.setFromNormalAndCoplanarPoint(normal, reflectorWorldPosition);\n    reflectorPlane.applyMatrix4(virtualCamera.matrixWorldInverse);\n    clipPlane.set(reflectorPlane.normal.x, reflectorPlane.normal.y, reflectorPlane.normal.z, reflectorPlane.constant);\n    const projectionMatrix = virtualCamera.projectionMatrix;\n    q.x = (Math.sign(clipPlane.x) + projectionMatrix.elements[8]) / projectionMatrix.elements[0];\n    q.y = (Math.sign(clipPlane.y) + projectionMatrix.elements[9]) / projectionMatrix.elements[5];\n    q.z = -1.0;\n    q.w = (1.0 + projectionMatrix.elements[10]) / projectionMatrix.elements[14]; // Calculate the scaled plane vector\n\n    clipPlane.multiplyScalar(2.0 / clipPlane.dot(q)); // Replacing the third row of the projection matrix\n\n    projectionMatrix.elements[2] = clipPlane.x;\n    projectionMatrix.elements[6] = clipPlane.y;\n    projectionMatrix.elements[10] = clipPlane.z + 1.0;\n    projectionMatrix.elements[14] = clipPlane.w;\n  }, [camera.far, camera.matrixWorld, camera.projectionMatrix, cameraWorldPosition, clipPlane, lookAtPosition, normal, q, reflectorPlane, reflectorWorldPosition, rotationMatrix, target, textureMatrix, view, virtualCamera]);\n  const [fbo1, reflectorProps] = React.useMemo(() => {\n    const parameters = {\n      minFilter: LinearFilter,\n      magFilter: LinearFilter,\n      format: RGBFormat,\n      encoding: gl.outputEncoding\n    };\n    const fbo1 = new WebGLRenderTarget(resolution, resolution, parameters);\n\n    if (depthScale > 0) {\n      fbo1.depthBuffer = true;\n      fbo1.depthTexture = new DepthTexture(resolution, resolution);\n      fbo1.depthTexture.format = DepthFormat;\n      fbo1.depthTexture.type = UnsignedShortType;\n    }\n\n    const mipmaps = renderTargets.reduce((acc, fbo, index) => {\n      acc[`u_mipmap_${index}`] = fbo.texture;\n      acc[`u_mipmap_res_${index}`] = new Vector2(fbo.width, fbo.height);\n      return acc;\n    }, {});\n    const reflectorProps = {\n      mirror,\n      textureMatrix,\n      mixBlur,\n      tDiffuse: fbo1.texture,\n      tDepth: fbo1.depthTexture,\n      mixStrength,\n      minDepthThreshold,\n      maxDepthThreshold,\n      depthScale,\n      depthToBlurRatioBias,\n      debug,\n      distortion,\n      distortionMap,\n      'defines-USE_DEPTH': depthScale > 0 ? '' : undefined,\n      'defines-USE_DISTORTION': distortionMap ? '' : undefined,\n      ...mipmaps\n    };\n    return [fbo1, reflectorProps];\n  }, [gl, textureMatrix, resolution, mirror, mixBlur, mixStrength, minDepthThreshold, maxDepthThreshold, depthScale, depthToBlurRatioBias, debug, distortion, distortionMap, renderTargets]);\n  useFrame(() => {\n    if (!(meshRef != null && meshRef.current)) return;\n    meshRef.current.visible = false;\n    const currentXrEnabled = gl.xr.enabled;\n    const currentShadowAutoUpdate = gl.shadowMap.autoUpdate;\n    beforeRender();\n    gl.xr.enabled = false;\n    gl.shadowMap.autoUpdate = false;\n    gl.setRenderTarget(fbo1);\n    gl.state.buffers.depth.setMask(true);\n    if (!gl.autoClear) gl.clear();\n    gl.render(scene, virtualCamera);\n\n    if (mixBlur !== 0) {\n      renderTargets.forEach(fbo => {\n        gl.setRenderTarget(fbo);\n        gl.state.buffers.depth.setMask(true);\n        gl.render(scene, virtualCamera);\n      });\n    }\n\n    gl.xr.enabled = currentXrEnabled;\n    gl.shadowMap.autoUpdate = currentShadowAutoUpdate;\n    meshRef.current.visible = true;\n    gl.setRenderTarget(null);\n  });\n  return /*#__PURE__*/React.createElement(\"mesh\", _extends({\n    ref: mergeRefs([meshRef, ref])\n  }, props), /*#__PURE__*/React.createElement(\"planeBufferGeometry\", {\n    args: args\n  }), children ? children('meshReflectorMaterial', reflectorProps) : /*#__PURE__*/React.createElement(\"meshReflectorMaterial\", reflectorProps));\n});\n\nexport { Reflector };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}