{"ast":null,"code":"\"use strict\";\n\n/* istanbul ignore next */\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n    return extendStatics(d, b);\n  };\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.nextPossibleTokensAfter = exports.possiblePathsFrom = exports.NextTerminalAfterAtLeastOneSepWalker = exports.NextTerminalAfterAtLeastOneWalker = exports.NextTerminalAfterManySepWalker = exports.NextTerminalAfterManyWalker = exports.AbstractNextTerminalAfterProductionWalker = exports.NextAfterTokenWalker = exports.AbstractNextPossibleTokensWalker = void 0;\nvar rest_1 = require(\"./rest\");\nvar utils_1 = require(\"@chevrotain/utils\");\nvar first_1 = require(\"./first\");\nvar gast_public_1 = require(\"./gast/gast_public\");\nvar AbstractNextPossibleTokensWalker = /** @class */function (_super) {\n  __extends(AbstractNextPossibleTokensWalker, _super);\n  function AbstractNextPossibleTokensWalker(topProd, path) {\n    var _this = _super.call(this) /* istanbul ignore next */ || this;\n    _this.topProd = topProd;\n    _this.path = path;\n    _this.possibleTokTypes = [];\n    _this.nextProductionName = \"\";\n    _this.nextProductionOccurrence = 0;\n    _this.found = false;\n    _this.isAtEndOfPath = false;\n    return _this;\n  }\n  AbstractNextPossibleTokensWalker.prototype.startWalking = function () {\n    this.found = false;\n    if (this.path.ruleStack[0] !== this.topProd.name) {\n      throw Error(\"The path does not start with the walker's top Rule!\");\n    }\n    // immutable for the win\n    this.ruleStack = utils_1.cloneArr(this.path.ruleStack).reverse(); // intelij bug requires assertion\n    this.occurrenceStack = utils_1.cloneArr(this.path.occurrenceStack).reverse(); // intelij bug requires assertion\n    // already verified that the first production is valid, we now seek the 2nd production\n    this.ruleStack.pop();\n    this.occurrenceStack.pop();\n    this.updateExpectedNext();\n    this.walk(this.topProd);\n    return this.possibleTokTypes;\n  };\n  AbstractNextPossibleTokensWalker.prototype.walk = function (prod, prevRest) {\n    if (prevRest === void 0) {\n      prevRest = [];\n    }\n    // stop scanning once we found the path\n    if (!this.found) {\n      _super.prototype.walk.call(this, prod, prevRest);\n    }\n  };\n  AbstractNextPossibleTokensWalker.prototype.walkProdRef = function (refProd, currRest, prevRest) {\n    // found the next production, need to keep walking in it\n    if (refProd.referencedRule.name === this.nextProductionName && refProd.idx === this.nextProductionOccurrence) {\n      var fullRest = currRest.concat(prevRest);\n      this.updateExpectedNext();\n      this.walk(refProd.referencedRule, fullRest);\n    }\n  };\n  AbstractNextPossibleTokensWalker.prototype.updateExpectedNext = function () {\n    // need to consume the Terminal\n    if (utils_1.isEmpty(this.ruleStack)) {\n      // must reset nextProductionXXX to avoid walking down another Top Level production while what we are\n      // really seeking is the last Terminal...\n      this.nextProductionName = \"\";\n      this.nextProductionOccurrence = 0;\n      this.isAtEndOfPath = true;\n    } else {\n      this.nextProductionName = this.ruleStack.pop();\n      this.nextProductionOccurrence = this.occurrenceStack.pop();\n    }\n  };\n  return AbstractNextPossibleTokensWalker;\n}(rest_1.RestWalker);\nexports.AbstractNextPossibleTokensWalker = AbstractNextPossibleTokensWalker;\nvar NextAfterTokenWalker = /** @class */function (_super) {\n  __extends(NextAfterTokenWalker, _super);\n  function NextAfterTokenWalker(topProd, path) {\n    var _this = _super.call(this, topProd, path) /* istanbul ignore next */ || this;\n    _this.path = path;\n    _this.nextTerminalName = \"\";\n    _this.nextTerminalOccurrence = 0;\n    _this.nextTerminalName = _this.path.lastTok.name;\n    _this.nextTerminalOccurrence = _this.path.lastTokOccurrence;\n    return _this;\n  }\n  NextAfterTokenWalker.prototype.walkTerminal = function (terminal, currRest, prevRest) {\n    if (this.isAtEndOfPath && terminal.terminalType.name === this.nextTerminalName && terminal.idx === this.nextTerminalOccurrence && !this.found) {\n      var fullRest = currRest.concat(prevRest);\n      var restProd = new gast_public_1.Alternative({\n        definition: fullRest\n      });\n      this.possibleTokTypes = first_1.first(restProd);\n      this.found = true;\n    }\n  };\n  return NextAfterTokenWalker;\n}(AbstractNextPossibleTokensWalker);\nexports.NextAfterTokenWalker = NextAfterTokenWalker;\n/**\n * This walker only \"walks\" a single \"TOP\" level in the Grammar Ast, this means\n * it never \"follows\" production refs\n */\nvar AbstractNextTerminalAfterProductionWalker = /** @class */function (_super) {\n  __extends(AbstractNextTerminalAfterProductionWalker, _super);\n  function AbstractNextTerminalAfterProductionWalker(topRule, occurrence) {\n    var _this = _super.call(this) /* istanbul ignore next */ || this;\n    _this.topRule = topRule;\n    _this.occurrence = occurrence;\n    _this.result = {\n      token: undefined,\n      occurrence: undefined,\n      isEndOfRule: undefined\n    };\n    return _this;\n  }\n  AbstractNextTerminalAfterProductionWalker.prototype.startWalking = function () {\n    this.walk(this.topRule);\n    return this.result;\n  };\n  return AbstractNextTerminalAfterProductionWalker;\n}(rest_1.RestWalker);\nexports.AbstractNextTerminalAfterProductionWalker = AbstractNextTerminalAfterProductionWalker;\nvar NextTerminalAfterManyWalker = /** @class */function (_super) {\n  __extends(NextTerminalAfterManyWalker, _super);\n  function NextTerminalAfterManyWalker() {\n    return _super !== null && _super.apply(this, arguments) /* istanbul ignore next */ || this;\n  }\n  NextTerminalAfterManyWalker.prototype.walkMany = function (manyProd, currRest, prevRest) {\n    if (manyProd.idx === this.occurrence) {\n      var firstAfterMany = utils_1.first(currRest.concat(prevRest));\n      this.result.isEndOfRule = firstAfterMany === undefined;\n      if (firstAfterMany instanceof gast_public_1.Terminal) {\n        this.result.token = firstAfterMany.terminalType;\n        this.result.occurrence = firstAfterMany.idx;\n      }\n    } else {\n      _super.prototype.walkMany.call(this, manyProd, currRest, prevRest);\n    }\n  };\n  return NextTerminalAfterManyWalker;\n}(AbstractNextTerminalAfterProductionWalker);\nexports.NextTerminalAfterManyWalker = NextTerminalAfterManyWalker;\nvar NextTerminalAfterManySepWalker = /** @class */function (_super) {\n  __extends(NextTerminalAfterManySepWalker, _super);\n  function NextTerminalAfterManySepWalker() {\n    return _super !== null && _super.apply(this, arguments) /* istanbul ignore next */ || this;\n  }\n  NextTerminalAfterManySepWalker.prototype.walkManySep = function (manySepProd, currRest, prevRest) {\n    if (manySepProd.idx === this.occurrence) {\n      var firstAfterManySep = utils_1.first(currRest.concat(prevRest));\n      this.result.isEndOfRule = firstAfterManySep === undefined;\n      if (firstAfterManySep instanceof gast_public_1.Terminal) {\n        this.result.token = firstAfterManySep.terminalType;\n        this.result.occurrence = firstAfterManySep.idx;\n      }\n    } else {\n      _super.prototype.walkManySep.call(this, manySepProd, currRest, prevRest);\n    }\n  };\n  return NextTerminalAfterManySepWalker;\n}(AbstractNextTerminalAfterProductionWalker);\nexports.NextTerminalAfterManySepWalker = NextTerminalAfterManySepWalker;\nvar NextTerminalAfterAtLeastOneWalker = /** @class */function (_super) {\n  __extends(NextTerminalAfterAtLeastOneWalker, _super);\n  function NextTerminalAfterAtLeastOneWalker() {\n    return _super !== null && _super.apply(this, arguments) /* istanbul ignore next */ || this;\n  }\n  NextTerminalAfterAtLeastOneWalker.prototype.walkAtLeastOne = function (atLeastOneProd, currRest, prevRest) {\n    if (atLeastOneProd.idx === this.occurrence) {\n      var firstAfterAtLeastOne = utils_1.first(currRest.concat(prevRest));\n      this.result.isEndOfRule = firstAfterAtLeastOne === undefined;\n      if (firstAfterAtLeastOne instanceof gast_public_1.Terminal) {\n        this.result.token = firstAfterAtLeastOne.terminalType;\n        this.result.occurrence = firstAfterAtLeastOne.idx;\n      }\n    } else {\n      _super.prototype.walkAtLeastOne.call(this, atLeastOneProd, currRest, prevRest);\n    }\n  };\n  return NextTerminalAfterAtLeastOneWalker;\n}(AbstractNextTerminalAfterProductionWalker);\nexports.NextTerminalAfterAtLeastOneWalker = NextTerminalAfterAtLeastOneWalker;\n// TODO: reduce code duplication in the AfterWalkers\nvar NextTerminalAfterAtLeastOneSepWalker = /** @class */function (_super) {\n  __extends(NextTerminalAfterAtLeastOneSepWalker, _super);\n  function NextTerminalAfterAtLeastOneSepWalker() {\n    return _super !== null && _super.apply(this, arguments) /* istanbul ignore next */ || this;\n  }\n  NextTerminalAfterAtLeastOneSepWalker.prototype.walkAtLeastOneSep = function (atleastOneSepProd, currRest, prevRest) {\n    if (atleastOneSepProd.idx === this.occurrence) {\n      var firstAfterfirstAfterAtLeastOneSep = utils_1.first(currRest.concat(prevRest));\n      this.result.isEndOfRule = firstAfterfirstAfterAtLeastOneSep === undefined;\n      if (firstAfterfirstAfterAtLeastOneSep instanceof gast_public_1.Terminal) {\n        this.result.token = firstAfterfirstAfterAtLeastOneSep.terminalType;\n        this.result.occurrence = firstAfterfirstAfterAtLeastOneSep.idx;\n      }\n    } else {\n      _super.prototype.walkAtLeastOneSep.call(this, atleastOneSepProd, currRest, prevRest);\n    }\n  };\n  return NextTerminalAfterAtLeastOneSepWalker;\n}(AbstractNextTerminalAfterProductionWalker);\nexports.NextTerminalAfterAtLeastOneSepWalker = NextTerminalAfterAtLeastOneSepWalker;\nfunction possiblePathsFrom(targetDef, maxLength, currPath) {\n  if (currPath === void 0) {\n    currPath = [];\n  }\n  // avoid side effects\n  currPath = utils_1.cloneArr(currPath);\n  var result = [];\n  var i = 0;\n  // TODO: avoid inner funcs\n  function remainingPathWith(nextDef) {\n    return nextDef.concat(utils_1.drop(targetDef, i + 1));\n  }\n  // TODO: avoid inner funcs\n  function getAlternativesForProd(definition) {\n    var alternatives = possiblePathsFrom(remainingPathWith(definition), maxLength, currPath);\n    return result.concat(alternatives);\n  }\n  /**\n   * Mandatory productions will halt the loop as the paths computed from their recursive calls will already contain the\n   * following (rest) of the targetDef.\n   *\n   * For optional productions (Option/Repetition/...) the loop will continue to represent the paths that do not include the\n   * the optional production.\n   */\n  while (currPath.length < maxLength && i < targetDef.length) {\n    var prod = targetDef[i];\n    /* istanbul ignore else */\n    if (prod instanceof gast_public_1.Alternative) {\n      return getAlternativesForProd(prod.definition);\n    } else if (prod instanceof gast_public_1.NonTerminal) {\n      return getAlternativesForProd(prod.definition);\n    } else if (prod instanceof gast_public_1.Option) {\n      result = getAlternativesForProd(prod.definition);\n    } else if (prod instanceof gast_public_1.RepetitionMandatory) {\n      var newDef = prod.definition.concat([new gast_public_1.Repetition({\n        definition: prod.definition\n      })]);\n      return getAlternativesForProd(newDef);\n    } else if (prod instanceof gast_public_1.RepetitionMandatoryWithSeparator) {\n      var newDef = [new gast_public_1.Alternative({\n        definition: prod.definition\n      }), new gast_public_1.Repetition({\n        definition: [new gast_public_1.Terminal({\n          terminalType: prod.separator\n        })].concat(prod.definition)\n      })];\n      return getAlternativesForProd(newDef);\n    } else if (prod instanceof gast_public_1.RepetitionWithSeparator) {\n      var newDef = prod.definition.concat([new gast_public_1.Repetition({\n        definition: [new gast_public_1.Terminal({\n          terminalType: prod.separator\n        })].concat(prod.definition)\n      })]);\n      result = getAlternativesForProd(newDef);\n    } else if (prod instanceof gast_public_1.Repetition) {\n      var newDef = prod.definition.concat([new gast_public_1.Repetition({\n        definition: prod.definition\n      })]);\n      result = getAlternativesForProd(newDef);\n    } else if (prod instanceof gast_public_1.Alternation) {\n      utils_1.forEach(prod.definition, function (currAlt) {\n        // TODO: this is a limited check for empty alternatives\n        //   It would prevent a common case of infinite loops during parser initialization.\n        //   However **in-directly** empty alternatives may still cause issues.\n        if (utils_1.isEmpty(currAlt.definition) === false) {\n          result = getAlternativesForProd(currAlt.definition);\n        }\n      });\n      return result;\n    } else if (prod instanceof gast_public_1.Terminal) {\n      currPath.push(prod.terminalType);\n    } else {\n      throw Error(\"non exhaustive match\");\n    }\n    i++;\n  }\n  result.push({\n    partialPath: currPath,\n    suffixDef: utils_1.drop(targetDef, i)\n  });\n  return result;\n}\nexports.possiblePathsFrom = possiblePathsFrom;\nfunction nextPossibleTokensAfter(initialDef, tokenVector, tokMatcher, maxLookAhead) {\n  var EXIT_NON_TERMINAL = \"EXIT_NONE_TERMINAL\";\n  // to avoid creating a new Array each time.\n  var EXIT_NON_TERMINAL_ARR = [EXIT_NON_TERMINAL];\n  var EXIT_ALTERNATIVE = \"EXIT_ALTERNATIVE\";\n  var foundCompletePath = false;\n  var tokenVectorLength = tokenVector.length;\n  var minimalAlternativesIndex = tokenVectorLength - maxLookAhead - 1;\n  var result = [];\n  var possiblePaths = [];\n  possiblePaths.push({\n    idx: -1,\n    def: initialDef,\n    ruleStack: [],\n    occurrenceStack: []\n  });\n  while (!utils_1.isEmpty(possiblePaths)) {\n    var currPath = possiblePaths.pop();\n    // skip alternatives if no more results can be found (assuming deterministic grammar with fixed lookahead)\n    if (currPath === EXIT_ALTERNATIVE) {\n      if (foundCompletePath && utils_1.last(possiblePaths).idx <= minimalAlternativesIndex) {\n        // remove irrelevant alternative\n        possiblePaths.pop();\n      }\n      continue;\n    }\n    var currDef = currPath.def;\n    var currIdx = currPath.idx;\n    var currRuleStack = currPath.ruleStack;\n    var currOccurrenceStack = currPath.occurrenceStack;\n    // For Example: an empty path could exist in a valid grammar in the case of an EMPTY_ALT\n    if (utils_1.isEmpty(currDef)) {\n      continue;\n    }\n    var prod = currDef[0];\n    /* istanbul ignore else */\n    if (prod === EXIT_NON_TERMINAL) {\n      var nextPath = {\n        idx: currIdx,\n        def: utils_1.drop(currDef),\n        ruleStack: utils_1.dropRight(currRuleStack),\n        occurrenceStack: utils_1.dropRight(currOccurrenceStack)\n      };\n      possiblePaths.push(nextPath);\n    } else if (prod instanceof gast_public_1.Terminal) {\n      /* istanbul ignore else */\n      if (currIdx < tokenVectorLength - 1) {\n        var nextIdx = currIdx + 1;\n        var actualToken = tokenVector[nextIdx];\n        if (tokMatcher(actualToken, prod.terminalType)) {\n          var nextPath = {\n            idx: nextIdx,\n            def: utils_1.drop(currDef),\n            ruleStack: currRuleStack,\n            occurrenceStack: currOccurrenceStack\n          };\n          possiblePaths.push(nextPath);\n        }\n        // end of the line\n      } else if (currIdx === tokenVectorLength - 1) {\n        // IGNORE ABOVE ELSE\n        result.push({\n          nextTokenType: prod.terminalType,\n          nextTokenOccurrence: prod.idx,\n          ruleStack: currRuleStack,\n          occurrenceStack: currOccurrenceStack\n        });\n        foundCompletePath = true;\n      } else {\n        throw Error(\"non exhaustive match\");\n      }\n    } else if (prod instanceof gast_public_1.NonTerminal) {\n      var newRuleStack = utils_1.cloneArr(currRuleStack);\n      newRuleStack.push(prod.nonTerminalName);\n      var newOccurrenceStack = utils_1.cloneArr(currOccurrenceStack);\n      newOccurrenceStack.push(prod.idx);\n      var nextPath = {\n        idx: currIdx,\n        def: prod.definition.concat(EXIT_NON_TERMINAL_ARR, utils_1.drop(currDef)),\n        ruleStack: newRuleStack,\n        occurrenceStack: newOccurrenceStack\n      };\n      possiblePaths.push(nextPath);\n    } else if (prod instanceof gast_public_1.Option) {\n      // the order of alternatives is meaningful, FILO (Last path will be traversed first).\n      var nextPathWithout = {\n        idx: currIdx,\n        def: utils_1.drop(currDef),\n        ruleStack: currRuleStack,\n        occurrenceStack: currOccurrenceStack\n      };\n      possiblePaths.push(nextPathWithout);\n      // required marker to avoid backtracking paths whose higher priority alternatives already matched\n      possiblePaths.push(EXIT_ALTERNATIVE);\n      var nextPathWith = {\n        idx: currIdx,\n        def: prod.definition.concat(utils_1.drop(currDef)),\n        ruleStack: currRuleStack,\n        occurrenceStack: currOccurrenceStack\n      };\n      possiblePaths.push(nextPathWith);\n    } else if (prod instanceof gast_public_1.RepetitionMandatory) {\n      // TODO:(THE NEW operators here take a while...) (convert once?)\n      var secondIteration = new gast_public_1.Repetition({\n        definition: prod.definition,\n        idx: prod.idx\n      });\n      var nextDef = prod.definition.concat([secondIteration], utils_1.drop(currDef));\n      var nextPath = {\n        idx: currIdx,\n        def: nextDef,\n        ruleStack: currRuleStack,\n        occurrenceStack: currOccurrenceStack\n      };\n      possiblePaths.push(nextPath);\n    } else if (prod instanceof gast_public_1.RepetitionMandatoryWithSeparator) {\n      // TODO:(THE NEW operators here take a while...) (convert once?)\n      var separatorGast = new gast_public_1.Terminal({\n        terminalType: prod.separator\n      });\n      var secondIteration = new gast_public_1.Repetition({\n        definition: [separatorGast].concat(prod.definition),\n        idx: prod.idx\n      });\n      var nextDef = prod.definition.concat([secondIteration], utils_1.drop(currDef));\n      var nextPath = {\n        idx: currIdx,\n        def: nextDef,\n        ruleStack: currRuleStack,\n        occurrenceStack: currOccurrenceStack\n      };\n      possiblePaths.push(nextPath);\n    } else if (prod instanceof gast_public_1.RepetitionWithSeparator) {\n      // the order of alternatives is meaningful, FILO (Last path will be traversed first).\n      var nextPathWithout = {\n        idx: currIdx,\n        def: utils_1.drop(currDef),\n        ruleStack: currRuleStack,\n        occurrenceStack: currOccurrenceStack\n      };\n      possiblePaths.push(nextPathWithout);\n      // required marker to avoid backtracking paths whose higher priority alternatives already matched\n      possiblePaths.push(EXIT_ALTERNATIVE);\n      var separatorGast = new gast_public_1.Terminal({\n        terminalType: prod.separator\n      });\n      var nthRepetition = new gast_public_1.Repetition({\n        definition: [separatorGast].concat(prod.definition),\n        idx: prod.idx\n      });\n      var nextDef = prod.definition.concat([nthRepetition], utils_1.drop(currDef));\n      var nextPathWith = {\n        idx: currIdx,\n        def: nextDef,\n        ruleStack: currRuleStack,\n        occurrenceStack: currOccurrenceStack\n      };\n      possiblePaths.push(nextPathWith);\n    } else if (prod instanceof gast_public_1.Repetition) {\n      // the order of alternatives is meaningful, FILO (Last path will be traversed first).\n      var nextPathWithout = {\n        idx: currIdx,\n        def: utils_1.drop(currDef),\n        ruleStack: currRuleStack,\n        occurrenceStack: currOccurrenceStack\n      };\n      possiblePaths.push(nextPathWithout);\n      // required marker to avoid backtracking paths whose higher priority alternatives already matched\n      possiblePaths.push(EXIT_ALTERNATIVE);\n      // TODO: an empty repetition will cause infinite loops here, will the parser detect this in selfAnalysis?\n      var nthRepetition = new gast_public_1.Repetition({\n        definition: prod.definition,\n        idx: prod.idx\n      });\n      var nextDef = prod.definition.concat([nthRepetition], utils_1.drop(currDef));\n      var nextPathWith = {\n        idx: currIdx,\n        def: nextDef,\n        ruleStack: currRuleStack,\n        occurrenceStack: currOccurrenceStack\n      };\n      possiblePaths.push(nextPathWith);\n    } else if (prod instanceof gast_public_1.Alternation) {\n      // the order of alternatives is meaningful, FILO (Last path will be traversed first).\n      for (var i = prod.definition.length - 1; i >= 0; i--) {\n        var currAlt = prod.definition[i];\n        var currAltPath = {\n          idx: currIdx,\n          def: currAlt.definition.concat(utils_1.drop(currDef)),\n          ruleStack: currRuleStack,\n          occurrenceStack: currOccurrenceStack\n        };\n        possiblePaths.push(currAltPath);\n        possiblePaths.push(EXIT_ALTERNATIVE);\n      }\n    } else if (prod instanceof gast_public_1.Alternative) {\n      possiblePaths.push({\n        idx: currIdx,\n        def: prod.definition.concat(utils_1.drop(currDef)),\n        ruleStack: currRuleStack,\n        occurrenceStack: currOccurrenceStack\n      });\n    } else if (prod instanceof gast_public_1.Rule) {\n      // last because we should only encounter at most a single one of these per invocation.\n      possiblePaths.push(expandTopLevelRule(prod, currIdx, currRuleStack, currOccurrenceStack));\n    } else {\n      throw Error(\"non exhaustive match\");\n    }\n  }\n  return result;\n}\nexports.nextPossibleTokensAfter = nextPossibleTokensAfter;\nfunction expandTopLevelRule(topRule, currIdx, currRuleStack, currOccurrenceStack) {\n  var newRuleStack = utils_1.cloneArr(currRuleStack);\n  newRuleStack.push(topRule.name);\n  var newCurrOccurrenceStack = utils_1.cloneArr(currOccurrenceStack);\n  // top rule is always assumed to have been called with occurrence index 1\n  newCurrOccurrenceStack.push(1);\n  return {\n    idx: currIdx,\n    def: topRule.definition,\n    ruleStack: newRuleStack,\n    occurrenceStack: newCurrOccurrenceStack\n  };\n}","map":{"version":3,"names":["rest_1","require","utils_1","first_1","gast_public_1","AbstractNextPossibleTokensWalker","_super","__extends","topProd","path","_this","call","possibleTokTypes","nextProductionName","nextProductionOccurrence","found","isAtEndOfPath","prototype","startWalking","ruleStack","name","Error","cloneArr","reverse","occurrenceStack","pop","updateExpectedNext","walk","prod","prevRest","walkProdRef","refProd","currRest","referencedRule","idx","fullRest","concat","isEmpty","RestWalker","exports","NextAfterTokenWalker","nextTerminalName","nextTerminalOccurrence","lastTok","lastTokOccurrence","walkTerminal","terminal","terminalType","restProd","Alternative","definition","first","AbstractNextTerminalAfterProductionWalker","topRule","occurrence","result","token","undefined","isEndOfRule","NextTerminalAfterManyWalker","walkMany","manyProd","firstAfterMany","Terminal","NextTerminalAfterManySepWalker","walkManySep","manySepProd","firstAfterManySep","NextTerminalAfterAtLeastOneWalker","walkAtLeastOne","atLeastOneProd","firstAfterAtLeastOne","NextTerminalAfterAtLeastOneSepWalker","walkAtLeastOneSep","atleastOneSepProd","firstAfterfirstAfterAtLeastOneSep","possiblePathsFrom","targetDef","maxLength","currPath","i","remainingPathWith","nextDef","drop","getAlternativesForProd","alternatives","length","NonTerminal","Option","RepetitionMandatory","newDef","Repetition","RepetitionMandatoryWithSeparator","separator","RepetitionWithSeparator","Alternation","forEach","currAlt","push","partialPath","suffixDef","nextPossibleTokensAfter","initialDef","tokenVector","tokMatcher","maxLookAhead","EXIT_NON_TERMINAL","EXIT_NON_TERMINAL_ARR","EXIT_ALTERNATIVE","foundCompletePath","tokenVectorLength","minimalAlternativesIndex","possiblePaths","def","last","currDef","currIdx","currRuleStack","currOccurrenceStack","nextPath","dropRight","nextIdx","actualToken","nextTokenType","nextTokenOccurrence","newRuleStack","nonTerminalName","newOccurrenceStack","nextPathWithout","nextPathWith","secondIteration","separatorGast","nthRepetition","currAltPath","Rule","expandTopLevelRule","newCurrOccurrenceStack"],"sources":["C:\\Users\\Work\\node_modules\\chevrotain\\src\\parse\\grammar\\interpreter.ts"],"sourcesContent":["import { RestWalker } from \"./rest\"\nimport {\n  cloneArr,\n  drop,\n  dropRight,\n  first as _first,\n  forEach,\n  isEmpty,\n  last\n} from \"@chevrotain/utils\"\nimport { first } from \"./first\"\nimport { TokenMatcher } from \"../parser/parser\"\nimport {\n  AbstractProduction,\n  Alternation,\n  Alternative,\n  NonTerminal,\n  Option,\n  Repetition,\n  RepetitionMandatory,\n  RepetitionMandatoryWithSeparator,\n  RepetitionWithSeparator,\n  Rule,\n  Terminal\n} from \"./gast/gast_public\"\nimport {\n  IGrammarPath,\n  IProduction,\n  ISyntacticContentAssistPath,\n  IToken,\n  ITokenGrammarPath,\n  TokenType\n} from \"@chevrotain/types\"\n\nexport abstract class AbstractNextPossibleTokensWalker extends RestWalker {\n  protected possibleTokTypes: TokenType[] = []\n  protected ruleStack: string[]\n  protected occurrenceStack: number[]\n\n  protected nextProductionName = \"\"\n  protected nextProductionOccurrence = 0\n  protected found = false\n  protected isAtEndOfPath = false\n\n  constructor(protected topProd: Rule, protected path: IGrammarPath) {\n    super()\n  }\n\n  startWalking(): TokenType[] {\n    this.found = false\n\n    if (this.path.ruleStack[0] !== this.topProd.name) {\n      throw Error(\"The path does not start with the walker's top Rule!\")\n    }\n\n    // immutable for the win\n    this.ruleStack = cloneArr(this.path.ruleStack).reverse() // intelij bug requires assertion\n    this.occurrenceStack = cloneArr(this.path.occurrenceStack).reverse() // intelij bug requires assertion\n\n    // already verified that the first production is valid, we now seek the 2nd production\n    this.ruleStack.pop()\n    this.occurrenceStack.pop()\n\n    this.updateExpectedNext()\n    this.walk(this.topProd)\n\n    return this.possibleTokTypes\n  }\n\n  walk(prod: AbstractProduction, prevRest: IProduction[] = []): void {\n    // stop scanning once we found the path\n    if (!this.found) {\n      super.walk(prod, prevRest)\n    }\n  }\n\n  walkProdRef(\n    refProd: NonTerminal,\n    currRest: IProduction[],\n    prevRest: IProduction[]\n  ): void {\n    // found the next production, need to keep walking in it\n    if (\n      refProd.referencedRule.name === this.nextProductionName &&\n      refProd.idx === this.nextProductionOccurrence\n    ) {\n      const fullRest = currRest.concat(prevRest)\n      this.updateExpectedNext()\n      this.walk(refProd.referencedRule, <any>fullRest)\n    }\n  }\n\n  updateExpectedNext(): void {\n    // need to consume the Terminal\n    if (isEmpty(this.ruleStack)) {\n      // must reset nextProductionXXX to avoid walking down another Top Level production while what we are\n      // really seeking is the last Terminal...\n      this.nextProductionName = \"\"\n      this.nextProductionOccurrence = 0\n      this.isAtEndOfPath = true\n    } else {\n      this.nextProductionName = this.ruleStack.pop()\n      this.nextProductionOccurrence = this.occurrenceStack.pop()\n    }\n  }\n}\n\nexport class NextAfterTokenWalker extends AbstractNextPossibleTokensWalker {\n  private nextTerminalName = \"\"\n  private nextTerminalOccurrence = 0\n\n  constructor(topProd: Rule, protected path: ITokenGrammarPath) {\n    super(topProd, path)\n    this.nextTerminalName = this.path.lastTok.name\n    this.nextTerminalOccurrence = this.path.lastTokOccurrence\n  }\n\n  walkTerminal(\n    terminal: Terminal,\n    currRest: IProduction[],\n    prevRest: IProduction[]\n  ): void {\n    if (\n      this.isAtEndOfPath &&\n      terminal.terminalType.name === this.nextTerminalName &&\n      terminal.idx === this.nextTerminalOccurrence &&\n      !this.found\n    ) {\n      const fullRest = currRest.concat(prevRest)\n      const restProd = new Alternative({ definition: fullRest })\n      this.possibleTokTypes = first(restProd)\n      this.found = true\n    }\n  }\n}\n\nexport type AlternativesFirstTokens = TokenType[][]\n\nexport interface IFirstAfterRepetition {\n  token: TokenType\n  occurrence: number\n  isEndOfRule: boolean\n}\n\n/**\n * This walker only \"walks\" a single \"TOP\" level in the Grammar Ast, this means\n * it never \"follows\" production refs\n */\nexport class AbstractNextTerminalAfterProductionWalker extends RestWalker {\n  protected result = {\n    token: undefined,\n    occurrence: undefined,\n    isEndOfRule: undefined\n  }\n\n  constructor(protected topRule: Rule, protected occurrence: number) {\n    super()\n  }\n\n  startWalking(): IFirstAfterRepetition {\n    this.walk(this.topRule)\n    return this.result\n  }\n}\n\nexport class NextTerminalAfterManyWalker extends AbstractNextTerminalAfterProductionWalker {\n  walkMany(\n    manyProd: Repetition,\n    currRest: IProduction[],\n    prevRest: IProduction[]\n  ): void {\n    if (manyProd.idx === this.occurrence) {\n      const firstAfterMany = _first(currRest.concat(prevRest))\n      this.result.isEndOfRule = firstAfterMany === undefined\n      if (firstAfterMany instanceof Terminal) {\n        this.result.token = firstAfterMany.terminalType\n        this.result.occurrence = firstAfterMany.idx\n      }\n    } else {\n      super.walkMany(manyProd, currRest, prevRest)\n    }\n  }\n}\n\nexport class NextTerminalAfterManySepWalker extends AbstractNextTerminalAfterProductionWalker {\n  walkManySep(\n    manySepProd: RepetitionWithSeparator,\n    currRest: IProduction[],\n    prevRest: IProduction[]\n  ): void {\n    if (manySepProd.idx === this.occurrence) {\n      const firstAfterManySep = _first(currRest.concat(prevRest))\n      this.result.isEndOfRule = firstAfterManySep === undefined\n      if (firstAfterManySep instanceof Terminal) {\n        this.result.token = firstAfterManySep.terminalType\n        this.result.occurrence = firstAfterManySep.idx\n      }\n    } else {\n      super.walkManySep(manySepProd, currRest, prevRest)\n    }\n  }\n}\n\nexport class NextTerminalAfterAtLeastOneWalker extends AbstractNextTerminalAfterProductionWalker {\n  walkAtLeastOne(\n    atLeastOneProd: RepetitionMandatory,\n    currRest: IProduction[],\n    prevRest: IProduction[]\n  ): void {\n    if (atLeastOneProd.idx === this.occurrence) {\n      const firstAfterAtLeastOne = _first(currRest.concat(prevRest))\n      this.result.isEndOfRule = firstAfterAtLeastOne === undefined\n      if (firstAfterAtLeastOne instanceof Terminal) {\n        this.result.token = firstAfterAtLeastOne.terminalType\n        this.result.occurrence = firstAfterAtLeastOne.idx\n      }\n    } else {\n      super.walkAtLeastOne(atLeastOneProd, currRest, prevRest)\n    }\n  }\n}\n\n// TODO: reduce code duplication in the AfterWalkers\nexport class NextTerminalAfterAtLeastOneSepWalker extends AbstractNextTerminalAfterProductionWalker {\n  walkAtLeastOneSep(\n    atleastOneSepProd: RepetitionMandatoryWithSeparator,\n    currRest: IProduction[],\n    prevRest: IProduction[]\n  ): void {\n    if (atleastOneSepProd.idx === this.occurrence) {\n      const firstAfterfirstAfterAtLeastOneSep = _first(\n        currRest.concat(prevRest)\n      )\n      this.result.isEndOfRule = firstAfterfirstAfterAtLeastOneSep === undefined\n      if (firstAfterfirstAfterAtLeastOneSep instanceof Terminal) {\n        this.result.token = firstAfterfirstAfterAtLeastOneSep.terminalType\n        this.result.occurrence = firstAfterfirstAfterAtLeastOneSep.idx\n      }\n    } else {\n      super.walkAtLeastOneSep(atleastOneSepProd, currRest, prevRest)\n    }\n  }\n}\n\nexport interface PartialPathAndSuffixes {\n  partialPath: TokenType[]\n  suffixDef: IProduction[]\n}\n\nexport function possiblePathsFrom(\n  targetDef: IProduction[],\n  maxLength: number,\n  currPath = []\n): PartialPathAndSuffixes[] {\n  // avoid side effects\n  currPath = cloneArr(currPath)\n  let result = []\n  let i = 0\n\n  // TODO: avoid inner funcs\n  function remainingPathWith(nextDef: IProduction[]) {\n    return nextDef.concat(drop(targetDef, i + 1))\n  }\n\n  // TODO: avoid inner funcs\n  function getAlternativesForProd(definition: IProduction[]) {\n    const alternatives = possiblePathsFrom(\n      remainingPathWith(definition),\n      maxLength,\n      currPath\n    )\n    return result.concat(alternatives)\n  }\n\n  /**\n   * Mandatory productions will halt the loop as the paths computed from their recursive calls will already contain the\n   * following (rest) of the targetDef.\n   *\n   * For optional productions (Option/Repetition/...) the loop will continue to represent the paths that do not include the\n   * the optional production.\n   */\n  while (currPath.length < maxLength && i < targetDef.length) {\n    const prod = targetDef[i]\n\n    /* istanbul ignore else */\n    if (prod instanceof Alternative) {\n      return getAlternativesForProd(prod.definition)\n    } else if (prod instanceof NonTerminal) {\n      return getAlternativesForProd(prod.definition)\n    } else if (prod instanceof Option) {\n      result = getAlternativesForProd(prod.definition)\n    } else if (prod instanceof RepetitionMandatory) {\n      const newDef = prod.definition.concat([\n        new Repetition({\n          definition: prod.definition\n        })\n      ])\n      return getAlternativesForProd(newDef)\n    } else if (prod instanceof RepetitionMandatoryWithSeparator) {\n      const newDef = [\n        new Alternative({ definition: prod.definition }),\n        new Repetition({\n          definition: [new Terminal({ terminalType: prod.separator })].concat(\n            <any>prod.definition\n          )\n        })\n      ]\n      return getAlternativesForProd(newDef)\n    } else if (prod instanceof RepetitionWithSeparator) {\n      const newDef = prod.definition.concat([\n        new Repetition({\n          definition: [new Terminal({ terminalType: prod.separator })].concat(\n            <any>prod.definition\n          )\n        })\n      ])\n      result = getAlternativesForProd(newDef)\n    } else if (prod instanceof Repetition) {\n      const newDef = prod.definition.concat([\n        new Repetition({\n          definition: prod.definition\n        })\n      ])\n      result = getAlternativesForProd(newDef)\n    } else if (prod instanceof Alternation) {\n      forEach(prod.definition, (currAlt) => {\n        // TODO: this is a limited check for empty alternatives\n        //   It would prevent a common case of infinite loops during parser initialization.\n        //   However **in-directly** empty alternatives may still cause issues.\n        if (isEmpty(currAlt.definition) === false) {\n          result = getAlternativesForProd(currAlt.definition)\n        }\n      })\n      return result\n    } else if (prod instanceof Terminal) {\n      currPath.push(prod.terminalType)\n    } else {\n      throw Error(\"non exhaustive match\")\n    }\n\n    i++\n  }\n  result.push({\n    partialPath: currPath,\n    suffixDef: drop(targetDef, i)\n  })\n\n  return result\n}\n\ninterface IPathToExamine {\n  idx: number\n  def: IProduction[]\n  ruleStack: string[]\n  occurrenceStack: number[]\n}\n\nexport function nextPossibleTokensAfter(\n  initialDef: IProduction[],\n  tokenVector: IToken[],\n  tokMatcher: TokenMatcher,\n  maxLookAhead: number\n): ISyntacticContentAssistPath[] {\n  const EXIT_NON_TERMINAL: any = \"EXIT_NONE_TERMINAL\"\n  // to avoid creating a new Array each time.\n  const EXIT_NON_TERMINAL_ARR = [EXIT_NON_TERMINAL]\n  const EXIT_ALTERNATIVE: any = \"EXIT_ALTERNATIVE\"\n  let foundCompletePath = false\n\n  const tokenVectorLength = tokenVector.length\n  const minimalAlternativesIndex = tokenVectorLength - maxLookAhead - 1\n\n  const result: ISyntacticContentAssistPath[] = []\n\n  const possiblePaths: IPathToExamine[] = []\n  possiblePaths.push({\n    idx: -1,\n    def: initialDef,\n    ruleStack: [],\n    occurrenceStack: []\n  })\n\n  while (!isEmpty(possiblePaths)) {\n    const currPath = possiblePaths.pop()\n\n    // skip alternatives if no more results can be found (assuming deterministic grammar with fixed lookahead)\n    if (currPath === EXIT_ALTERNATIVE) {\n      if (\n        foundCompletePath &&\n        last(possiblePaths).idx <= minimalAlternativesIndex\n      ) {\n        // remove irrelevant alternative\n        possiblePaths.pop()\n      }\n      continue\n    }\n\n    const currDef = currPath.def\n    const currIdx = currPath.idx\n    const currRuleStack = currPath.ruleStack\n    const currOccurrenceStack = currPath.occurrenceStack\n\n    // For Example: an empty path could exist in a valid grammar in the case of an EMPTY_ALT\n    if (isEmpty(currDef)) {\n      continue\n    }\n\n    const prod = currDef[0]\n    /* istanbul ignore else */\n    if (prod === EXIT_NON_TERMINAL) {\n      const nextPath = {\n        idx: currIdx,\n        def: drop(currDef),\n        ruleStack: dropRight(currRuleStack),\n        occurrenceStack: dropRight(currOccurrenceStack)\n      }\n      possiblePaths.push(nextPath)\n    } else if (prod instanceof Terminal) {\n      /* istanbul ignore else */\n      if (currIdx < tokenVectorLength - 1) {\n        const nextIdx = currIdx + 1\n        const actualToken = tokenVector[nextIdx]\n        if (tokMatcher(actualToken, prod.terminalType)) {\n          const nextPath = {\n            idx: nextIdx,\n            def: drop(currDef),\n            ruleStack: currRuleStack,\n            occurrenceStack: currOccurrenceStack\n          }\n          possiblePaths.push(nextPath)\n        }\n        // end of the line\n      } else if (currIdx === tokenVectorLength - 1) {\n        // IGNORE ABOVE ELSE\n        result.push({\n          nextTokenType: prod.terminalType,\n          nextTokenOccurrence: prod.idx,\n          ruleStack: currRuleStack,\n          occurrenceStack: currOccurrenceStack\n        })\n        foundCompletePath = true\n      } else {\n        throw Error(\"non exhaustive match\")\n      }\n    } else if (prod instanceof NonTerminal) {\n      const newRuleStack = cloneArr(currRuleStack)\n      newRuleStack.push(prod.nonTerminalName)\n\n      const newOccurrenceStack = cloneArr(currOccurrenceStack)\n      newOccurrenceStack.push(prod.idx)\n\n      const nextPath = {\n        idx: currIdx,\n        def: prod.definition.concat(EXIT_NON_TERMINAL_ARR, drop(currDef)),\n        ruleStack: newRuleStack,\n        occurrenceStack: newOccurrenceStack\n      }\n      possiblePaths.push(nextPath)\n    } else if (prod instanceof Option) {\n      // the order of alternatives is meaningful, FILO (Last path will be traversed first).\n      const nextPathWithout = {\n        idx: currIdx,\n        def: drop(currDef),\n        ruleStack: currRuleStack,\n        occurrenceStack: currOccurrenceStack\n      }\n      possiblePaths.push(nextPathWithout)\n      // required marker to avoid backtracking paths whose higher priority alternatives already matched\n      possiblePaths.push(EXIT_ALTERNATIVE)\n\n      const nextPathWith = {\n        idx: currIdx,\n        def: prod.definition.concat(drop(currDef)),\n        ruleStack: currRuleStack,\n        occurrenceStack: currOccurrenceStack\n      }\n      possiblePaths.push(nextPathWith)\n    } else if (prod instanceof RepetitionMandatory) {\n      // TODO:(THE NEW operators here take a while...) (convert once?)\n      const secondIteration = new Repetition({\n        definition: prod.definition,\n        idx: prod.idx\n      })\n      const nextDef = prod.definition.concat([secondIteration], drop(currDef))\n      const nextPath = {\n        idx: currIdx,\n        def: nextDef,\n        ruleStack: currRuleStack,\n        occurrenceStack: currOccurrenceStack\n      }\n      possiblePaths.push(nextPath)\n    } else if (prod instanceof RepetitionMandatoryWithSeparator) {\n      // TODO:(THE NEW operators here take a while...) (convert once?)\n      const separatorGast = new Terminal({\n        terminalType: prod.separator\n      })\n      const secondIteration = new Repetition({\n        definition: [<any>separatorGast].concat(prod.definition),\n        idx: prod.idx\n      })\n      const nextDef = prod.definition.concat([secondIteration], drop(currDef))\n      const nextPath = {\n        idx: currIdx,\n        def: nextDef,\n        ruleStack: currRuleStack,\n        occurrenceStack: currOccurrenceStack\n      }\n      possiblePaths.push(nextPath)\n    } else if (prod instanceof RepetitionWithSeparator) {\n      // the order of alternatives is meaningful, FILO (Last path will be traversed first).\n      const nextPathWithout = {\n        idx: currIdx,\n        def: drop(currDef),\n        ruleStack: currRuleStack,\n        occurrenceStack: currOccurrenceStack\n      }\n      possiblePaths.push(nextPathWithout)\n      // required marker to avoid backtracking paths whose higher priority alternatives already matched\n      possiblePaths.push(EXIT_ALTERNATIVE)\n\n      const separatorGast = new Terminal({\n        terminalType: prod.separator\n      })\n      const nthRepetition = new Repetition({\n        definition: [<any>separatorGast].concat(prod.definition),\n        idx: prod.idx\n      })\n      const nextDef = prod.definition.concat([nthRepetition], drop(currDef))\n      const nextPathWith = {\n        idx: currIdx,\n        def: nextDef,\n        ruleStack: currRuleStack,\n        occurrenceStack: currOccurrenceStack\n      }\n      possiblePaths.push(nextPathWith)\n    } else if (prod instanceof Repetition) {\n      // the order of alternatives is meaningful, FILO (Last path will be traversed first).\n      const nextPathWithout = {\n        idx: currIdx,\n        def: drop(currDef),\n        ruleStack: currRuleStack,\n        occurrenceStack: currOccurrenceStack\n      }\n      possiblePaths.push(nextPathWithout)\n      // required marker to avoid backtracking paths whose higher priority alternatives already matched\n      possiblePaths.push(EXIT_ALTERNATIVE)\n\n      // TODO: an empty repetition will cause infinite loops here, will the parser detect this in selfAnalysis?\n      const nthRepetition = new Repetition({\n        definition: prod.definition,\n        idx: prod.idx\n      })\n      const nextDef = prod.definition.concat([nthRepetition], drop(currDef))\n      const nextPathWith = {\n        idx: currIdx,\n        def: nextDef,\n        ruleStack: currRuleStack,\n        occurrenceStack: currOccurrenceStack\n      }\n      possiblePaths.push(nextPathWith)\n    } else if (prod instanceof Alternation) {\n      // the order of alternatives is meaningful, FILO (Last path will be traversed first).\n      for (let i = prod.definition.length - 1; i >= 0; i--) {\n        const currAlt: any = prod.definition[i]\n        const currAltPath = {\n          idx: currIdx,\n          def: currAlt.definition.concat(drop(currDef)),\n          ruleStack: currRuleStack,\n          occurrenceStack: currOccurrenceStack\n        }\n        possiblePaths.push(currAltPath)\n        possiblePaths.push(EXIT_ALTERNATIVE)\n      }\n    } else if (prod instanceof Alternative) {\n      possiblePaths.push({\n        idx: currIdx,\n        def: prod.definition.concat(drop(currDef)),\n        ruleStack: currRuleStack,\n        occurrenceStack: currOccurrenceStack\n      })\n    } else if (prod instanceof Rule) {\n      // last because we should only encounter at most a single one of these per invocation.\n      possiblePaths.push(\n        expandTopLevelRule(prod, currIdx, currRuleStack, currOccurrenceStack)\n      )\n    } else {\n      throw Error(\"non exhaustive match\")\n    }\n  }\n  return result\n}\n\nfunction expandTopLevelRule(\n  topRule: Rule,\n  currIdx: number,\n  currRuleStack: string[],\n  currOccurrenceStack: number[]\n): IPathToExamine {\n  const newRuleStack = cloneArr(currRuleStack)\n  newRuleStack.push(topRule.name)\n\n  const newCurrOccurrenceStack = cloneArr(currOccurrenceStack)\n  // top rule is always assumed to have been called with occurrence index 1\n  newCurrOccurrenceStack.push(1)\n\n  return {\n    idx: currIdx,\n    def: topRule.definition,\n    ruleStack: newRuleStack,\n    occurrenceStack: newCurrOccurrenceStack\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}