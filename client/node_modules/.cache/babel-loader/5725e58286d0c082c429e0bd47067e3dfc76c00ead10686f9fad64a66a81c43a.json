{"ast":null,"code":"import { Loader, LoaderUtils, FileLoader, TextureLoader, RepeatWrapping, ClampToEdgeWrapping, Texture, MeshPhongMaterial, MeshLambertMaterial, Color, sRGBEncoding, EquirectangularReflectionMapping, Matrix4, Group, Bone, PropertyBinding, Object3D, OrthographicCamera, PerspectiveCamera, PointLight, MathUtils, SpotLight, DirectionalLight, SkinnedMesh, Mesh, LineBasicMaterial, Line, Vector3, Skeleton, AmbientLight, BufferGeometry, Float32BufferAttribute, Uint16BufferAttribute, Matrix3, Vector4, BufferAttribute, AnimationClip, Quaternion, Euler, VectorKeyframeTrack, QuaternionKeyframeTrack, NumberKeyframeTrack } from 'three';\nimport { unzlibSync } from 'fflate';\nimport { NURBSCurve } from '../curves/NURBSCurve.js';\n\n/**\n * Loader loads FBX file and generates Group representing FBX scene.\n * Requires FBX file to be >= 7.0 and in ASCII or >= 6400 in Binary format\n * Versions lower than this may load but will probably have errors\n *\n * Needs Support:\n *  Morph normals / blend shape normals\n *\n * FBX format references:\n * \thttps://wiki.blender.org/index.php/User:Mont29/Foundation/FBX_File_Structure\n * \thttp://help.autodesk.com/view/FBX/2017/ENU/?guid=__cpp_ref_index_html (C++ SDK reference)\n *\n * \tBinary format specification:\n *\t\thttps://code.blender.org/2013/08/fbx-binary-file-format-specification/\n */\n\nlet fbxTree;\nlet connections;\nlet sceneGraph;\nclass FBXLoader extends Loader {\n  constructor(manager) {\n    super(manager);\n  }\n  load(url, onLoad, onProgress, onError) {\n    const scope = this;\n    const path = scope.path === '' ? LoaderUtils.extractUrlBase(url) : scope.path;\n    const loader = new FileLoader(this.manager);\n    loader.setPath(scope.path);\n    loader.setResponseType('arraybuffer');\n    loader.setRequestHeader(scope.requestHeader);\n    loader.setWithCredentials(scope.withCredentials);\n    loader.load(url, function (buffer) {\n      try {\n        onLoad(scope.parse(buffer, path));\n      } catch (e) {\n        if (onError) {\n          onError(e);\n        } else {\n          console.error(e);\n        }\n        scope.manager.itemError(url);\n      }\n    }, onProgress, onError);\n  }\n  parse(FBXBuffer, path) {\n    if (isFbxFormatBinary(FBXBuffer)) {\n      fbxTree = new BinaryParser().parse(FBXBuffer);\n    } else {\n      const FBXText = convertArrayBufferToString(FBXBuffer);\n      if (!isFbxFormatASCII(FBXText)) {\n        throw new Error('THREE.FBXLoader: Unknown format.');\n      }\n      if (getFbxVersion(FBXText) < 7000) {\n        throw new Error('THREE.FBXLoader: FBX version not supported, FileVersion: ' + getFbxVersion(FBXText));\n      }\n      fbxTree = new TextParser().parse(FBXText);\n    } // console.log( fbxTree );\n\n    const textureLoader = new TextureLoader(this.manager).setPath(this.resourcePath || path).setCrossOrigin(this.crossOrigin);\n    return new FBXTreeParser(textureLoader, this.manager).parse(fbxTree);\n  }\n} // Parse the FBXTree object returned by the BinaryParser or TextParser and return a Group\n\nclass FBXTreeParser {\n  constructor(textureLoader, manager) {\n    this.textureLoader = textureLoader;\n    this.manager = manager;\n  }\n  parse() {\n    connections = this.parseConnections();\n    const images = this.parseImages();\n    const textures = this.parseTextures(images);\n    const materials = this.parseMaterials(textures);\n    const deformers = this.parseDeformers();\n    const geometryMap = new GeometryParser().parse(deformers);\n    this.parseScene(deformers, geometryMap, materials);\n    return sceneGraph;\n  } // Parses FBXTree.Connections which holds parent-child connections between objects (e.g. material -> texture, model->geometry )\n  // and details the connection type\n\n  parseConnections() {\n    const connectionMap = new Map();\n    if ('Connections' in fbxTree) {\n      const rawConnections = fbxTree.Connections.connections;\n      rawConnections.forEach(function (rawConnection) {\n        const fromID = rawConnection[0];\n        const toID = rawConnection[1];\n        const relationship = rawConnection[2];\n        if (!connectionMap.has(fromID)) {\n          connectionMap.set(fromID, {\n            parents: [],\n            children: []\n          });\n        }\n        const parentRelationship = {\n          ID: toID,\n          relationship: relationship\n        };\n        connectionMap.get(fromID).parents.push(parentRelationship);\n        if (!connectionMap.has(toID)) {\n          connectionMap.set(toID, {\n            parents: [],\n            children: []\n          });\n        }\n        const childRelationship = {\n          ID: fromID,\n          relationship: relationship\n        };\n        connectionMap.get(toID).children.push(childRelationship);\n      });\n    }\n    return connectionMap;\n  } // Parse FBXTree.Objects.Video for embedded image data\n  // These images are connected to textures in FBXTree.Objects.Textures\n  // via FBXTree.Connections.\n\n  parseImages() {\n    const images = {};\n    const blobs = {};\n    if ('Video' in fbxTree.Objects) {\n      const videoNodes = fbxTree.Objects.Video;\n      for (const nodeID in videoNodes) {\n        const videoNode = videoNodes[nodeID];\n        const id = parseInt(nodeID);\n        images[id] = videoNode.RelativeFilename || videoNode.Filename; // raw image data is in videoNode.Content\n\n        if ('Content' in videoNode) {\n          const arrayBufferContent = videoNode.Content instanceof ArrayBuffer && videoNode.Content.byteLength > 0;\n          const base64Content = typeof videoNode.Content === 'string' && videoNode.Content !== '';\n          if (arrayBufferContent || base64Content) {\n            const image = this.parseImage(videoNodes[nodeID]);\n            blobs[videoNode.RelativeFilename || videoNode.Filename] = image;\n          }\n        }\n      }\n    }\n    for (const id in images) {\n      const filename = images[id];\n      if (blobs[filename] !== undefined) images[id] = blobs[filename];else images[id] = images[id].split('\\\\').pop();\n    }\n    return images;\n  } // Parse embedded image data in FBXTree.Video.Content\n\n  parseImage(videoNode) {\n    const content = videoNode.Content;\n    const fileName = videoNode.RelativeFilename || videoNode.Filename;\n    const extension = fileName.slice(fileName.lastIndexOf('.') + 1).toLowerCase();\n    let type;\n    switch (extension) {\n      case 'bmp':\n        type = 'image/bmp';\n        break;\n      case 'jpg':\n      case 'jpeg':\n        type = 'image/jpeg';\n        break;\n      case 'png':\n        type = 'image/png';\n        break;\n      case 'tif':\n        type = 'image/tiff';\n        break;\n      case 'tga':\n        if (this.manager.getHandler('.tga') === null) {\n          console.warn('FBXLoader: TGA loader not found, skipping ', fileName);\n        }\n        type = 'image/tga';\n        break;\n      default:\n        console.warn('FBXLoader: Image type \"' + extension + '\" is not supported.');\n        return;\n    }\n    if (typeof content === 'string') {\n      // ASCII format\n      return 'data:' + type + ';base64,' + content;\n    } else {\n      // Binary Format\n      const array = new Uint8Array(content);\n      return window.URL.createObjectURL(new Blob([array], {\n        type: type\n      }));\n    }\n  } // Parse nodes in FBXTree.Objects.Texture\n  // These contain details such as UV scaling, cropping, rotation etc and are connected\n  // to images in FBXTree.Objects.Video\n\n  parseTextures(images) {\n    const textureMap = new Map();\n    if ('Texture' in fbxTree.Objects) {\n      const textureNodes = fbxTree.Objects.Texture;\n      for (const nodeID in textureNodes) {\n        const texture = this.parseTexture(textureNodes[nodeID], images);\n        textureMap.set(parseInt(nodeID), texture);\n      }\n    }\n    return textureMap;\n  } // Parse individual node in FBXTree.Objects.Texture\n\n  parseTexture(textureNode, images) {\n    const texture = this.loadTexture(textureNode, images);\n    texture.ID = textureNode.id;\n    texture.name = textureNode.attrName;\n    const wrapModeU = textureNode.WrapModeU;\n    const wrapModeV = textureNode.WrapModeV;\n    const valueU = wrapModeU !== undefined ? wrapModeU.value : 0;\n    const valueV = wrapModeV !== undefined ? wrapModeV.value : 0; // http://download.autodesk.com/us/fbx/SDKdocs/FBX_SDK_Help/files/fbxsdkref/class_k_fbx_texture.html#889640e63e2e681259ea81061b85143a\n    // 0: repeat(default), 1: clamp\n\n    texture.wrapS = valueU === 0 ? RepeatWrapping : ClampToEdgeWrapping;\n    texture.wrapT = valueV === 0 ? RepeatWrapping : ClampToEdgeWrapping;\n    if ('Scaling' in textureNode) {\n      const values = textureNode.Scaling.value;\n      texture.repeat.x = values[0];\n      texture.repeat.y = values[1];\n    }\n    return texture;\n  } // load a texture specified as a blob or data URI, or via an external URL using TextureLoader\n\n  loadTexture(textureNode, images) {\n    let fileName;\n    const currentPath = this.textureLoader.path;\n    const children = connections.get(textureNode.id).children;\n    if (children !== undefined && children.length > 0 && images[children[0].ID] !== undefined) {\n      fileName = images[children[0].ID];\n      if (fileName.indexOf('blob:') === 0 || fileName.indexOf('data:') === 0) {\n        this.textureLoader.setPath(undefined);\n      }\n    }\n    let texture;\n    const extension = textureNode.FileName.slice(-3).toLowerCase();\n    if (extension === 'tga') {\n      const loader = this.manager.getHandler('.tga');\n      if (loader === null) {\n        console.warn('FBXLoader: TGA loader not found, creating placeholder texture for', textureNode.RelativeFilename);\n        texture = new Texture();\n      } else {\n        texture = loader.load(fileName);\n      }\n    } else if (extension === 'psd') {\n      console.warn('FBXLoader: PSD textures are not supported, creating placeholder texture for', textureNode.RelativeFilename);\n      texture = new Texture();\n    } else {\n      texture = this.textureLoader.load(fileName);\n    }\n    this.textureLoader.setPath(currentPath);\n    return texture;\n  } // Parse nodes in FBXTree.Objects.Material\n\n  parseMaterials(textureMap) {\n    const materialMap = new Map();\n    if ('Material' in fbxTree.Objects) {\n      const materialNodes = fbxTree.Objects.Material;\n      for (const nodeID in materialNodes) {\n        const material = this.parseMaterial(materialNodes[nodeID], textureMap);\n        if (material !== null) materialMap.set(parseInt(nodeID), material);\n      }\n    }\n    return materialMap;\n  } // Parse single node in FBXTree.Objects.Material\n  // Materials are connected to texture maps in FBXTree.Objects.Textures\n  // FBX format currently only supports Lambert and Phong shading models\n\n  parseMaterial(materialNode, textureMap) {\n    const ID = materialNode.id;\n    const name = materialNode.attrName;\n    let type = materialNode.ShadingModel; // Case where FBX wraps shading model in property object.\n\n    if (typeof type === 'object') {\n      type = type.value;\n    } // Ignore unused materials which don't have any connections.\n\n    if (!connections.has(ID)) return null;\n    const parameters = this.parseParameters(materialNode, textureMap, ID);\n    let material;\n    switch (type.toLowerCase()) {\n      case 'phong':\n        material = new MeshPhongMaterial();\n        break;\n      case 'lambert':\n        material = new MeshLambertMaterial();\n        break;\n      default:\n        console.warn('THREE.FBXLoader: unknown material type \"%s\". Defaulting to MeshPhongMaterial.', type);\n        material = new MeshPhongMaterial();\n        break;\n    }\n    material.setValues(parameters);\n    material.name = name;\n    return material;\n  } // Parse FBX material and return parameters suitable for a three.js material\n  // Also parse the texture map and return any textures associated with the material\n\n  parseParameters(materialNode, textureMap, ID) {\n    const parameters = {};\n    if (materialNode.BumpFactor) {\n      parameters.bumpScale = materialNode.BumpFactor.value;\n    }\n    if (materialNode.Diffuse) {\n      parameters.color = new Color().fromArray(materialNode.Diffuse.value);\n    } else if (materialNode.DiffuseColor && (materialNode.DiffuseColor.type === 'Color' || materialNode.DiffuseColor.type === 'ColorRGB')) {\n      // The blender exporter exports diffuse here instead of in materialNode.Diffuse\n      parameters.color = new Color().fromArray(materialNode.DiffuseColor.value);\n    }\n    if (materialNode.DisplacementFactor) {\n      parameters.displacementScale = materialNode.DisplacementFactor.value;\n    }\n    if (materialNode.Emissive) {\n      parameters.emissive = new Color().fromArray(materialNode.Emissive.value);\n    } else if (materialNode.EmissiveColor && (materialNode.EmissiveColor.type === 'Color' || materialNode.EmissiveColor.type === 'ColorRGB')) {\n      // The blender exporter exports emissive color here instead of in materialNode.Emissive\n      parameters.emissive = new Color().fromArray(materialNode.EmissiveColor.value);\n    }\n    if (materialNode.EmissiveFactor) {\n      parameters.emissiveIntensity = parseFloat(materialNode.EmissiveFactor.value);\n    }\n    if (materialNode.Opacity) {\n      parameters.opacity = parseFloat(materialNode.Opacity.value);\n    }\n    if (parameters.opacity < 1.0) {\n      parameters.transparent = true;\n    }\n    if (materialNode.ReflectionFactor) {\n      parameters.reflectivity = materialNode.ReflectionFactor.value;\n    }\n    if (materialNode.Shininess) {\n      parameters.shininess = materialNode.Shininess.value;\n    }\n    if (materialNode.Specular) {\n      parameters.specular = new Color().fromArray(materialNode.Specular.value);\n    } else if (materialNode.SpecularColor && materialNode.SpecularColor.type === 'Color') {\n      // The blender exporter exports specular color here instead of in materialNode.Specular\n      parameters.specular = new Color().fromArray(materialNode.SpecularColor.value);\n    }\n    const scope = this;\n    connections.get(ID).children.forEach(function (child) {\n      const type = child.relationship;\n      switch (type) {\n        case 'Bump':\n          parameters.bumpMap = scope.getTexture(textureMap, child.ID);\n          break;\n        case 'Maya|TEX_ao_map':\n          parameters.aoMap = scope.getTexture(textureMap, child.ID);\n          break;\n        case 'DiffuseColor':\n        case 'Maya|TEX_color_map':\n          parameters.map = scope.getTexture(textureMap, child.ID);\n          parameters.map.encoding = sRGBEncoding;\n          break;\n        case 'DisplacementColor':\n          parameters.displacementMap = scope.getTexture(textureMap, child.ID);\n          break;\n        case 'EmissiveColor':\n          parameters.emissiveMap = scope.getTexture(textureMap, child.ID);\n          parameters.emissiveMap.encoding = sRGBEncoding;\n          break;\n        case 'NormalMap':\n        case 'Maya|TEX_normal_map':\n          parameters.normalMap = scope.getTexture(textureMap, child.ID);\n          break;\n        case 'ReflectionColor':\n          parameters.envMap = scope.getTexture(textureMap, child.ID);\n          parameters.envMap.mapping = EquirectangularReflectionMapping;\n          parameters.envMap.encoding = sRGBEncoding;\n          break;\n        case 'SpecularColor':\n          parameters.specularMap = scope.getTexture(textureMap, child.ID);\n          parameters.specularMap.encoding = sRGBEncoding;\n          break;\n        case 'TransparentColor':\n        case 'TransparencyFactor':\n          parameters.alphaMap = scope.getTexture(textureMap, child.ID);\n          parameters.transparent = true;\n          break;\n        case 'AmbientColor':\n        case 'ShininessExponent': // AKA glossiness map\n\n        case 'SpecularFactor': // AKA specularLevel\n\n        case 'VectorDisplacementColor': // NOTE: Seems to be a copy of DisplacementColor\n\n        default:\n          console.warn('THREE.FBXLoader: %s map is not supported in three.js, skipping texture.', type);\n          break;\n      }\n    });\n    return parameters;\n  } // get a texture from the textureMap for use by a material.\n\n  getTexture(textureMap, id) {\n    // if the texture is a layered texture, just use the first layer and issue a warning\n    if ('LayeredTexture' in fbxTree.Objects && id in fbxTree.Objects.LayeredTexture) {\n      console.warn('THREE.FBXLoader: layered textures are not supported in three.js. Discarding all but first layer.');\n      id = connections.get(id).children[0].ID;\n    }\n    return textureMap.get(id);\n  } // Parse nodes in FBXTree.Objects.Deformer\n  // Deformer node can contain skinning or Vertex Cache animation data, however only skinning is supported here\n  // Generates map of Skeleton-like objects for use later when generating and binding skeletons.\n\n  parseDeformers() {\n    const skeletons = {};\n    const morphTargets = {};\n    if ('Deformer' in fbxTree.Objects) {\n      const DeformerNodes = fbxTree.Objects.Deformer;\n      for (const nodeID in DeformerNodes) {\n        const deformerNode = DeformerNodes[nodeID];\n        const relationships = connections.get(parseInt(nodeID));\n        if (deformerNode.attrType === 'Skin') {\n          const skeleton = this.parseSkeleton(relationships, DeformerNodes);\n          skeleton.ID = nodeID;\n          if (relationships.parents.length > 1) {\n            console.warn('THREE.FBXLoader: skeleton attached to more than one geometry is not supported.');\n          }\n          skeleton.geometryID = relationships.parents[0].ID;\n          skeletons[nodeID] = skeleton;\n        } else if (deformerNode.attrType === 'BlendShape') {\n          const morphTarget = {\n            id: nodeID\n          };\n          morphTarget.rawTargets = this.parseMorphTargets(relationships, DeformerNodes);\n          morphTarget.id = nodeID;\n          if (relationships.parents.length > 1) {\n            console.warn('THREE.FBXLoader: morph target attached to more than one geometry is not supported.');\n          }\n          morphTargets[nodeID] = morphTarget;\n        }\n      }\n    }\n    return {\n      skeletons: skeletons,\n      morphTargets: morphTargets\n    };\n  } // Parse single nodes in FBXTree.Objects.Deformer\n  // The top level skeleton node has type 'Skin' and sub nodes have type 'Cluster'\n  // Each skin node represents a skeleton and each cluster node represents a bone\n\n  parseSkeleton(relationships, deformerNodes) {\n    const rawBones = [];\n    relationships.children.forEach(function (child) {\n      const boneNode = deformerNodes[child.ID];\n      if (boneNode.attrType !== 'Cluster') return;\n      const rawBone = {\n        ID: child.ID,\n        indices: [],\n        weights: [],\n        transformLink: new Matrix4().fromArray(boneNode.TransformLink.a) // transform: new Matrix4().fromArray( boneNode.Transform.a ),\n        // linkMode: boneNode.Mode,\n      };\n\n      if ('Indexes' in boneNode) {\n        rawBone.indices = boneNode.Indexes.a;\n        rawBone.weights = boneNode.Weights.a;\n      }\n      rawBones.push(rawBone);\n    });\n    return {\n      rawBones: rawBones,\n      bones: []\n    };\n  } // The top level morph deformer node has type \"BlendShape\" and sub nodes have type \"BlendShapeChannel\"\n\n  parseMorphTargets(relationships, deformerNodes) {\n    const rawMorphTargets = [];\n    for (let i = 0; i < relationships.children.length; i++) {\n      const child = relationships.children[i];\n      const morphTargetNode = deformerNodes[child.ID];\n      const rawMorphTarget = {\n        name: morphTargetNode.attrName,\n        initialWeight: morphTargetNode.DeformPercent,\n        id: morphTargetNode.id,\n        fullWeights: morphTargetNode.FullWeights.a\n      };\n      if (morphTargetNode.attrType !== 'BlendShapeChannel') return;\n      rawMorphTarget.geoID = connections.get(parseInt(child.ID)).children.filter(function (child) {\n        return child.relationship === undefined;\n      })[0].ID;\n      rawMorphTargets.push(rawMorphTarget);\n    }\n    return rawMorphTargets;\n  } // create the main Group() to be returned by the loader\n\n  parseScene(deformers, geometryMap, materialMap) {\n    sceneGraph = new Group();\n    const modelMap = this.parseModels(deformers.skeletons, geometryMap, materialMap);\n    const modelNodes = fbxTree.Objects.Model;\n    const scope = this;\n    modelMap.forEach(function (model) {\n      const modelNode = modelNodes[model.ID];\n      scope.setLookAtProperties(model, modelNode);\n      const parentConnections = connections.get(model.ID).parents;\n      parentConnections.forEach(function (connection) {\n        const parent = modelMap.get(connection.ID);\n        if (parent !== undefined) parent.add(model);\n      });\n      if (model.parent === null) {\n        sceneGraph.add(model);\n      }\n    });\n    this.bindSkeleton(deformers.skeletons, geometryMap, modelMap);\n    this.createAmbientLight();\n    this.setupMorphMaterials();\n    sceneGraph.traverse(function (node) {\n      if (node.userData.transformData) {\n        if (node.parent) {\n          node.userData.transformData.parentMatrix = node.parent.matrix;\n          node.userData.transformData.parentMatrixWorld = node.parent.matrixWorld;\n        }\n        const transform = generateTransform(node.userData.transformData);\n        node.applyMatrix4(transform);\n        node.updateWorldMatrix();\n      }\n    });\n    const animations = new AnimationParser().parse(); // if all the models where already combined in a single group, just return that\n\n    if (sceneGraph.children.length === 1 && sceneGraph.children[0].isGroup) {\n      sceneGraph.children[0].animations = animations;\n      sceneGraph = sceneGraph.children[0];\n    }\n    sceneGraph.animations = animations;\n  } // parse nodes in FBXTree.Objects.Model\n\n  parseModels(skeletons, geometryMap, materialMap) {\n    const modelMap = new Map();\n    const modelNodes = fbxTree.Objects.Model;\n    for (const nodeID in modelNodes) {\n      const id = parseInt(nodeID);\n      const node = modelNodes[nodeID];\n      const relationships = connections.get(id);\n      let model = this.buildSkeleton(relationships, skeletons, id, node.attrName);\n      if (!model) {\n        switch (node.attrType) {\n          case 'Camera':\n            model = this.createCamera(relationships);\n            break;\n          case 'Light':\n            model = this.createLight(relationships);\n            break;\n          case 'Mesh':\n            model = this.createMesh(relationships, geometryMap, materialMap);\n            break;\n          case 'NurbsCurve':\n            model = this.createCurve(relationships, geometryMap);\n            break;\n          case 'LimbNode':\n          case 'Root':\n            model = new Bone();\n            break;\n          case 'Null':\n          default:\n            model = new Group();\n            break;\n        }\n        model.name = node.attrName ? PropertyBinding.sanitizeNodeName(node.attrName) : '';\n        model.ID = id;\n      }\n      this.getTransformData(model, node);\n      modelMap.set(id, model);\n    }\n    return modelMap;\n  }\n  buildSkeleton(relationships, skeletons, id, name) {\n    let bone = null;\n    relationships.parents.forEach(function (parent) {\n      for (const ID in skeletons) {\n        const skeleton = skeletons[ID];\n        skeleton.rawBones.forEach(function (rawBone, i) {\n          if (rawBone.ID === parent.ID) {\n            const subBone = bone;\n            bone = new Bone();\n            bone.matrixWorld.copy(rawBone.transformLink); // set name and id here - otherwise in cases where \"subBone\" is created it will not have a name / id\n\n            bone.name = name ? PropertyBinding.sanitizeNodeName(name) : '';\n            bone.ID = id;\n            skeleton.bones[i] = bone; // In cases where a bone is shared between multiple meshes\n            // duplicate the bone here and and it as a child of the first bone\n\n            if (subBone !== null) {\n              bone.add(subBone);\n            }\n          }\n        });\n      }\n    });\n    return bone;\n  } // create a PerspectiveCamera or OrthographicCamera\n\n  createCamera(relationships) {\n    let model;\n    let cameraAttribute;\n    relationships.children.forEach(function (child) {\n      const attr = fbxTree.Objects.NodeAttribute[child.ID];\n      if (attr !== undefined) {\n        cameraAttribute = attr;\n      }\n    });\n    if (cameraAttribute === undefined) {\n      model = new Object3D();\n    } else {\n      let type = 0;\n      if (cameraAttribute.CameraProjectionType !== undefined && cameraAttribute.CameraProjectionType.value === 1) {\n        type = 1;\n      }\n      let nearClippingPlane = 1;\n      if (cameraAttribute.NearPlane !== undefined) {\n        nearClippingPlane = cameraAttribute.NearPlane.value / 1000;\n      }\n      let farClippingPlane = 1000;\n      if (cameraAttribute.FarPlane !== undefined) {\n        farClippingPlane = cameraAttribute.FarPlane.value / 1000;\n      }\n      let width = window.innerWidth;\n      let height = window.innerHeight;\n      if (cameraAttribute.AspectWidth !== undefined && cameraAttribute.AspectHeight !== undefined) {\n        width = cameraAttribute.AspectWidth.value;\n        height = cameraAttribute.AspectHeight.value;\n      }\n      const aspect = width / height;\n      let fov = 45;\n      if (cameraAttribute.FieldOfView !== undefined) {\n        fov = cameraAttribute.FieldOfView.value;\n      }\n      const focalLength = cameraAttribute.FocalLength ? cameraAttribute.FocalLength.value : null;\n      switch (type) {\n        case 0:\n          // Perspective\n          model = new PerspectiveCamera(fov, aspect, nearClippingPlane, farClippingPlane);\n          if (focalLength !== null) model.setFocalLength(focalLength);\n          break;\n        case 1:\n          // Orthographic\n          model = new OrthographicCamera(-width / 2, width / 2, height / 2, -height / 2, nearClippingPlane, farClippingPlane);\n          break;\n        default:\n          console.warn('THREE.FBXLoader: Unknown camera type ' + type + '.');\n          model = new Object3D();\n          break;\n      }\n    }\n    return model;\n  } // Create a DirectionalLight, PointLight or SpotLight\n\n  createLight(relationships) {\n    let model;\n    let lightAttribute;\n    relationships.children.forEach(function (child) {\n      const attr = fbxTree.Objects.NodeAttribute[child.ID];\n      if (attr !== undefined) {\n        lightAttribute = attr;\n      }\n    });\n    if (lightAttribute === undefined) {\n      model = new Object3D();\n    } else {\n      let type; // LightType can be undefined for Point lights\n\n      if (lightAttribute.LightType === undefined) {\n        type = 0;\n      } else {\n        type = lightAttribute.LightType.value;\n      }\n      let color = 0xffffff;\n      if (lightAttribute.Color !== undefined) {\n        color = new Color().fromArray(lightAttribute.Color.value);\n      }\n      let intensity = lightAttribute.Intensity === undefined ? 1 : lightAttribute.Intensity.value / 100; // light disabled\n\n      if (lightAttribute.CastLightOnObject !== undefined && lightAttribute.CastLightOnObject.value === 0) {\n        intensity = 0;\n      }\n      let distance = 0;\n      if (lightAttribute.FarAttenuationEnd !== undefined) {\n        if (lightAttribute.EnableFarAttenuation !== undefined && lightAttribute.EnableFarAttenuation.value === 0) {\n          distance = 0;\n        } else {\n          distance = lightAttribute.FarAttenuationEnd.value;\n        }\n      } // TODO: could this be calculated linearly from FarAttenuationStart to FarAttenuationEnd?\n\n      const decay = 1;\n      switch (type) {\n        case 0:\n          // Point\n          model = new PointLight(color, intensity, distance, decay);\n          break;\n        case 1:\n          // Directional\n          model = new DirectionalLight(color, intensity);\n          break;\n        case 2:\n          // Spot\n          let angle = Math.PI / 3;\n          if (lightAttribute.InnerAngle !== undefined) {\n            angle = MathUtils.degToRad(lightAttribute.InnerAngle.value);\n          }\n          let penumbra = 0;\n          if (lightAttribute.OuterAngle !== undefined) {\n            // TODO: this is not correct - FBX calculates outer and inner angle in degrees\n            // with OuterAngle > InnerAngle && OuterAngle <= Math.PI\n            // while three.js uses a penumbra between (0, 1) to attenuate the inner angle\n            penumbra = MathUtils.degToRad(lightAttribute.OuterAngle.value);\n            penumbra = Math.max(penumbra, 1);\n          }\n          model = new SpotLight(color, intensity, distance, angle, penumbra, decay);\n          break;\n        default:\n          console.warn('THREE.FBXLoader: Unknown light type ' + lightAttribute.LightType.value + ', defaulting to a PointLight.');\n          model = new PointLight(color, intensity);\n          break;\n      }\n      if (lightAttribute.CastShadows !== undefined && lightAttribute.CastShadows.value === 1) {\n        model.castShadow = true;\n      }\n    }\n    return model;\n  }\n  createMesh(relationships, geometryMap, materialMap) {\n    let model;\n    let geometry = null;\n    let material = null;\n    const materials = []; // get geometry and materials(s) from connections\n\n    relationships.children.forEach(function (child) {\n      if (geometryMap.has(child.ID)) {\n        geometry = geometryMap.get(child.ID);\n      }\n      if (materialMap.has(child.ID)) {\n        materials.push(materialMap.get(child.ID));\n      }\n    });\n    if (materials.length > 1) {\n      material = materials;\n    } else if (materials.length > 0) {\n      material = materials[0];\n    } else {\n      material = new MeshPhongMaterial({\n        color: 0xcccccc\n      });\n      materials.push(material);\n    }\n    if ('color' in geometry.attributes) {\n      materials.forEach(function (material) {\n        material.vertexColors = true;\n      });\n    }\n    if (geometry.FBX_Deformer) {\n      materials.forEach(function (material) {\n        material.skinning = true;\n      });\n      model = new SkinnedMesh(geometry, material);\n      model.normalizeSkinWeights();\n    } else {\n      model = new Mesh(geometry, material);\n    }\n    return model;\n  }\n  createCurve(relationships, geometryMap) {\n    const geometry = relationships.children.reduce(function (geo, child) {\n      if (geometryMap.has(child.ID)) geo = geometryMap.get(child.ID);\n      return geo;\n    }, null); // FBX does not list materials for Nurbs lines, so we'll just put our own in here.\n\n    const material = new LineBasicMaterial({\n      color: 0x3300ff,\n      linewidth: 1\n    });\n    return new Line(geometry, material);\n  } // parse the model node for transform data\n\n  getTransformData(model, modelNode) {\n    const transformData = {};\n    if ('InheritType' in modelNode) transformData.inheritType = parseInt(modelNode.InheritType.value);\n    if ('RotationOrder' in modelNode) transformData.eulerOrder = getEulerOrder(modelNode.RotationOrder.value);else transformData.eulerOrder = 'ZYX';\n    if ('Lcl_Translation' in modelNode) transformData.translation = modelNode.Lcl_Translation.value;\n    if ('PreRotation' in modelNode) transformData.preRotation = modelNode.PreRotation.value;\n    if ('Lcl_Rotation' in modelNode) transformData.rotation = modelNode.Lcl_Rotation.value;\n    if ('PostRotation' in modelNode) transformData.postRotation = modelNode.PostRotation.value;\n    if ('Lcl_Scaling' in modelNode) transformData.scale = modelNode.Lcl_Scaling.value;\n    if ('ScalingOffset' in modelNode) transformData.scalingOffset = modelNode.ScalingOffset.value;\n    if ('ScalingPivot' in modelNode) transformData.scalingPivot = modelNode.ScalingPivot.value;\n    if ('RotationOffset' in modelNode) transformData.rotationOffset = modelNode.RotationOffset.value;\n    if ('RotationPivot' in modelNode) transformData.rotationPivot = modelNode.RotationPivot.value;\n    model.userData.transformData = transformData;\n  }\n  setLookAtProperties(model, modelNode) {\n    if ('LookAtProperty' in modelNode) {\n      const children = connections.get(model.ID).children;\n      children.forEach(function (child) {\n        if (child.relationship === 'LookAtProperty') {\n          const lookAtTarget = fbxTree.Objects.Model[child.ID];\n          if ('Lcl_Translation' in lookAtTarget) {\n            const pos = lookAtTarget.Lcl_Translation.value; // DirectionalLight, SpotLight\n\n            if (model.target !== undefined) {\n              model.target.position.fromArray(pos);\n              sceneGraph.add(model.target);\n            } else {\n              // Cameras and other Object3Ds\n              model.lookAt(new Vector3().fromArray(pos));\n            }\n          }\n        }\n      });\n    }\n  }\n  bindSkeleton(skeletons, geometryMap, modelMap) {\n    const bindMatrices = this.parsePoseNodes();\n    for (const ID in skeletons) {\n      const skeleton = skeletons[ID];\n      const parents = connections.get(parseInt(skeleton.ID)).parents;\n      parents.forEach(function (parent) {\n        if (geometryMap.has(parent.ID)) {\n          const geoID = parent.ID;\n          const geoRelationships = connections.get(geoID);\n          geoRelationships.parents.forEach(function (geoConnParent) {\n            if (modelMap.has(geoConnParent.ID)) {\n              const model = modelMap.get(geoConnParent.ID);\n              model.bind(new Skeleton(skeleton.bones), bindMatrices[geoConnParent.ID]);\n            }\n          });\n        }\n      });\n    }\n  }\n  parsePoseNodes() {\n    const bindMatrices = {};\n    if ('Pose' in fbxTree.Objects) {\n      const BindPoseNode = fbxTree.Objects.Pose;\n      for (const nodeID in BindPoseNode) {\n        if (BindPoseNode[nodeID].attrType === 'BindPose') {\n          const poseNodes = BindPoseNode[nodeID].PoseNode;\n          if (Array.isArray(poseNodes)) {\n            poseNodes.forEach(function (poseNode) {\n              bindMatrices[poseNode.Node] = new Matrix4().fromArray(poseNode.Matrix.a);\n            });\n          } else {\n            bindMatrices[poseNodes.Node] = new Matrix4().fromArray(poseNodes.Matrix.a);\n          }\n        }\n      }\n    }\n    return bindMatrices;\n  } // Parse ambient color in FBXTree.GlobalSettings - if it's not set to black (default), create an ambient light\n\n  createAmbientLight() {\n    if ('GlobalSettings' in fbxTree && 'AmbientColor' in fbxTree.GlobalSettings) {\n      const ambientColor = fbxTree.GlobalSettings.AmbientColor.value;\n      const r = ambientColor[0];\n      const g = ambientColor[1];\n      const b = ambientColor[2];\n      if (r !== 0 || g !== 0 || b !== 0) {\n        const color = new Color(r, g, b);\n        sceneGraph.add(new AmbientLight(color, 1));\n      }\n    }\n  }\n  setupMorphMaterials() {\n    const scope = this;\n    sceneGraph.traverse(function (child) {\n      if (child.isMesh) {\n        if (child.geometry.morphAttributes.position && child.geometry.morphAttributes.position.length) {\n          if (Array.isArray(child.material)) {\n            child.material.forEach(function (material, i) {\n              scope.setupMorphMaterial(child, material, i);\n            });\n          } else {\n            scope.setupMorphMaterial(child, child.material);\n          }\n        }\n      }\n    });\n  }\n  setupMorphMaterial(child, material, index) {\n    const uuid = child.uuid;\n    const matUuid = material.uuid; // if a geometry has morph targets, it cannot share the material with other geometries\n\n    let sharedMat = false;\n    sceneGraph.traverse(function (node) {\n      if (node.isMesh) {\n        if (Array.isArray(node.material)) {\n          node.material.forEach(function (mat) {\n            if (mat.uuid === matUuid && node.uuid !== uuid) sharedMat = true;\n          });\n        } else if (node.material.uuid === matUuid && node.uuid !== uuid) {\n          sharedMat = true;\n        }\n      }\n    });\n    if (sharedMat === true) {\n      const clonedMat = material.clone();\n      clonedMat.morphTargets = true;\n      if (index === undefined) child.material = clonedMat;else child.material[index] = clonedMat;\n    } else {\n      material.morphTargets = true;\n    }\n  }\n} // parse Geometry data from FBXTree and return map of BufferGeometries\n\nclass GeometryParser {\n  // Parse nodes in FBXTree.Objects.Geometry\n  parse(deformers) {\n    const geometryMap = new Map();\n    if ('Geometry' in fbxTree.Objects) {\n      const geoNodes = fbxTree.Objects.Geometry;\n      for (const nodeID in geoNodes) {\n        const relationships = connections.get(parseInt(nodeID));\n        const geo = this.parseGeometry(relationships, geoNodes[nodeID], deformers);\n        geometryMap.set(parseInt(nodeID), geo);\n      }\n    }\n    return geometryMap;\n  } // Parse single node in FBXTree.Objects.Geometry\n\n  parseGeometry(relationships, geoNode, deformers) {\n    switch (geoNode.attrType) {\n      case 'Mesh':\n        return this.parseMeshGeometry(relationships, geoNode, deformers);\n      case 'NurbsCurve':\n        return this.parseNurbsGeometry(geoNode);\n    }\n  } // Parse single node mesh geometry in FBXTree.Objects.Geometry\n\n  parseMeshGeometry(relationships, geoNode, deformers) {\n    const skeletons = deformers.skeletons;\n    const morphTargets = [];\n    const modelNodes = relationships.parents.map(function (parent) {\n      return fbxTree.Objects.Model[parent.ID];\n    }); // don't create geometry if it is not associated with any models\n\n    if (modelNodes.length === 0) return;\n    const skeleton = relationships.children.reduce(function (skeleton, child) {\n      if (skeletons[child.ID] !== undefined) skeleton = skeletons[child.ID];\n      return skeleton;\n    }, null);\n    relationships.children.forEach(function (child) {\n      if (deformers.morphTargets[child.ID] !== undefined) {\n        morphTargets.push(deformers.morphTargets[child.ID]);\n      }\n    }); // Assume one model and get the preRotation from that\n    // if there is more than one model associated with the geometry this may cause problems\n\n    const modelNode = modelNodes[0];\n    const transformData = {};\n    if ('RotationOrder' in modelNode) transformData.eulerOrder = getEulerOrder(modelNode.RotationOrder.value);\n    if ('InheritType' in modelNode) transformData.inheritType = parseInt(modelNode.InheritType.value);\n    if ('GeometricTranslation' in modelNode) transformData.translation = modelNode.GeometricTranslation.value;\n    if ('GeometricRotation' in modelNode) transformData.rotation = modelNode.GeometricRotation.value;\n    if ('GeometricScaling' in modelNode) transformData.scale = modelNode.GeometricScaling.value;\n    const transform = generateTransform(transformData);\n    return this.genGeometry(geoNode, skeleton, morphTargets, transform);\n  } // Generate a BufferGeometry from a node in FBXTree.Objects.Geometry\n\n  genGeometry(geoNode, skeleton, morphTargets, preTransform) {\n    const geo = new BufferGeometry();\n    if (geoNode.attrName) geo.name = geoNode.attrName;\n    const geoInfo = this.parseGeoNode(geoNode, skeleton);\n    const buffers = this.genBuffers(geoInfo);\n    const positionAttribute = new Float32BufferAttribute(buffers.vertex, 3);\n    positionAttribute.applyMatrix4(preTransform);\n    geo.setAttribute('position', positionAttribute);\n    if (buffers.colors.length > 0) {\n      geo.setAttribute('color', new Float32BufferAttribute(buffers.colors, 3));\n    }\n    if (skeleton) {\n      geo.setAttribute('skinIndex', new Uint16BufferAttribute(buffers.weightsIndices, 4));\n      geo.setAttribute('skinWeight', new Float32BufferAttribute(buffers.vertexWeights, 4)); // used later to bind the skeleton to the model\n\n      geo.FBX_Deformer = skeleton;\n    }\n    if (buffers.normal.length > 0) {\n      const normalMatrix = new Matrix3().getNormalMatrix(preTransform);\n      const normalAttribute = new Float32BufferAttribute(buffers.normal, 3);\n      normalAttribute.applyNormalMatrix(normalMatrix);\n      geo.setAttribute('normal', normalAttribute);\n    }\n    buffers.uvs.forEach(function (uvBuffer, i) {\n      // subsequent uv buffers are called 'uv1', 'uv2', ...\n      let name = 'uv' + (i + 1).toString(); // the first uv buffer is just called 'uv'\n\n      if (i === 0) {\n        name = 'uv';\n      }\n      geo.setAttribute(name, new Float32BufferAttribute(buffers.uvs[i], 2));\n    });\n    if (geoInfo.material && geoInfo.material.mappingType !== 'AllSame') {\n      // Convert the material indices of each vertex into rendering groups on the geometry.\n      let prevMaterialIndex = buffers.materialIndex[0];\n      let startIndex = 0;\n      buffers.materialIndex.forEach(function (currentIndex, i) {\n        if (currentIndex !== prevMaterialIndex) {\n          geo.addGroup(startIndex, i - startIndex, prevMaterialIndex);\n          prevMaterialIndex = currentIndex;\n          startIndex = i;\n        }\n      }); // the loop above doesn't add the last group, do that here.\n\n      if (geo.groups.length > 0) {\n        const lastGroup = geo.groups[geo.groups.length - 1];\n        const lastIndex = lastGroup.start + lastGroup.count;\n        if (lastIndex !== buffers.materialIndex.length) {\n          geo.addGroup(lastIndex, buffers.materialIndex.length - lastIndex, prevMaterialIndex);\n        }\n      } // case where there are multiple materials but the whole geometry is only\n      // using one of them\n\n      if (geo.groups.length === 0) {\n        geo.addGroup(0, buffers.materialIndex.length, buffers.materialIndex[0]);\n      }\n    }\n    this.addMorphTargets(geo, geoNode, morphTargets, preTransform);\n    return geo;\n  }\n  parseGeoNode(geoNode, skeleton) {\n    const geoInfo = {};\n    geoInfo.vertexPositions = geoNode.Vertices !== undefined ? geoNode.Vertices.a : [];\n    geoInfo.vertexIndices = geoNode.PolygonVertexIndex !== undefined ? geoNode.PolygonVertexIndex.a : [];\n    if (geoNode.LayerElementColor) {\n      geoInfo.color = this.parseVertexColors(geoNode.LayerElementColor[0]);\n    }\n    if (geoNode.LayerElementMaterial) {\n      geoInfo.material = this.parseMaterialIndices(geoNode.LayerElementMaterial[0]);\n    }\n    if (geoNode.LayerElementNormal) {\n      geoInfo.normal = this.parseNormals(geoNode.LayerElementNormal[0]);\n    }\n    if (geoNode.LayerElementUV) {\n      geoInfo.uv = [];\n      let i = 0;\n      while (geoNode.LayerElementUV[i]) {\n        if (geoNode.LayerElementUV[i].UV) {\n          geoInfo.uv.push(this.parseUVs(geoNode.LayerElementUV[i]));\n        }\n        i++;\n      }\n    }\n    geoInfo.weightTable = {};\n    if (skeleton !== null) {\n      geoInfo.skeleton = skeleton;\n      skeleton.rawBones.forEach(function (rawBone, i) {\n        // loop over the bone's vertex indices and weights\n        rawBone.indices.forEach(function (index, j) {\n          if (geoInfo.weightTable[index] === undefined) geoInfo.weightTable[index] = [];\n          geoInfo.weightTable[index].push({\n            id: i,\n            weight: rawBone.weights[j]\n          });\n        });\n      });\n    }\n    return geoInfo;\n  }\n  genBuffers(geoInfo) {\n    const buffers = {\n      vertex: [],\n      normal: [],\n      colors: [],\n      uvs: [],\n      materialIndex: [],\n      vertexWeights: [],\n      weightsIndices: []\n    };\n    let polygonIndex = 0;\n    let faceLength = 0;\n    let displayedWeightsWarning = false; // these will hold data for a single face\n\n    let facePositionIndexes = [];\n    let faceNormals = [];\n    let faceColors = [];\n    let faceUVs = [];\n    let faceWeights = [];\n    let faceWeightIndices = [];\n    const scope = this;\n    geoInfo.vertexIndices.forEach(function (vertexIndex, polygonVertexIndex) {\n      let materialIndex;\n      let endOfFace = false; // Face index and vertex index arrays are combined in a single array\n      // A cube with quad faces looks like this:\n      // PolygonVertexIndex: *24 {\n      //  a: 0, 1, 3, -3, 2, 3, 5, -5, 4, 5, 7, -7, 6, 7, 1, -1, 1, 7, 5, -4, 6, 0, 2, -5\n      //  }\n      // Negative numbers mark the end of a face - first face here is 0, 1, 3, -3\n      // to find index of last vertex bit shift the index: ^ - 1\n\n      if (vertexIndex < 0) {\n        vertexIndex = vertexIndex ^ -1; // equivalent to ( x * -1 ) - 1\n\n        endOfFace = true;\n      }\n      let weightIndices = [];\n      let weights = [];\n      facePositionIndexes.push(vertexIndex * 3, vertexIndex * 3 + 1, vertexIndex * 3 + 2);\n      if (geoInfo.color) {\n        const data = getData(polygonVertexIndex, polygonIndex, vertexIndex, geoInfo.color);\n        faceColors.push(data[0], data[1], data[2]);\n      }\n      if (geoInfo.skeleton) {\n        if (geoInfo.weightTable[vertexIndex] !== undefined) {\n          geoInfo.weightTable[vertexIndex].forEach(function (wt) {\n            weights.push(wt.weight);\n            weightIndices.push(wt.id);\n          });\n        }\n        if (weights.length > 4) {\n          if (!displayedWeightsWarning) {\n            console.warn('THREE.FBXLoader: Vertex has more than 4 skinning weights assigned to vertex. Deleting additional weights.');\n            displayedWeightsWarning = true;\n          }\n          const wIndex = [0, 0, 0, 0];\n          const Weight = [0, 0, 0, 0];\n          weights.forEach(function (weight, weightIndex) {\n            let currentWeight = weight;\n            let currentIndex = weightIndices[weightIndex];\n            Weight.forEach(function (comparedWeight, comparedWeightIndex, comparedWeightArray) {\n              if (currentWeight > comparedWeight) {\n                comparedWeightArray[comparedWeightIndex] = currentWeight;\n                currentWeight = comparedWeight;\n                const tmp = wIndex[comparedWeightIndex];\n                wIndex[comparedWeightIndex] = currentIndex;\n                currentIndex = tmp;\n              }\n            });\n          });\n          weightIndices = wIndex;\n          weights = Weight;\n        } // if the weight array is shorter than 4 pad with 0s\n\n        while (weights.length < 4) {\n          weights.push(0);\n          weightIndices.push(0);\n        }\n        for (let i = 0; i < 4; ++i) {\n          faceWeights.push(weights[i]);\n          faceWeightIndices.push(weightIndices[i]);\n        }\n      }\n      if (geoInfo.normal) {\n        const data = getData(polygonVertexIndex, polygonIndex, vertexIndex, geoInfo.normal);\n        faceNormals.push(data[0], data[1], data[2]);\n      }\n      if (geoInfo.material && geoInfo.material.mappingType !== 'AllSame') {\n        materialIndex = getData(polygonVertexIndex, polygonIndex, vertexIndex, geoInfo.material)[0];\n      }\n      if (geoInfo.uv) {\n        geoInfo.uv.forEach(function (uv, i) {\n          const data = getData(polygonVertexIndex, polygonIndex, vertexIndex, uv);\n          if (faceUVs[i] === undefined) {\n            faceUVs[i] = [];\n          }\n          faceUVs[i].push(data[0]);\n          faceUVs[i].push(data[1]);\n        });\n      }\n      faceLength++;\n      if (endOfFace) {\n        scope.genFace(buffers, geoInfo, facePositionIndexes, materialIndex, faceNormals, faceColors, faceUVs, faceWeights, faceWeightIndices, faceLength);\n        polygonIndex++;\n        faceLength = 0; // reset arrays for the next face\n\n        facePositionIndexes = [];\n        faceNormals = [];\n        faceColors = [];\n        faceUVs = [];\n        faceWeights = [];\n        faceWeightIndices = [];\n      }\n    });\n    return buffers;\n  } // Generate data for a single face in a geometry. If the face is a quad then split it into 2 tris\n\n  genFace(buffers, geoInfo, facePositionIndexes, materialIndex, faceNormals, faceColors, faceUVs, faceWeights, faceWeightIndices, faceLength) {\n    for (let i = 2; i < faceLength; i++) {\n      buffers.vertex.push(geoInfo.vertexPositions[facePositionIndexes[0]]);\n      buffers.vertex.push(geoInfo.vertexPositions[facePositionIndexes[1]]);\n      buffers.vertex.push(geoInfo.vertexPositions[facePositionIndexes[2]]);\n      buffers.vertex.push(geoInfo.vertexPositions[facePositionIndexes[(i - 1) * 3]]);\n      buffers.vertex.push(geoInfo.vertexPositions[facePositionIndexes[(i - 1) * 3 + 1]]);\n      buffers.vertex.push(geoInfo.vertexPositions[facePositionIndexes[(i - 1) * 3 + 2]]);\n      buffers.vertex.push(geoInfo.vertexPositions[facePositionIndexes[i * 3]]);\n      buffers.vertex.push(geoInfo.vertexPositions[facePositionIndexes[i * 3 + 1]]);\n      buffers.vertex.push(geoInfo.vertexPositions[facePositionIndexes[i * 3 + 2]]);\n      if (geoInfo.skeleton) {\n        buffers.vertexWeights.push(faceWeights[0]);\n        buffers.vertexWeights.push(faceWeights[1]);\n        buffers.vertexWeights.push(faceWeights[2]);\n        buffers.vertexWeights.push(faceWeights[3]);\n        buffers.vertexWeights.push(faceWeights[(i - 1) * 4]);\n        buffers.vertexWeights.push(faceWeights[(i - 1) * 4 + 1]);\n        buffers.vertexWeights.push(faceWeights[(i - 1) * 4 + 2]);\n        buffers.vertexWeights.push(faceWeights[(i - 1) * 4 + 3]);\n        buffers.vertexWeights.push(faceWeights[i * 4]);\n        buffers.vertexWeights.push(faceWeights[i * 4 + 1]);\n        buffers.vertexWeights.push(faceWeights[i * 4 + 2]);\n        buffers.vertexWeights.push(faceWeights[i * 4 + 3]);\n        buffers.weightsIndices.push(faceWeightIndices[0]);\n        buffers.weightsIndices.push(faceWeightIndices[1]);\n        buffers.weightsIndices.push(faceWeightIndices[2]);\n        buffers.weightsIndices.push(faceWeightIndices[3]);\n        buffers.weightsIndices.push(faceWeightIndices[(i - 1) * 4]);\n        buffers.weightsIndices.push(faceWeightIndices[(i - 1) * 4 + 1]);\n        buffers.weightsIndices.push(faceWeightIndices[(i - 1) * 4 + 2]);\n        buffers.weightsIndices.push(faceWeightIndices[(i - 1) * 4 + 3]);\n        buffers.weightsIndices.push(faceWeightIndices[i * 4]);\n        buffers.weightsIndices.push(faceWeightIndices[i * 4 + 1]);\n        buffers.weightsIndices.push(faceWeightIndices[i * 4 + 2]);\n        buffers.weightsIndices.push(faceWeightIndices[i * 4 + 3]);\n      }\n      if (geoInfo.color) {\n        buffers.colors.push(faceColors[0]);\n        buffers.colors.push(faceColors[1]);\n        buffers.colors.push(faceColors[2]);\n        buffers.colors.push(faceColors[(i - 1) * 3]);\n        buffers.colors.push(faceColors[(i - 1) * 3 + 1]);\n        buffers.colors.push(faceColors[(i - 1) * 3 + 2]);\n        buffers.colors.push(faceColors[i * 3]);\n        buffers.colors.push(faceColors[i * 3 + 1]);\n        buffers.colors.push(faceColors[i * 3 + 2]);\n      }\n      if (geoInfo.material && geoInfo.material.mappingType !== 'AllSame') {\n        buffers.materialIndex.push(materialIndex);\n        buffers.materialIndex.push(materialIndex);\n        buffers.materialIndex.push(materialIndex);\n      }\n      if (geoInfo.normal) {\n        buffers.normal.push(faceNormals[0]);\n        buffers.normal.push(faceNormals[1]);\n        buffers.normal.push(faceNormals[2]);\n        buffers.normal.push(faceNormals[(i - 1) * 3]);\n        buffers.normal.push(faceNormals[(i - 1) * 3 + 1]);\n        buffers.normal.push(faceNormals[(i - 1) * 3 + 2]);\n        buffers.normal.push(faceNormals[i * 3]);\n        buffers.normal.push(faceNormals[i * 3 + 1]);\n        buffers.normal.push(faceNormals[i * 3 + 2]);\n      }\n      if (geoInfo.uv) {\n        geoInfo.uv.forEach(function (uv, j) {\n          if (buffers.uvs[j] === undefined) buffers.uvs[j] = [];\n          buffers.uvs[j].push(faceUVs[j][0]);\n          buffers.uvs[j].push(faceUVs[j][1]);\n          buffers.uvs[j].push(faceUVs[j][(i - 1) * 2]);\n          buffers.uvs[j].push(faceUVs[j][(i - 1) * 2 + 1]);\n          buffers.uvs[j].push(faceUVs[j][i * 2]);\n          buffers.uvs[j].push(faceUVs[j][i * 2 + 1]);\n        });\n      }\n    }\n  }\n  addMorphTargets(parentGeo, parentGeoNode, morphTargets, preTransform) {\n    if (morphTargets.length === 0) return;\n    parentGeo.morphTargetsRelative = true;\n    parentGeo.morphAttributes.position = []; // parentGeo.morphAttributes.normal = []; // not implemented\n\n    const scope = this;\n    morphTargets.forEach(function (morphTarget) {\n      morphTarget.rawTargets.forEach(function (rawTarget) {\n        const morphGeoNode = fbxTree.Objects.Geometry[rawTarget.geoID];\n        if (morphGeoNode !== undefined) {\n          scope.genMorphGeometry(parentGeo, parentGeoNode, morphGeoNode, preTransform, rawTarget.name);\n        }\n      });\n    });\n  } // a morph geometry node is similar to a standard  node, and the node is also contained\n  // in FBXTree.Objects.Geometry, however it can only have attributes for position, normal\n  // and a special attribute Index defining which vertices of the original geometry are affected\n  // Normal and position attributes only have data for the vertices that are affected by the morph\n\n  genMorphGeometry(parentGeo, parentGeoNode, morphGeoNode, preTransform, name) {\n    const vertexIndices = parentGeoNode.PolygonVertexIndex !== undefined ? parentGeoNode.PolygonVertexIndex.a : [];\n    const morphPositionsSparse = morphGeoNode.Vertices !== undefined ? morphGeoNode.Vertices.a : [];\n    const indices = morphGeoNode.Indexes !== undefined ? morphGeoNode.Indexes.a : [];\n    const length = parentGeo.attributes.position.count * 3;\n    const morphPositions = new Float32Array(length);\n    for (let i = 0; i < indices.length; i++) {\n      const morphIndex = indices[i] * 3;\n      morphPositions[morphIndex] = morphPositionsSparse[i * 3];\n      morphPositions[morphIndex + 1] = morphPositionsSparse[i * 3 + 1];\n      morphPositions[morphIndex + 2] = morphPositionsSparse[i * 3 + 2];\n    } // TODO: add morph normal support\n\n    const morphGeoInfo = {\n      vertexIndices: vertexIndices,\n      vertexPositions: morphPositions\n    };\n    const morphBuffers = this.genBuffers(morphGeoInfo);\n    const positionAttribute = new Float32BufferAttribute(morphBuffers.vertex, 3);\n    positionAttribute.name = name || morphGeoNode.attrName;\n    positionAttribute.applyMatrix4(preTransform);\n    parentGeo.morphAttributes.position.push(positionAttribute);\n  } // Parse normal from FBXTree.Objects.Geometry.LayerElementNormal if it exists\n\n  parseNormals(NormalNode) {\n    const mappingType = NormalNode.MappingInformationType;\n    const referenceType = NormalNode.ReferenceInformationType;\n    const buffer = NormalNode.Normals.a;\n    let indexBuffer = [];\n    if (referenceType === 'IndexToDirect') {\n      if ('NormalIndex' in NormalNode) {\n        indexBuffer = NormalNode.NormalIndex.a;\n      } else if ('NormalsIndex' in NormalNode) {\n        indexBuffer = NormalNode.NormalsIndex.a;\n      }\n    }\n    return {\n      dataSize: 3,\n      buffer: buffer,\n      indices: indexBuffer,\n      mappingType: mappingType,\n      referenceType: referenceType\n    };\n  } // Parse UVs from FBXTree.Objects.Geometry.LayerElementUV if it exists\n\n  parseUVs(UVNode) {\n    const mappingType = UVNode.MappingInformationType;\n    const referenceType = UVNode.ReferenceInformationType;\n    const buffer = UVNode.UV.a;\n    let indexBuffer = [];\n    if (referenceType === 'IndexToDirect') {\n      indexBuffer = UVNode.UVIndex.a;\n    }\n    return {\n      dataSize: 2,\n      buffer: buffer,\n      indices: indexBuffer,\n      mappingType: mappingType,\n      referenceType: referenceType\n    };\n  } // Parse Vertex Colors from FBXTree.Objects.Geometry.LayerElementColor if it exists\n\n  parseVertexColors(ColorNode) {\n    const mappingType = ColorNode.MappingInformationType;\n    const referenceType = ColorNode.ReferenceInformationType;\n    const buffer = ColorNode.Colors.a;\n    let indexBuffer = [];\n    if (referenceType === 'IndexToDirect') {\n      indexBuffer = ColorNode.ColorIndex.a;\n    }\n    return {\n      dataSize: 4,\n      buffer: buffer,\n      indices: indexBuffer,\n      mappingType: mappingType,\n      referenceType: referenceType\n    };\n  } // Parse mapping and material data in FBXTree.Objects.Geometry.LayerElementMaterial if it exists\n\n  parseMaterialIndices(MaterialNode) {\n    const mappingType = MaterialNode.MappingInformationType;\n    const referenceType = MaterialNode.ReferenceInformationType;\n    if (mappingType === 'NoMappingInformation') {\n      return {\n        dataSize: 1,\n        buffer: [0],\n        indices: [0],\n        mappingType: 'AllSame',\n        referenceType: referenceType\n      };\n    }\n    const materialIndexBuffer = MaterialNode.Materials.a; // Since materials are stored as indices, there's a bit of a mismatch between FBX and what\n    // we expect.So we create an intermediate buffer that points to the index in the buffer,\n    // for conforming with the other functions we've written for other data.\n\n    const materialIndices = [];\n    for (let i = 0; i < materialIndexBuffer.length; ++i) {\n      materialIndices.push(i);\n    }\n    return {\n      dataSize: 1,\n      buffer: materialIndexBuffer,\n      indices: materialIndices,\n      mappingType: mappingType,\n      referenceType: referenceType\n    };\n  } // Generate a NurbGeometry from a node in FBXTree.Objects.Geometry\n\n  parseNurbsGeometry(geoNode) {\n    if (NURBSCurve === undefined) {\n      console.error('THREE.FBXLoader: The loader relies on NURBSCurve for any nurbs present in the model. Nurbs will show up as empty geometry.');\n      return new BufferGeometry();\n    }\n    const order = parseInt(geoNode.Order);\n    if (isNaN(order)) {\n      console.error('THREE.FBXLoader: Invalid Order %s given for geometry ID: %s', geoNode.Order, geoNode.id);\n      return new BufferGeometry();\n    }\n    const degree = order - 1;\n    const knots = geoNode.KnotVector.a;\n    const controlPoints = [];\n    const pointsValues = geoNode.Points.a;\n    for (let i = 0, l = pointsValues.length; i < l; i += 4) {\n      controlPoints.push(new Vector4().fromArray(pointsValues, i));\n    }\n    let startKnot, endKnot;\n    if (geoNode.Form === 'Closed') {\n      controlPoints.push(controlPoints[0]);\n    } else if (geoNode.Form === 'Periodic') {\n      startKnot = degree;\n      endKnot = knots.length - 1 - startKnot;\n      for (let i = 0; i < degree; ++i) {\n        controlPoints.push(controlPoints[i]);\n      }\n    }\n    const curve = new NURBSCurve(degree, knots, controlPoints, startKnot, endKnot);\n    const vertices = curve.getPoints(controlPoints.length * 7);\n    const positions = new Float32Array(vertices.length * 3);\n    vertices.forEach(function (vertex, i) {\n      vertex.toArray(positions, i * 3);\n    });\n    const geometry = new BufferGeometry();\n    geometry.setAttribute('position', new BufferAttribute(positions, 3));\n    return geometry;\n  }\n} // parse animation data from FBXTree\n\nclass AnimationParser {\n  // take raw animation clips and turn them into three.js animation clips\n  parse() {\n    const animationClips = [];\n    const rawClips = this.parseClips();\n    if (rawClips !== undefined) {\n      for (const key in rawClips) {\n        const rawClip = rawClips[key];\n        const clip = this.addClip(rawClip);\n        animationClips.push(clip);\n      }\n    }\n    return animationClips;\n  }\n  parseClips() {\n    // since the actual transformation data is stored in FBXTree.Objects.AnimationCurve,\n    // if this is undefined we can safely assume there are no animations\n    if (fbxTree.Objects.AnimationCurve === undefined) return undefined;\n    const curveNodesMap = this.parseAnimationCurveNodes();\n    this.parseAnimationCurves(curveNodesMap);\n    const layersMap = this.parseAnimationLayers(curveNodesMap);\n    const rawClips = this.parseAnimStacks(layersMap);\n    return rawClips;\n  } // parse nodes in FBXTree.Objects.AnimationCurveNode\n  // each AnimationCurveNode holds data for an animation transform for a model (e.g. left arm rotation )\n  // and is referenced by an AnimationLayer\n\n  parseAnimationCurveNodes() {\n    const rawCurveNodes = fbxTree.Objects.AnimationCurveNode;\n    const curveNodesMap = new Map();\n    for (const nodeID in rawCurveNodes) {\n      const rawCurveNode = rawCurveNodes[nodeID];\n      if (rawCurveNode.attrName.match(/S|R|T|DeformPercent/) !== null) {\n        const curveNode = {\n          id: rawCurveNode.id,\n          attr: rawCurveNode.attrName,\n          curves: {}\n        };\n        curveNodesMap.set(curveNode.id, curveNode);\n      }\n    }\n    return curveNodesMap;\n  } // parse nodes in FBXTree.Objects.AnimationCurve and connect them up to\n  // previously parsed AnimationCurveNodes. Each AnimationCurve holds data for a single animated\n  // axis ( e.g. times and values of x rotation)\n\n  parseAnimationCurves(curveNodesMap) {\n    const rawCurves = fbxTree.Objects.AnimationCurve; // TODO: Many values are identical up to roundoff error, but won't be optimised\n    // e.g. position times: [0, 0.4, 0. 8]\n    // position values: [7.23538335023477e-7, 93.67518615722656, -0.9982695579528809, 7.23538335023477e-7, 93.67518615722656, -0.9982695579528809, 7.235384487103147e-7, 93.67520904541016, -0.9982695579528809]\n    // clearly, this should be optimised to\n    // times: [0], positions [7.23538335023477e-7, 93.67518615722656, -0.9982695579528809]\n    // this shows up in nearly every FBX file, and generally time array is length > 100\n\n    for (const nodeID in rawCurves) {\n      const animationCurve = {\n        id: rawCurves[nodeID].id,\n        times: rawCurves[nodeID].KeyTime.a.map(convertFBXTimeToSeconds),\n        values: rawCurves[nodeID].KeyValueFloat.a\n      };\n      const relationships = connections.get(animationCurve.id);\n      if (relationships !== undefined) {\n        const animationCurveID = relationships.parents[0].ID;\n        const animationCurveRelationship = relationships.parents[0].relationship;\n        if (animationCurveRelationship.match(/X/)) {\n          curveNodesMap.get(animationCurveID).curves['x'] = animationCurve;\n        } else if (animationCurveRelationship.match(/Y/)) {\n          curveNodesMap.get(animationCurveID).curves['y'] = animationCurve;\n        } else if (animationCurveRelationship.match(/Z/)) {\n          curveNodesMap.get(animationCurveID).curves['z'] = animationCurve;\n        } else if (animationCurveRelationship.match(/d|DeformPercent/) && curveNodesMap.has(animationCurveID)) {\n          curveNodesMap.get(animationCurveID).curves['morph'] = animationCurve;\n        }\n      }\n    }\n  } // parse nodes in FBXTree.Objects.AnimationLayer. Each layers holds references\n  // to various AnimationCurveNodes and is referenced by an AnimationStack node\n  // note: theoretically a stack can have multiple layers, however in practice there always seems to be one per stack\n\n  parseAnimationLayers(curveNodesMap) {\n    const rawLayers = fbxTree.Objects.AnimationLayer;\n    const layersMap = new Map();\n    for (const nodeID in rawLayers) {\n      const layerCurveNodes = [];\n      const connection = connections.get(parseInt(nodeID));\n      if (connection !== undefined) {\n        // all the animationCurveNodes used in the layer\n        const children = connection.children;\n        children.forEach(function (child, i) {\n          if (curveNodesMap.has(child.ID)) {\n            const curveNode = curveNodesMap.get(child.ID); // check that the curves are defined for at least one axis, otherwise ignore the curveNode\n\n            if (curveNode.curves.x !== undefined || curveNode.curves.y !== undefined || curveNode.curves.z !== undefined) {\n              if (layerCurveNodes[i] === undefined) {\n                const modelID = connections.get(child.ID).parents.filter(function (parent) {\n                  return parent.relationship !== undefined;\n                })[0].ID;\n                if (modelID !== undefined) {\n                  const rawModel = fbxTree.Objects.Model[modelID.toString()];\n                  if (rawModel === undefined) {\n                    console.warn('THREE.FBXLoader: Encountered a unused curve.', child);\n                    return;\n                  }\n                  const node = {\n                    modelName: rawModel.attrName ? PropertyBinding.sanitizeNodeName(rawModel.attrName) : '',\n                    ID: rawModel.id,\n                    initialPosition: [0, 0, 0],\n                    initialRotation: [0, 0, 0],\n                    initialScale: [1, 1, 1]\n                  };\n                  sceneGraph.traverse(function (child) {\n                    if (child.ID === rawModel.id) {\n                      node.transform = child.matrix;\n                      if (child.userData.transformData) node.eulerOrder = child.userData.transformData.eulerOrder;\n                    }\n                  });\n                  if (!node.transform) node.transform = new Matrix4(); // if the animated model is pre rotated, we'll have to apply the pre rotations to every\n                  // animation value as well\n\n                  if ('PreRotation' in rawModel) node.preRotation = rawModel.PreRotation.value;\n                  if ('PostRotation' in rawModel) node.postRotation = rawModel.PostRotation.value;\n                  layerCurveNodes[i] = node;\n                }\n              }\n              if (layerCurveNodes[i]) layerCurveNodes[i][curveNode.attr] = curveNode;\n            } else if (curveNode.curves.morph !== undefined) {\n              if (layerCurveNodes[i] === undefined) {\n                const deformerID = connections.get(child.ID).parents.filter(function (parent) {\n                  return parent.relationship !== undefined;\n                })[0].ID;\n                const morpherID = connections.get(deformerID).parents[0].ID;\n                const geoID = connections.get(morpherID).parents[0].ID; // assuming geometry is not used in more than one model\n\n                const modelID = connections.get(geoID).parents[0].ID;\n                const rawModel = fbxTree.Objects.Model[modelID];\n                const node = {\n                  modelName: rawModel.attrName ? PropertyBinding.sanitizeNodeName(rawModel.attrName) : '',\n                  morphName: fbxTree.Objects.Deformer[deformerID].attrName\n                };\n                layerCurveNodes[i] = node;\n              }\n              layerCurveNodes[i][curveNode.attr] = curveNode;\n            }\n          }\n        });\n        layersMap.set(parseInt(nodeID), layerCurveNodes);\n      }\n    }\n    return layersMap;\n  } // parse nodes in FBXTree.Objects.AnimationStack. These are the top level node in the animation\n  // hierarchy. Each Stack node will be used to create a AnimationClip\n\n  parseAnimStacks(layersMap) {\n    const rawStacks = fbxTree.Objects.AnimationStack; // connect the stacks (clips) up to the layers\n\n    const rawClips = {};\n    for (const nodeID in rawStacks) {\n      const children = connections.get(parseInt(nodeID)).children;\n      if (children.length > 1) {\n        // it seems like stacks will always be associated with a single layer. But just in case there are files\n        // where there are multiple layers per stack, we'll display a warning\n        console.warn('THREE.FBXLoader: Encountered an animation stack with multiple layers, this is currently not supported. Ignoring subsequent layers.');\n      }\n      const layer = layersMap.get(children[0].ID);\n      rawClips[nodeID] = {\n        name: rawStacks[nodeID].attrName,\n        layer: layer\n      };\n    }\n    return rawClips;\n  }\n  addClip(rawClip) {\n    let tracks = [];\n    const scope = this;\n    rawClip.layer.forEach(function (rawTracks) {\n      tracks = tracks.concat(scope.generateTracks(rawTracks));\n    });\n    return new AnimationClip(rawClip.name, -1, tracks);\n  }\n  generateTracks(rawTracks) {\n    const tracks = [];\n    let initialPosition = new Vector3();\n    let initialRotation = new Quaternion();\n    let initialScale = new Vector3();\n    if (rawTracks.transform) rawTracks.transform.decompose(initialPosition, initialRotation, initialScale);\n    initialPosition = initialPosition.toArray();\n    initialRotation = new Euler().setFromQuaternion(initialRotation, rawTracks.eulerOrder).toArray();\n    initialScale = initialScale.toArray();\n    if (rawTracks.T !== undefined && Object.keys(rawTracks.T.curves).length > 0) {\n      const positionTrack = this.generateVectorTrack(rawTracks.modelName, rawTracks.T.curves, initialPosition, 'position');\n      if (positionTrack !== undefined) tracks.push(positionTrack);\n    }\n    if (rawTracks.R !== undefined && Object.keys(rawTracks.R.curves).length > 0) {\n      const rotationTrack = this.generateRotationTrack(rawTracks.modelName, rawTracks.R.curves, initialRotation, rawTracks.preRotation, rawTracks.postRotation, rawTracks.eulerOrder);\n      if (rotationTrack !== undefined) tracks.push(rotationTrack);\n    }\n    if (rawTracks.S !== undefined && Object.keys(rawTracks.S.curves).length > 0) {\n      const scaleTrack = this.generateVectorTrack(rawTracks.modelName, rawTracks.S.curves, initialScale, 'scale');\n      if (scaleTrack !== undefined) tracks.push(scaleTrack);\n    }\n    if (rawTracks.DeformPercent !== undefined) {\n      const morphTrack = this.generateMorphTrack(rawTracks);\n      if (morphTrack !== undefined) tracks.push(morphTrack);\n    }\n    return tracks;\n  }\n  generateVectorTrack(modelName, curves, initialValue, type) {\n    const times = this.getTimesForAllAxes(curves);\n    const values = this.getKeyframeTrackValues(times, curves, initialValue);\n    return new VectorKeyframeTrack(modelName + '.' + type, times, values);\n  }\n  generateRotationTrack(modelName, curves, initialValue, preRotation, postRotation, eulerOrder) {\n    if (curves.x !== undefined) {\n      this.interpolateRotations(curves.x);\n      curves.x.values = curves.x.values.map(MathUtils.degToRad);\n    }\n    if (curves.y !== undefined) {\n      this.interpolateRotations(curves.y);\n      curves.y.values = curves.y.values.map(MathUtils.degToRad);\n    }\n    if (curves.z !== undefined) {\n      this.interpolateRotations(curves.z);\n      curves.z.values = curves.z.values.map(MathUtils.degToRad);\n    }\n    const times = this.getTimesForAllAxes(curves);\n    const values = this.getKeyframeTrackValues(times, curves, initialValue);\n    if (preRotation !== undefined) {\n      preRotation = preRotation.map(MathUtils.degToRad);\n      preRotation.push(eulerOrder);\n      preRotation = new Euler().fromArray(preRotation);\n      preRotation = new Quaternion().setFromEuler(preRotation);\n    }\n    if (postRotation !== undefined) {\n      postRotation = postRotation.map(MathUtils.degToRad);\n      postRotation.push(eulerOrder);\n      postRotation = new Euler().fromArray(postRotation);\n      postRotation = new Quaternion().setFromEuler(postRotation).invert();\n    }\n    const quaternion = new Quaternion();\n    const euler = new Euler();\n    const quaternionValues = [];\n    for (let i = 0; i < values.length; i += 3) {\n      euler.set(values[i], values[i + 1], values[i + 2], eulerOrder);\n      quaternion.setFromEuler(euler);\n      if (preRotation !== undefined) quaternion.premultiply(preRotation);\n      if (postRotation !== undefined) quaternion.multiply(postRotation);\n      quaternion.toArray(quaternionValues, i / 3 * 4);\n    }\n    return new QuaternionKeyframeTrack(modelName + '.quaternion', times, quaternionValues);\n  }\n  generateMorphTrack(rawTracks) {\n    const curves = rawTracks.DeformPercent.curves.morph;\n    const values = curves.values.map(function (val) {\n      return val / 100;\n    });\n    const morphNum = sceneGraph.getObjectByName(rawTracks.modelName).morphTargetDictionary[rawTracks.morphName];\n    return new NumberKeyframeTrack(rawTracks.modelName + '.morphTargetInfluences[' + morphNum + ']', curves.times, values);\n  } // For all animated objects, times are defined separately for each axis\n  // Here we'll combine the times into one sorted array without duplicates\n\n  getTimesForAllAxes(curves) {\n    let times = []; // first join together the times for each axis, if defined\n\n    if (curves.x !== undefined) times = times.concat(curves.x.times);\n    if (curves.y !== undefined) times = times.concat(curves.y.times);\n    if (curves.z !== undefined) times = times.concat(curves.z.times); // then sort them\n\n    times = times.sort(function (a, b) {\n      return a - b;\n    }); // and remove duplicates\n\n    if (times.length > 1) {\n      let targetIndex = 1;\n      let lastValue = times[0];\n      for (let i = 1; i < times.length; i++) {\n        const currentValue = times[i];\n        if (currentValue !== lastValue) {\n          times[targetIndex] = currentValue;\n          lastValue = currentValue;\n          targetIndex++;\n        }\n      }\n      times = times.slice(0, targetIndex);\n    }\n    return times;\n  }\n  getKeyframeTrackValues(times, curves, initialValue) {\n    const prevValue = initialValue;\n    const values = [];\n    let xIndex = -1;\n    let yIndex = -1;\n    let zIndex = -1;\n    times.forEach(function (time) {\n      if (curves.x) xIndex = curves.x.times.indexOf(time);\n      if (curves.y) yIndex = curves.y.times.indexOf(time);\n      if (curves.z) zIndex = curves.z.times.indexOf(time); // if there is an x value defined for this frame, use that\n\n      if (xIndex !== -1) {\n        const xValue = curves.x.values[xIndex];\n        values.push(xValue);\n        prevValue[0] = xValue;\n      } else {\n        // otherwise use the x value from the previous frame\n        values.push(prevValue[0]);\n      }\n      if (yIndex !== -1) {\n        const yValue = curves.y.values[yIndex];\n        values.push(yValue);\n        prevValue[1] = yValue;\n      } else {\n        values.push(prevValue[1]);\n      }\n      if (zIndex !== -1) {\n        const zValue = curves.z.values[zIndex];\n        values.push(zValue);\n        prevValue[2] = zValue;\n      } else {\n        values.push(prevValue[2]);\n      }\n    });\n    return values;\n  } // Rotations are defined as Euler angles which can have values  of any size\n  // These will be converted to quaternions which don't support values greater than\n  // PI, so we'll interpolate large rotations\n\n  interpolateRotations(curve) {\n    for (let i = 1; i < curve.values.length; i++) {\n      const initialValue = curve.values[i - 1];\n      const valuesSpan = curve.values[i] - initialValue;\n      const absoluteSpan = Math.abs(valuesSpan);\n      if (absoluteSpan >= 180) {\n        const numSubIntervals = absoluteSpan / 180;\n        const step = valuesSpan / numSubIntervals;\n        let nextValue = initialValue + step;\n        const initialTime = curve.times[i - 1];\n        const timeSpan = curve.times[i] - initialTime;\n        const interval = timeSpan / numSubIntervals;\n        let nextTime = initialTime + interval;\n        const interpolatedTimes = [];\n        const interpolatedValues = [];\n        while (nextTime < curve.times[i]) {\n          interpolatedTimes.push(nextTime);\n          nextTime += interval;\n          interpolatedValues.push(nextValue);\n          nextValue += step;\n        }\n        curve.times = inject(curve.times, i, interpolatedTimes);\n        curve.values = inject(curve.values, i, interpolatedValues);\n      }\n    }\n  }\n} // parse an FBX file in ASCII format\n\nclass TextParser {\n  getPrevNode() {\n    return this.nodeStack[this.currentIndent - 2];\n  }\n  getCurrentNode() {\n    return this.nodeStack[this.currentIndent - 1];\n  }\n  getCurrentProp() {\n    return this.currentProp;\n  }\n  pushStack(node) {\n    this.nodeStack.push(node);\n    this.currentIndent += 1;\n  }\n  popStack() {\n    this.nodeStack.pop();\n    this.currentIndent -= 1;\n  }\n  setCurrentProp(val, name) {\n    this.currentProp = val;\n    this.currentPropName = name;\n  }\n  parse(text) {\n    this.currentIndent = 0;\n    this.allNodes = new FBXTree();\n    this.nodeStack = [];\n    this.currentProp = [];\n    this.currentPropName = '';\n    const scope = this;\n    const split = text.split(/[\\r\\n]+/);\n    split.forEach(function (line, i) {\n      const matchComment = line.match(/^[\\s\\t]*;/);\n      const matchEmpty = line.match(/^[\\s\\t]*$/);\n      if (matchComment || matchEmpty) return;\n      const matchBeginning = line.match('^\\\\t{' + scope.currentIndent + '}(\\\\w+):(.*){', '');\n      const matchProperty = line.match('^\\\\t{' + scope.currentIndent + '}(\\\\w+):[\\\\s\\\\t\\\\r\\\\n](.*)');\n      const matchEnd = line.match('^\\\\t{' + (scope.currentIndent - 1) + '}}');\n      if (matchBeginning) {\n        scope.parseNodeBegin(line, matchBeginning);\n      } else if (matchProperty) {\n        scope.parseNodeProperty(line, matchProperty, split[++i]);\n      } else if (matchEnd) {\n        scope.popStack();\n      } else if (line.match(/^[^\\s\\t}]/)) {\n        // large arrays are split over multiple lines terminated with a ',' character\n        // if this is encountered the line needs to be joined to the previous line\n        scope.parseNodePropertyContinued(line);\n      }\n    });\n    return this.allNodes;\n  }\n  parseNodeBegin(line, property) {\n    const nodeName = property[1].trim().replace(/^\"/, '').replace(/\"$/, '');\n    const nodeAttrs = property[2].split(',').map(function (attr) {\n      return attr.trim().replace(/^\"/, '').replace(/\"$/, '');\n    });\n    const node = {\n      name: nodeName\n    };\n    const attrs = this.parseNodeAttr(nodeAttrs);\n    const currentNode = this.getCurrentNode(); // a top node\n\n    if (this.currentIndent === 0) {\n      this.allNodes.add(nodeName, node);\n    } else {\n      // a subnode\n      // if the subnode already exists, append it\n      if (nodeName in currentNode) {\n        // special case Pose needs PoseNodes as an array\n        if (nodeName === 'PoseNode') {\n          currentNode.PoseNode.push(node);\n        } else if (currentNode[nodeName].id !== undefined) {\n          currentNode[nodeName] = {};\n          currentNode[nodeName][currentNode[nodeName].id] = currentNode[nodeName];\n        }\n        if (attrs.id !== '') currentNode[nodeName][attrs.id] = node;\n      } else if (typeof attrs.id === 'number') {\n        currentNode[nodeName] = {};\n        currentNode[nodeName][attrs.id] = node;\n      } else if (nodeName !== 'Properties70') {\n        if (nodeName === 'PoseNode') currentNode[nodeName] = [node];else currentNode[nodeName] = node;\n      }\n    }\n    if (typeof attrs.id === 'number') node.id = attrs.id;\n    if (attrs.name !== '') node.attrName = attrs.name;\n    if (attrs.type !== '') node.attrType = attrs.type;\n    this.pushStack(node);\n  }\n  parseNodeAttr(attrs) {\n    let id = attrs[0];\n    if (attrs[0] !== '') {\n      id = parseInt(attrs[0]);\n      if (isNaN(id)) {\n        id = attrs[0];\n      }\n    }\n    let name = '',\n      type = '';\n    if (attrs.length > 1) {\n      name = attrs[1].replace(/^(\\w+)::/, '');\n      type = attrs[2];\n    }\n    return {\n      id: id,\n      name: name,\n      type: type\n    };\n  }\n  parseNodeProperty(line, property, contentLine) {\n    let propName = property[1].replace(/^\"/, '').replace(/\"$/, '').trim();\n    let propValue = property[2].replace(/^\"/, '').replace(/\"$/, '').trim(); // for special case: base64 image data follows \"Content: ,\" line\n    //\tContent: ,\n    //\t \"/9j/4RDaRXhpZgAATU0A...\"\n\n    if (propName === 'Content' && propValue === ',') {\n      propValue = contentLine.replace(/\"/g, '').replace(/,$/, '').trim();\n    }\n    const currentNode = this.getCurrentNode();\n    const parentName = currentNode.name;\n    if (parentName === 'Properties70') {\n      this.parseNodeSpecialProperty(line, propName, propValue);\n      return;\n    } // Connections\n\n    if (propName === 'C') {\n      const connProps = propValue.split(',').slice(1);\n      const from = parseInt(connProps[0]);\n      const to = parseInt(connProps[1]);\n      let rest = propValue.split(',').slice(3);\n      rest = rest.map(function (elem) {\n        return elem.trim().replace(/^\"/, '');\n      });\n      propName = 'connections';\n      propValue = [from, to];\n      append(propValue, rest);\n      if (currentNode[propName] === undefined) {\n        currentNode[propName] = [];\n      }\n    } // Node\n\n    if (propName === 'Node') currentNode.id = propValue; // connections\n\n    if (propName in currentNode && Array.isArray(currentNode[propName])) {\n      currentNode[propName].push(propValue);\n    } else {\n      if (propName !== 'a') currentNode[propName] = propValue;else currentNode.a = propValue;\n    }\n    this.setCurrentProp(currentNode, propName); // convert string to array, unless it ends in ',' in which case more will be added to it\n\n    if (propName === 'a' && propValue.slice(-1) !== ',') {\n      currentNode.a = parseNumberArray(propValue);\n    }\n  }\n  parseNodePropertyContinued(line) {\n    const currentNode = this.getCurrentNode();\n    currentNode.a += line; // if the line doesn't end in ',' we have reached the end of the property value\n    // so convert the string to an array\n\n    if (line.slice(-1) !== ',') {\n      currentNode.a = parseNumberArray(currentNode.a);\n    }\n  } // parse \"Property70\"\n\n  parseNodeSpecialProperty(line, propName, propValue) {\n    // split this\n    // P: \"Lcl Scaling\", \"Lcl Scaling\", \"\", \"A\",1,1,1\n    // into array like below\n    // [\"Lcl Scaling\", \"Lcl Scaling\", \"\", \"A\", \"1,1,1\" ]\n    const props = propValue.split('\",').map(function (prop) {\n      return prop.trim().replace(/^\\\"/, '').replace(/\\s/, '_');\n    });\n    const innerPropName = props[0];\n    const innerPropType1 = props[1];\n    const innerPropType2 = props[2];\n    const innerPropFlag = props[3];\n    let innerPropValue = props[4]; // cast values where needed, otherwise leave as strings\n\n    switch (innerPropType1) {\n      case 'int':\n      case 'enum':\n      case 'bool':\n      case 'ULongLong':\n      case 'double':\n      case 'Number':\n      case 'FieldOfView':\n        innerPropValue = parseFloat(innerPropValue);\n        break;\n      case 'Color':\n      case 'ColorRGB':\n      case 'Vector3D':\n      case 'Lcl_Translation':\n      case 'Lcl_Rotation':\n      case 'Lcl_Scaling':\n        innerPropValue = parseNumberArray(innerPropValue);\n        break;\n    } // CAUTION: these props must append to parent's parent\n\n    this.getPrevNode()[innerPropName] = {\n      type: innerPropType1,\n      type2: innerPropType2,\n      flag: innerPropFlag,\n      value: innerPropValue\n    };\n    this.setCurrentProp(this.getPrevNode(), innerPropName);\n  }\n} // Parse an FBX file in Binary format\n\nclass BinaryParser {\n  parse(buffer) {\n    const reader = new BinaryReader(buffer);\n    reader.skip(23); // skip magic 23 bytes\n\n    const version = reader.getUint32();\n    if (version < 6400) {\n      throw new Error('THREE.FBXLoader: FBX version not supported, FileVersion: ' + version);\n    }\n    const allNodes = new FBXTree();\n    while (!this.endOfContent(reader)) {\n      const node = this.parseNode(reader, version);\n      if (node !== null) allNodes.add(node.name, node);\n    }\n    return allNodes;\n  } // Check if reader has reached the end of content.\n\n  endOfContent(reader) {\n    // footer size: 160bytes + 16-byte alignment padding\n    // - 16bytes: magic\n    // - padding til 16-byte alignment (at least 1byte?)\n    //\t(seems like some exporters embed fixed 15 or 16bytes?)\n    // - 4bytes: magic\n    // - 4bytes: version\n    // - 120bytes: zero\n    // - 16bytes: magic\n    if (reader.size() % 16 === 0) {\n      return (reader.getOffset() + 160 + 16 & ~0xf) >= reader.size();\n    } else {\n      return reader.getOffset() + 160 + 16 >= reader.size();\n    }\n  } // recursively parse nodes until the end of the file is reached\n\n  parseNode(reader, version) {\n    const node = {}; // The first three data sizes depends on version.\n\n    const endOffset = version >= 7500 ? reader.getUint64() : reader.getUint32();\n    const numProperties = version >= 7500 ? reader.getUint64() : reader.getUint32();\n    version >= 7500 ? reader.getUint64() : reader.getUint32(); // the returned propertyListLen is not used\n\n    const nameLen = reader.getUint8();\n    const name = reader.getString(nameLen); // Regards this node as NULL-record if endOffset is zero\n\n    if (endOffset === 0) return null;\n    const propertyList = [];\n    for (let i = 0; i < numProperties; i++) {\n      propertyList.push(this.parseProperty(reader));\n    } // Regards the first three elements in propertyList as id, attrName, and attrType\n\n    const id = propertyList.length > 0 ? propertyList[0] : '';\n    const attrName = propertyList.length > 1 ? propertyList[1] : '';\n    const attrType = propertyList.length > 2 ? propertyList[2] : ''; // check if this node represents just a single property\n    // like (name, 0) set or (name2, [0, 1, 2]) set of {name: 0, name2: [0, 1, 2]}\n\n    node.singleProperty = numProperties === 1 && reader.getOffset() === endOffset ? true : false;\n    while (endOffset > reader.getOffset()) {\n      const subNode = this.parseNode(reader, version);\n      if (subNode !== null) this.parseSubNode(name, node, subNode);\n    }\n    node.propertyList = propertyList; // raw property list used by parent\n\n    if (typeof id === 'number') node.id = id;\n    if (attrName !== '') node.attrName = attrName;\n    if (attrType !== '') node.attrType = attrType;\n    if (name !== '') node.name = name;\n    return node;\n  }\n  parseSubNode(name, node, subNode) {\n    // special case: child node is single property\n    if (subNode.singleProperty === true) {\n      const value = subNode.propertyList[0];\n      if (Array.isArray(value)) {\n        node[subNode.name] = subNode;\n        subNode.a = value;\n      } else {\n        node[subNode.name] = value;\n      }\n    } else if (name === 'Connections' && subNode.name === 'C') {\n      const array = [];\n      subNode.propertyList.forEach(function (property, i) {\n        // first Connection is FBX type (OO, OP, etc.). We'll discard these\n        if (i !== 0) array.push(property);\n      });\n      if (node.connections === undefined) {\n        node.connections = [];\n      }\n      node.connections.push(array);\n    } else if (subNode.name === 'Properties70') {\n      const keys = Object.keys(subNode);\n      keys.forEach(function (key) {\n        node[key] = subNode[key];\n      });\n    } else if (name === 'Properties70' && subNode.name === 'P') {\n      let innerPropName = subNode.propertyList[0];\n      let innerPropType1 = subNode.propertyList[1];\n      const innerPropType2 = subNode.propertyList[2];\n      const innerPropFlag = subNode.propertyList[3];\n      let innerPropValue;\n      if (innerPropName.indexOf('Lcl ') === 0) innerPropName = innerPropName.replace('Lcl ', 'Lcl_');\n      if (innerPropType1.indexOf('Lcl ') === 0) innerPropType1 = innerPropType1.replace('Lcl ', 'Lcl_');\n      if (innerPropType1 === 'Color' || innerPropType1 === 'ColorRGB' || innerPropType1 === 'Vector' || innerPropType1 === 'Vector3D' || innerPropType1.indexOf('Lcl_') === 0) {\n        innerPropValue = [subNode.propertyList[4], subNode.propertyList[5], subNode.propertyList[6]];\n      } else {\n        innerPropValue = subNode.propertyList[4];\n      } // this will be copied to parent, see above\n\n      node[innerPropName] = {\n        type: innerPropType1,\n        type2: innerPropType2,\n        flag: innerPropFlag,\n        value: innerPropValue\n      };\n    } else if (node[subNode.name] === undefined) {\n      if (typeof subNode.id === 'number') {\n        node[subNode.name] = {};\n        node[subNode.name][subNode.id] = subNode;\n      } else {\n        node[subNode.name] = subNode;\n      }\n    } else {\n      if (subNode.name === 'PoseNode') {\n        if (!Array.isArray(node[subNode.name])) {\n          node[subNode.name] = [node[subNode.name]];\n        }\n        node[subNode.name].push(subNode);\n      } else if (node[subNode.name][subNode.id] === undefined) {\n        node[subNode.name][subNode.id] = subNode;\n      }\n    }\n  }\n  parseProperty(reader) {\n    const type = reader.getString(1);\n    let length;\n    switch (type) {\n      case 'C':\n        return reader.getBoolean();\n      case 'D':\n        return reader.getFloat64();\n      case 'F':\n        return reader.getFloat32();\n      case 'I':\n        return reader.getInt32();\n      case 'L':\n        return reader.getInt64();\n      case 'R':\n        length = reader.getUint32();\n        return reader.getArrayBuffer(length);\n      case 'S':\n        length = reader.getUint32();\n        return reader.getString(length);\n      case 'Y':\n        return reader.getInt16();\n      case 'b':\n      case 'c':\n      case 'd':\n      case 'f':\n      case 'i':\n      case 'l':\n        const arrayLength = reader.getUint32();\n        const encoding = reader.getUint32(); // 0: non-compressed, 1: compressed\n\n        const compressedLength = reader.getUint32();\n        if (encoding === 0) {\n          switch (type) {\n            case 'b':\n            case 'c':\n              return reader.getBooleanArray(arrayLength);\n            case 'd':\n              return reader.getFloat64Array(arrayLength);\n            case 'f':\n              return reader.getFloat32Array(arrayLength);\n            case 'i':\n              return reader.getInt32Array(arrayLength);\n            case 'l':\n              return reader.getInt64Array(arrayLength);\n          }\n        }\n        const data = unzlibSync(new Uint8Array(reader.getArrayBuffer(compressedLength))); // eslint-disable-line no-undef\n\n        const reader2 = new BinaryReader(data.buffer);\n        switch (type) {\n          case 'b':\n          case 'c':\n            return reader2.getBooleanArray(arrayLength);\n          case 'd':\n            return reader2.getFloat64Array(arrayLength);\n          case 'f':\n            return reader2.getFloat32Array(arrayLength);\n          case 'i':\n            return reader2.getInt32Array(arrayLength);\n          case 'l':\n            return reader2.getInt64Array(arrayLength);\n        }\n      default:\n        throw new Error('THREE.FBXLoader: Unknown property type ' + type);\n    }\n  }\n}\nclass BinaryReader {\n  constructor(buffer, littleEndian) {\n    this.dv = new DataView(buffer);\n    this.offset = 0;\n    this.littleEndian = littleEndian !== undefined ? littleEndian : true;\n  }\n  getOffset() {\n    return this.offset;\n  }\n  size() {\n    return this.dv.buffer.byteLength;\n  }\n  skip(length) {\n    this.offset += length;\n  } // seems like true/false representation depends on exporter.\n  // true: 1 or 'Y'(=0x59), false: 0 or 'T'(=0x54)\n  // then sees LSB.\n\n  getBoolean() {\n    return (this.getUint8() & 1) === 1;\n  }\n  getBooleanArray(size) {\n    const a = [];\n    for (let i = 0; i < size; i++) {\n      a.push(this.getBoolean());\n    }\n    return a;\n  }\n  getUint8() {\n    const value = this.dv.getUint8(this.offset);\n    this.offset += 1;\n    return value;\n  }\n  getInt16() {\n    const value = this.dv.getInt16(this.offset, this.littleEndian);\n    this.offset += 2;\n    return value;\n  }\n  getInt32() {\n    const value = this.dv.getInt32(this.offset, this.littleEndian);\n    this.offset += 4;\n    return value;\n  }\n  getInt32Array(size) {\n    const a = [];\n    for (let i = 0; i < size; i++) {\n      a.push(this.getInt32());\n    }\n    return a;\n  }\n  getUint32() {\n    const value = this.dv.getUint32(this.offset, this.littleEndian);\n    this.offset += 4;\n    return value;\n  } // JavaScript doesn't support 64-bit integer so calculate this here\n  // 1 << 32 will return 1 so using multiply operation instead here.\n  // There's a possibility that this method returns wrong value if the value\n  // is out of the range between Number.MAX_SAFE_INTEGER and Number.MIN_SAFE_INTEGER.\n  // TODO: safely handle 64-bit integer\n\n  getInt64() {\n    let low, high;\n    if (this.littleEndian) {\n      low = this.getUint32();\n      high = this.getUint32();\n    } else {\n      high = this.getUint32();\n      low = this.getUint32();\n    } // calculate negative value\n\n    if (high & 0x80000000) {\n      high = ~high & 0xffffffff;\n      low = ~low & 0xffffffff;\n      if (low === 0xffffffff) high = high + 1 & 0xffffffff;\n      low = low + 1 & 0xffffffff;\n      return -(high * 0x100000000 + low);\n    }\n    return high * 0x100000000 + low;\n  }\n  getInt64Array(size) {\n    const a = [];\n    for (let i = 0; i < size; i++) {\n      a.push(this.getInt64());\n    }\n    return a;\n  } // Note: see getInt64() comment\n\n  getUint64() {\n    let low, high;\n    if (this.littleEndian) {\n      low = this.getUint32();\n      high = this.getUint32();\n    } else {\n      high = this.getUint32();\n      low = this.getUint32();\n    }\n    return high * 0x100000000 + low;\n  }\n  getFloat32() {\n    const value = this.dv.getFloat32(this.offset, this.littleEndian);\n    this.offset += 4;\n    return value;\n  }\n  getFloat32Array(size) {\n    const a = [];\n    for (let i = 0; i < size; i++) {\n      a.push(this.getFloat32());\n    }\n    return a;\n  }\n  getFloat64() {\n    const value = this.dv.getFloat64(this.offset, this.littleEndian);\n    this.offset += 8;\n    return value;\n  }\n  getFloat64Array(size) {\n    const a = [];\n    for (let i = 0; i < size; i++) {\n      a.push(this.getFloat64());\n    }\n    return a;\n  }\n  getArrayBuffer(size) {\n    const value = this.dv.buffer.slice(this.offset, this.offset + size);\n    this.offset += size;\n    return value;\n  }\n  getString(size) {\n    // note: safari 9 doesn't support Uint8Array.indexOf; create intermediate array instead\n    let a = [];\n    for (let i = 0; i < size; i++) {\n      a[i] = this.getUint8();\n    }\n    const nullByte = a.indexOf(0);\n    if (nullByte >= 0) a = a.slice(0, nullByte);\n    return LoaderUtils.decodeText(new Uint8Array(a));\n  }\n} // FBXTree holds a representation of the FBX data, returned by the TextParser ( FBX ASCII format)\n// and BinaryParser( FBX Binary format)\n\nclass FBXTree {\n  add(key, val) {\n    this[key] = val;\n  }\n} // ************** UTILITY FUNCTIONS **************\n\nfunction isFbxFormatBinary(buffer) {\n  const CORRECT = 'Kaydara\\u0020FBX\\u0020Binary\\u0020\\u0020\\0';\n  return buffer.byteLength >= CORRECT.length && CORRECT === convertArrayBufferToString(buffer, 0, CORRECT.length);\n}\nfunction isFbxFormatASCII(text) {\n  const CORRECT = ['K', 'a', 'y', 'd', 'a', 'r', 'a', '\\\\', 'F', 'B', 'X', '\\\\', 'B', 'i', 'n', 'a', 'r', 'y', '\\\\', '\\\\'];\n  let cursor = 0;\n  function read(offset) {\n    const result = text[offset - 1];\n    text = text.slice(cursor + offset);\n    cursor++;\n    return result;\n  }\n  for (let i = 0; i < CORRECT.length; ++i) {\n    const num = read(1);\n    if (num === CORRECT[i]) {\n      return false;\n    }\n  }\n  return true;\n}\nfunction getFbxVersion(text) {\n  const versionRegExp = /FBXVersion: (\\d+)/;\n  const match = text.match(versionRegExp);\n  if (match) {\n    const version = parseInt(match[1]);\n    return version;\n  }\n  throw new Error('THREE.FBXLoader: Cannot find the version number for the file given.');\n} // Converts FBX ticks into real time seconds.\n\nfunction convertFBXTimeToSeconds(time) {\n  return time / 46186158000;\n}\nconst dataArray = []; // extracts the data from the correct position in the FBX array based on indexing type\n\nfunction getData(polygonVertexIndex, polygonIndex, vertexIndex, infoObject) {\n  let index;\n  switch (infoObject.mappingType) {\n    case 'ByPolygonVertex':\n      index = polygonVertexIndex;\n      break;\n    case 'ByPolygon':\n      index = polygonIndex;\n      break;\n    case 'ByVertice':\n      index = vertexIndex;\n      break;\n    case 'AllSame':\n      index = infoObject.indices[0];\n      break;\n    default:\n      console.warn('THREE.FBXLoader: unknown attribute mapping type ' + infoObject.mappingType);\n  }\n  if (infoObject.referenceType === 'IndexToDirect') index = infoObject.indices[index];\n  const from = index * infoObject.dataSize;\n  const to = from + infoObject.dataSize;\n  return slice(dataArray, infoObject.buffer, from, to);\n}\nconst tempEuler = new Euler();\nconst tempVec = new Vector3(); // generate transformation from FBX transform data\n// ref: https://help.autodesk.com/view/FBX/2017/ENU/?guid=__files_GUID_10CDD63C_79C1_4F2D_BB28_AD2BE65A02ED_htm\n// ref: http://docs.autodesk.com/FBX/2014/ENU/FBX-SDK-Documentation/index.html?url=cpp_ref/_transformations_2main_8cxx-example.html,topicNumber=cpp_ref__transformations_2main_8cxx_example_htmlfc10a1e1-b18d-4e72-9dc0-70d0f1959f5e\n\nfunction generateTransform(transformData) {\n  const lTranslationM = new Matrix4();\n  const lPreRotationM = new Matrix4();\n  const lRotationM = new Matrix4();\n  const lPostRotationM = new Matrix4();\n  const lScalingM = new Matrix4();\n  const lScalingPivotM = new Matrix4();\n  const lScalingOffsetM = new Matrix4();\n  const lRotationOffsetM = new Matrix4();\n  const lRotationPivotM = new Matrix4();\n  const lParentGX = new Matrix4();\n  const lParentLX = new Matrix4();\n  const lGlobalT = new Matrix4();\n  const inheritType = transformData.inheritType ? transformData.inheritType : 0;\n  if (transformData.translation) lTranslationM.setPosition(tempVec.fromArray(transformData.translation));\n  if (transformData.preRotation) {\n    const array = transformData.preRotation.map(MathUtils.degToRad);\n    array.push(transformData.eulerOrder);\n    lPreRotationM.makeRotationFromEuler(tempEuler.fromArray(array));\n  }\n  if (transformData.rotation) {\n    const array = transformData.rotation.map(MathUtils.degToRad);\n    array.push(transformData.eulerOrder);\n    lRotationM.makeRotationFromEuler(tempEuler.fromArray(array));\n  }\n  if (transformData.postRotation) {\n    const array = transformData.postRotation.map(MathUtils.degToRad);\n    array.push(transformData.eulerOrder);\n    lPostRotationM.makeRotationFromEuler(tempEuler.fromArray(array));\n    lPostRotationM.invert();\n  }\n  if (transformData.scale) lScalingM.scale(tempVec.fromArray(transformData.scale)); // Pivots and offsets\n\n  if (transformData.scalingOffset) lScalingOffsetM.setPosition(tempVec.fromArray(transformData.scalingOffset));\n  if (transformData.scalingPivot) lScalingPivotM.setPosition(tempVec.fromArray(transformData.scalingPivot));\n  if (transformData.rotationOffset) lRotationOffsetM.setPosition(tempVec.fromArray(transformData.rotationOffset));\n  if (transformData.rotationPivot) lRotationPivotM.setPosition(tempVec.fromArray(transformData.rotationPivot)); // parent transform\n\n  if (transformData.parentMatrixWorld) {\n    lParentLX.copy(transformData.parentMatrix);\n    lParentGX.copy(transformData.parentMatrixWorld);\n  }\n  const lLRM = new Matrix4().copy(lPreRotationM).multiply(lRotationM).multiply(lPostRotationM); // Global Rotation\n\n  const lParentGRM = new Matrix4();\n  lParentGRM.extractRotation(lParentGX); // Global Shear*Scaling\n\n  const lParentTM = new Matrix4();\n  lParentTM.copyPosition(lParentGX);\n  const lParentGSM = new Matrix4();\n  const lParentGRSM = new Matrix4().copy(lParentTM).invert().multiply(lParentGX);\n  lParentGSM.copy(lParentGRM).invert().multiply(lParentGRSM);\n  const lLSM = lScalingM;\n  const lGlobalRS = new Matrix4();\n  if (inheritType === 0) {\n    lGlobalRS.copy(lParentGRM).multiply(lLRM).multiply(lParentGSM).multiply(lLSM);\n  } else if (inheritType === 1) {\n    lGlobalRS.copy(lParentGRM).multiply(lParentGSM).multiply(lLRM).multiply(lLSM);\n  } else {\n    const lParentLSM = new Matrix4().scale(new Vector3().setFromMatrixScale(lParentLX));\n    const lParentLSM_inv = new Matrix4().copy(lParentLSM).invert();\n    const lParentGSM_noLocal = new Matrix4().copy(lParentGSM).multiply(lParentLSM_inv);\n    lGlobalRS.copy(lParentGRM).multiply(lLRM).multiply(lParentGSM_noLocal).multiply(lLSM);\n  }\n  const lRotationPivotM_inv = new Matrix4();\n  lRotationPivotM_inv.copy(lRotationPivotM).invert();\n  const lScalingPivotM_inv = new Matrix4();\n  lScalingPivotM_inv.copy(lScalingPivotM).invert(); // Calculate the local transform matrix\n\n  let lTransform = new Matrix4();\n  lTransform.copy(lTranslationM).multiply(lRotationOffsetM).multiply(lRotationPivotM).multiply(lPreRotationM).multiply(lRotationM).multiply(lPostRotationM).multiply(lRotationPivotM_inv).multiply(lScalingOffsetM).multiply(lScalingPivotM).multiply(lScalingM).multiply(lScalingPivotM_inv);\n  const lLocalTWithAllPivotAndOffsetInfo = new Matrix4().copyPosition(lTransform);\n  const lGlobalTranslation = new Matrix4().copy(lParentGX).multiply(lLocalTWithAllPivotAndOffsetInfo);\n  lGlobalT.copyPosition(lGlobalTranslation);\n  lTransform = new Matrix4().copy(lGlobalT).multiply(lGlobalRS); // from global to local\n\n  lTransform.premultiply(lParentGX.invert());\n  return lTransform;\n} // Returns the three.js intrinsic Euler order corresponding to FBX extrinsic Euler order\n// ref: http://help.autodesk.com/view/FBX/2017/ENU/?guid=__cpp_ref_class_fbx_euler_html\n\nfunction getEulerOrder(order) {\n  order = order || 0;\n  const enums = ['ZYX',\n  // -> XYZ extrinsic\n  'YZX',\n  // -> XZY extrinsic\n  'XZY',\n  // -> YZX extrinsic\n  'ZXY',\n  // -> YXZ extrinsic\n  'YXZ',\n  // -> ZXY extrinsic\n  'XYZ' // -> ZYX extrinsic\n  //'SphericXYZ', // not possible to support\n  ];\n\n  if (order === 6) {\n    console.warn('THREE.FBXLoader: unsupported Euler Order: Spherical XYZ. Animations and rotations may be incorrect.');\n    return enums[0];\n  }\n  return enums[order];\n} // Parses comma separated list of numbers and returns them an array.\n// Used internally by the TextParser\n\nfunction parseNumberArray(value) {\n  const array = value.split(',').map(function (val) {\n    return parseFloat(val);\n  });\n  return array;\n}\nfunction convertArrayBufferToString(buffer, from, to) {\n  if (from === undefined) from = 0;\n  if (to === undefined) to = buffer.byteLength;\n  return LoaderUtils.decodeText(new Uint8Array(buffer, from, to));\n}\nfunction append(a, b) {\n  for (let i = 0, j = a.length, l = b.length; i < l; i++, j++) {\n    a[j] = b[i];\n  }\n}\nfunction slice(a, b, from, to) {\n  for (let i = from, j = 0; i < to; i++, j++) {\n    a[j] = b[i];\n  }\n  return a;\n} // inject array a2 into array a1 at index\n\nfunction inject(a1, index, a2) {\n  return a1.slice(0, index).concat(a2).concat(a1.slice(index));\n}\nexport { FBXLoader };","map":{"version":3,"names":["Loader","LoaderUtils","FileLoader","TextureLoader","RepeatWrapping","ClampToEdgeWrapping","Texture","MeshPhongMaterial","MeshLambertMaterial","Color","sRGBEncoding","EquirectangularReflectionMapping","Matrix4","Group","Bone","PropertyBinding","Object3D","OrthographicCamera","PerspectiveCamera","PointLight","MathUtils","SpotLight","DirectionalLight","SkinnedMesh","Mesh","LineBasicMaterial","Line","Vector3","Skeleton","AmbientLight","BufferGeometry","Float32BufferAttribute","Uint16BufferAttribute","Matrix3","Vector4","BufferAttribute","AnimationClip","Quaternion","Euler","VectorKeyframeTrack","QuaternionKeyframeTrack","NumberKeyframeTrack","unzlibSync","NURBSCurve","fbxTree","connections","sceneGraph","FBXLoader","constructor","manager","load","url","onLoad","onProgress","onError","scope","path","extractUrlBase","loader","setPath","setResponseType","setRequestHeader","requestHeader","setWithCredentials","withCredentials","buffer","parse","e","console","error","itemError","FBXBuffer","isFbxFormatBinary","BinaryParser","FBXText","convertArrayBufferToString","isFbxFormatASCII","Error","getFbxVersion","TextParser","textureLoader","resourcePath","setCrossOrigin","crossOrigin","FBXTreeParser","parseConnections","images","parseImages","textures","parseTextures","materials","parseMaterials","deformers","parseDeformers","geometryMap","GeometryParser","parseScene","connectionMap","Map","rawConnections","Connections","forEach","rawConnection","fromID","toID","relationship","has","set","parents","children","parentRelationship","ID","get","push","childRelationship","blobs","Objects","videoNodes","Video","nodeID","videoNode","id","parseInt","RelativeFilename","Filename","arrayBufferContent","Content","ArrayBuffer","byteLength","base64Content","image","parseImage","filename","undefined","split","pop","content","fileName","extension","slice","lastIndexOf","toLowerCase","type","getHandler","warn","array","Uint8Array","window","URL","createObjectURL","Blob","textureMap","textureNodes","texture","parseTexture","textureNode","loadTexture","name","attrName","wrapModeU","WrapModeU","wrapModeV","WrapModeV","valueU","value","valueV","wrapS","wrapT","values","Scaling","repeat","x","y","currentPath","length","indexOf","FileName","materialMap","materialNodes","Material","material","parseMaterial","materialNode","ShadingModel","parameters","parseParameters","setValues","BumpFactor","bumpScale","Diffuse","color","fromArray","DiffuseColor","DisplacementFactor","displacementScale","Emissive","emissive","EmissiveColor","EmissiveFactor","emissiveIntensity","parseFloat","Opacity","opacity","transparent","ReflectionFactor","reflectivity","Shininess","shininess","Specular","specular","SpecularColor","child","bumpMap","getTexture","aoMap","map","encoding","displacementMap","emissiveMap","normalMap","envMap","mapping","specularMap","alphaMap","LayeredTexture","skeletons","morphTargets","DeformerNodes","Deformer","deformerNode","relationships","attrType","skeleton","parseSkeleton","geometryID","morphTarget","rawTargets","parseMorphTargets","deformerNodes","rawBones","boneNode","rawBone","indices","weights","transformLink","TransformLink","a","Indexes","Weights","bones","rawMorphTargets","i","morphTargetNode","rawMorphTarget","initialWeight","DeformPercent","fullWeights","FullWeights","geoID","filter","modelMap","parseModels","modelNodes","Model","model","modelNode","setLookAtProperties","parentConnections","connection","parent","add","bindSkeleton","createAmbientLight","setupMorphMaterials","traverse","node","userData","transformData","parentMatrix","matrix","parentMatrixWorld","matrixWorld","transform","generateTransform","applyMatrix4","updateWorldMatrix","animations","AnimationParser","isGroup","buildSkeleton","createCamera","createLight","createMesh","createCurve","sanitizeNodeName","getTransformData","bone","subBone","copy","cameraAttribute","attr","NodeAttribute","CameraProjectionType","nearClippingPlane","NearPlane","farClippingPlane","FarPlane","width","innerWidth","height","innerHeight","AspectWidth","AspectHeight","aspect","fov","FieldOfView","focalLength","FocalLength","setFocalLength","lightAttribute","LightType","intensity","Intensity","CastLightOnObject","distance","FarAttenuationEnd","EnableFarAttenuation","decay","angle","Math","PI","InnerAngle","degToRad","penumbra","OuterAngle","max","CastShadows","castShadow","geometry","attributes","vertexColors","FBX_Deformer","skinning","normalizeSkinWeights","reduce","geo","linewidth","inheritType","InheritType","eulerOrder","getEulerOrder","RotationOrder","translation","Lcl_Translation","preRotation","PreRotation","rotation","Lcl_Rotation","postRotation","PostRotation","scale","Lcl_Scaling","scalingOffset","ScalingOffset","scalingPivot","ScalingPivot","rotationOffset","RotationOffset","rotationPivot","RotationPivot","lookAtTarget","pos","target","position","lookAt","bindMatrices","parsePoseNodes","geoRelationships","geoConnParent","bind","BindPoseNode","Pose","poseNodes","PoseNode","Array","isArray","poseNode","Node","Matrix","GlobalSettings","ambientColor","AmbientColor","r","g","b","isMesh","morphAttributes","setupMorphMaterial","index","uuid","matUuid","sharedMat","mat","clonedMat","clone","geoNodes","Geometry","parseGeometry","geoNode","parseMeshGeometry","parseNurbsGeometry","GeometricTranslation","GeometricRotation","GeometricScaling","genGeometry","preTransform","geoInfo","parseGeoNode","buffers","genBuffers","positionAttribute","vertex","setAttribute","colors","weightsIndices","vertexWeights","normal","normalMatrix","getNormalMatrix","normalAttribute","applyNormalMatrix","uvs","uvBuffer","toString","mappingType","prevMaterialIndex","materialIndex","startIndex","currentIndex","addGroup","groups","lastGroup","lastIndex","start","count","addMorphTargets","vertexPositions","Vertices","vertexIndices","PolygonVertexIndex","LayerElementColor","parseVertexColors","LayerElementMaterial","parseMaterialIndices","LayerElementNormal","parseNormals","LayerElementUV","uv","UV","parseUVs","weightTable","j","weight","polygonIndex","faceLength","displayedWeightsWarning","facePositionIndexes","faceNormals","faceColors","faceUVs","faceWeights","faceWeightIndices","vertexIndex","polygonVertexIndex","endOfFace","weightIndices","data","getData","wt","wIndex","Weight","weightIndex","currentWeight","comparedWeight","comparedWeightIndex","comparedWeightArray","tmp","genFace","parentGeo","parentGeoNode","morphTargetsRelative","rawTarget","morphGeoNode","genMorphGeometry","morphPositionsSparse","morphPositions","Float32Array","morphIndex","morphGeoInfo","morphBuffers","NormalNode","MappingInformationType","referenceType","ReferenceInformationType","Normals","indexBuffer","NormalIndex","NormalsIndex","dataSize","UVNode","UVIndex","ColorNode","Colors","ColorIndex","MaterialNode","materialIndexBuffer","Materials","materialIndices","order","Order","isNaN","degree","knots","KnotVector","controlPoints","pointsValues","Points","l","startKnot","endKnot","Form","curve","vertices","getPoints","positions","toArray","animationClips","rawClips","parseClips","key","rawClip","clip","addClip","AnimationCurve","curveNodesMap","parseAnimationCurveNodes","parseAnimationCurves","layersMap","parseAnimationLayers","parseAnimStacks","rawCurveNodes","AnimationCurveNode","rawCurveNode","match","curveNode","curves","rawCurves","animationCurve","times","KeyTime","convertFBXTimeToSeconds","KeyValueFloat","animationCurveID","animationCurveRelationship","rawLayers","AnimationLayer","layerCurveNodes","z","modelID","rawModel","modelName","initialPosition","initialRotation","initialScale","morph","deformerID","morpherID","morphName","rawStacks","AnimationStack","layer","tracks","rawTracks","concat","generateTracks","decompose","setFromQuaternion","T","Object","keys","positionTrack","generateVectorTrack","R","rotationTrack","generateRotationTrack","S","scaleTrack","morphTrack","generateMorphTrack","initialValue","getTimesForAllAxes","getKeyframeTrackValues","interpolateRotations","setFromEuler","invert","quaternion","euler","quaternionValues","premultiply","multiply","val","morphNum","getObjectByName","morphTargetDictionary","sort","targetIndex","lastValue","currentValue","prevValue","xIndex","yIndex","zIndex","time","xValue","yValue","zValue","valuesSpan","absoluteSpan","abs","numSubIntervals","step","nextValue","initialTime","timeSpan","interval","nextTime","interpolatedTimes","interpolatedValues","inject","getPrevNode","nodeStack","currentIndent","getCurrentNode","getCurrentProp","currentProp","pushStack","popStack","setCurrentProp","currentPropName","text","allNodes","FBXTree","line","matchComment","matchEmpty","matchBeginning","matchProperty","matchEnd","parseNodeBegin","parseNodeProperty","parseNodePropertyContinued","property","nodeName","trim","replace","nodeAttrs","attrs","parseNodeAttr","currentNode","contentLine","propName","propValue","parentName","parseNodeSpecialProperty","connProps","from","to","rest","elem","append","parseNumberArray","props","prop","innerPropName","innerPropType1","innerPropType2","innerPropFlag","innerPropValue","type2","flag","reader","BinaryReader","skip","version","getUint32","endOfContent","parseNode","size","getOffset","endOffset","getUint64","numProperties","nameLen","getUint8","getString","propertyList","parseProperty","singleProperty","subNode","parseSubNode","getBoolean","getFloat64","getFloat32","getInt32","getInt64","getArrayBuffer","getInt16","arrayLength","compressedLength","getBooleanArray","getFloat64Array","getFloat32Array","getInt32Array","getInt64Array","reader2","littleEndian","dv","DataView","offset","low","high","nullByte","decodeText","CORRECT","cursor","read","result","num","versionRegExp","dataArray","infoObject","tempEuler","tempVec","lTranslationM","lPreRotationM","lRotationM","lPostRotationM","lScalingM","lScalingPivotM","lScalingOffsetM","lRotationOffsetM","lRotationPivotM","lParentGX","lParentLX","lGlobalT","setPosition","makeRotationFromEuler","lLRM","lParentGRM","extractRotation","lParentTM","copyPosition","lParentGSM","lParentGRSM","lLSM","lGlobalRS","lParentLSM","setFromMatrixScale","lParentLSM_inv","lParentGSM_noLocal","lRotationPivotM_inv","lScalingPivotM_inv","lTransform","lLocalTWithAllPivotAndOffsetInfo","lGlobalTranslation","enums","a1","a2"],"sources":["C:/Users/Work/node_modules/three-stdlib/loaders/FBXLoader.js"],"sourcesContent":["import { Loader, LoaderUtils, FileLoader, TextureLoader, RepeatWrapping, ClampToEdgeWrapping, Texture, MeshPhongMaterial, MeshLambertMaterial, Color, sRGBEncoding, EquirectangularReflectionMapping, Matrix4, Group, Bone, PropertyBinding, Object3D, OrthographicCamera, PerspectiveCamera, PointLight, MathUtils, SpotLight, DirectionalLight, SkinnedMesh, Mesh, LineBasicMaterial, Line, Vector3, Skeleton, AmbientLight, BufferGeometry, Float32BufferAttribute, Uint16BufferAttribute, Matrix3, Vector4, BufferAttribute, AnimationClip, Quaternion, Euler, VectorKeyframeTrack, QuaternionKeyframeTrack, NumberKeyframeTrack } from 'three';\nimport { unzlibSync } from 'fflate';\nimport { NURBSCurve } from '../curves/NURBSCurve.js';\n\n/**\n * Loader loads FBX file and generates Group representing FBX scene.\n * Requires FBX file to be >= 7.0 and in ASCII or >= 6400 in Binary format\n * Versions lower than this may load but will probably have errors\n *\n * Needs Support:\n *  Morph normals / blend shape normals\n *\n * FBX format references:\n * \thttps://wiki.blender.org/index.php/User:Mont29/Foundation/FBX_File_Structure\n * \thttp://help.autodesk.com/view/FBX/2017/ENU/?guid=__cpp_ref_index_html (C++ SDK reference)\n *\n * \tBinary format specification:\n *\t\thttps://code.blender.org/2013/08/fbx-binary-file-format-specification/\n */\n\nlet fbxTree;\nlet connections;\nlet sceneGraph;\n\nclass FBXLoader extends Loader {\n  constructor(manager) {\n    super(manager);\n  }\n\n  load(url, onLoad, onProgress, onError) {\n    const scope = this;\n    const path = scope.path === '' ? LoaderUtils.extractUrlBase(url) : scope.path;\n    const loader = new FileLoader(this.manager);\n    loader.setPath(scope.path);\n    loader.setResponseType('arraybuffer');\n    loader.setRequestHeader(scope.requestHeader);\n    loader.setWithCredentials(scope.withCredentials);\n    loader.load(url, function (buffer) {\n      try {\n        onLoad(scope.parse(buffer, path));\n      } catch (e) {\n        if (onError) {\n          onError(e);\n        } else {\n          console.error(e);\n        }\n\n        scope.manager.itemError(url);\n      }\n    }, onProgress, onError);\n  }\n\n  parse(FBXBuffer, path) {\n    if (isFbxFormatBinary(FBXBuffer)) {\n      fbxTree = new BinaryParser().parse(FBXBuffer);\n    } else {\n      const FBXText = convertArrayBufferToString(FBXBuffer);\n\n      if (!isFbxFormatASCII(FBXText)) {\n        throw new Error('THREE.FBXLoader: Unknown format.');\n      }\n\n      if (getFbxVersion(FBXText) < 7000) {\n        throw new Error('THREE.FBXLoader: FBX version not supported, FileVersion: ' + getFbxVersion(FBXText));\n      }\n\n      fbxTree = new TextParser().parse(FBXText);\n    } // console.log( fbxTree );\n\n\n    const textureLoader = new TextureLoader(this.manager).setPath(this.resourcePath || path).setCrossOrigin(this.crossOrigin);\n    return new FBXTreeParser(textureLoader, this.manager).parse(fbxTree);\n  }\n\n} // Parse the FBXTree object returned by the BinaryParser or TextParser and return a Group\n\n\nclass FBXTreeParser {\n  constructor(textureLoader, manager) {\n    this.textureLoader = textureLoader;\n    this.manager = manager;\n  }\n\n  parse() {\n    connections = this.parseConnections();\n    const images = this.parseImages();\n    const textures = this.parseTextures(images);\n    const materials = this.parseMaterials(textures);\n    const deformers = this.parseDeformers();\n    const geometryMap = new GeometryParser().parse(deformers);\n    this.parseScene(deformers, geometryMap, materials);\n    return sceneGraph;\n  } // Parses FBXTree.Connections which holds parent-child connections between objects (e.g. material -> texture, model->geometry )\n  // and details the connection type\n\n\n  parseConnections() {\n    const connectionMap = new Map();\n\n    if ('Connections' in fbxTree) {\n      const rawConnections = fbxTree.Connections.connections;\n      rawConnections.forEach(function (rawConnection) {\n        const fromID = rawConnection[0];\n        const toID = rawConnection[1];\n        const relationship = rawConnection[2];\n\n        if (!connectionMap.has(fromID)) {\n          connectionMap.set(fromID, {\n            parents: [],\n            children: []\n          });\n        }\n\n        const parentRelationship = {\n          ID: toID,\n          relationship: relationship\n        };\n        connectionMap.get(fromID).parents.push(parentRelationship);\n\n        if (!connectionMap.has(toID)) {\n          connectionMap.set(toID, {\n            parents: [],\n            children: []\n          });\n        }\n\n        const childRelationship = {\n          ID: fromID,\n          relationship: relationship\n        };\n        connectionMap.get(toID).children.push(childRelationship);\n      });\n    }\n\n    return connectionMap;\n  } // Parse FBXTree.Objects.Video for embedded image data\n  // These images are connected to textures in FBXTree.Objects.Textures\n  // via FBXTree.Connections.\n\n\n  parseImages() {\n    const images = {};\n    const blobs = {};\n\n    if ('Video' in fbxTree.Objects) {\n      const videoNodes = fbxTree.Objects.Video;\n\n      for (const nodeID in videoNodes) {\n        const videoNode = videoNodes[nodeID];\n        const id = parseInt(nodeID);\n        images[id] = videoNode.RelativeFilename || videoNode.Filename; // raw image data is in videoNode.Content\n\n        if ('Content' in videoNode) {\n          const arrayBufferContent = videoNode.Content instanceof ArrayBuffer && videoNode.Content.byteLength > 0;\n          const base64Content = typeof videoNode.Content === 'string' && videoNode.Content !== '';\n\n          if (arrayBufferContent || base64Content) {\n            const image = this.parseImage(videoNodes[nodeID]);\n            blobs[videoNode.RelativeFilename || videoNode.Filename] = image;\n          }\n        }\n      }\n    }\n\n    for (const id in images) {\n      const filename = images[id];\n      if (blobs[filename] !== undefined) images[id] = blobs[filename];else images[id] = images[id].split('\\\\').pop();\n    }\n\n    return images;\n  } // Parse embedded image data in FBXTree.Video.Content\n\n\n  parseImage(videoNode) {\n    const content = videoNode.Content;\n    const fileName = videoNode.RelativeFilename || videoNode.Filename;\n    const extension = fileName.slice(fileName.lastIndexOf('.') + 1).toLowerCase();\n    let type;\n\n    switch (extension) {\n      case 'bmp':\n        type = 'image/bmp';\n        break;\n\n      case 'jpg':\n      case 'jpeg':\n        type = 'image/jpeg';\n        break;\n\n      case 'png':\n        type = 'image/png';\n        break;\n\n      case 'tif':\n        type = 'image/tiff';\n        break;\n\n      case 'tga':\n        if (this.manager.getHandler('.tga') === null) {\n          console.warn('FBXLoader: TGA loader not found, skipping ', fileName);\n        }\n\n        type = 'image/tga';\n        break;\n\n      default:\n        console.warn('FBXLoader: Image type \"' + extension + '\" is not supported.');\n        return;\n    }\n\n    if (typeof content === 'string') {\n      // ASCII format\n      return 'data:' + type + ';base64,' + content;\n    } else {\n      // Binary Format\n      const array = new Uint8Array(content);\n      return window.URL.createObjectURL(new Blob([array], {\n        type: type\n      }));\n    }\n  } // Parse nodes in FBXTree.Objects.Texture\n  // These contain details such as UV scaling, cropping, rotation etc and are connected\n  // to images in FBXTree.Objects.Video\n\n\n  parseTextures(images) {\n    const textureMap = new Map();\n\n    if ('Texture' in fbxTree.Objects) {\n      const textureNodes = fbxTree.Objects.Texture;\n\n      for (const nodeID in textureNodes) {\n        const texture = this.parseTexture(textureNodes[nodeID], images);\n        textureMap.set(parseInt(nodeID), texture);\n      }\n    }\n\n    return textureMap;\n  } // Parse individual node in FBXTree.Objects.Texture\n\n\n  parseTexture(textureNode, images) {\n    const texture = this.loadTexture(textureNode, images);\n    texture.ID = textureNode.id;\n    texture.name = textureNode.attrName;\n    const wrapModeU = textureNode.WrapModeU;\n    const wrapModeV = textureNode.WrapModeV;\n    const valueU = wrapModeU !== undefined ? wrapModeU.value : 0;\n    const valueV = wrapModeV !== undefined ? wrapModeV.value : 0; // http://download.autodesk.com/us/fbx/SDKdocs/FBX_SDK_Help/files/fbxsdkref/class_k_fbx_texture.html#889640e63e2e681259ea81061b85143a\n    // 0: repeat(default), 1: clamp\n\n    texture.wrapS = valueU === 0 ? RepeatWrapping : ClampToEdgeWrapping;\n    texture.wrapT = valueV === 0 ? RepeatWrapping : ClampToEdgeWrapping;\n\n    if ('Scaling' in textureNode) {\n      const values = textureNode.Scaling.value;\n      texture.repeat.x = values[0];\n      texture.repeat.y = values[1];\n    }\n\n    return texture;\n  } // load a texture specified as a blob or data URI, or via an external URL using TextureLoader\n\n\n  loadTexture(textureNode, images) {\n    let fileName;\n    const currentPath = this.textureLoader.path;\n    const children = connections.get(textureNode.id).children;\n\n    if (children !== undefined && children.length > 0 && images[children[0].ID] !== undefined) {\n      fileName = images[children[0].ID];\n\n      if (fileName.indexOf('blob:') === 0 || fileName.indexOf('data:') === 0) {\n        this.textureLoader.setPath(undefined);\n      }\n    }\n\n    let texture;\n    const extension = textureNode.FileName.slice(-3).toLowerCase();\n\n    if (extension === 'tga') {\n      const loader = this.manager.getHandler('.tga');\n\n      if (loader === null) {\n        console.warn('FBXLoader: TGA loader not found, creating placeholder texture for', textureNode.RelativeFilename);\n        texture = new Texture();\n      } else {\n        texture = loader.load(fileName);\n      }\n    } else if (extension === 'psd') {\n      console.warn('FBXLoader: PSD textures are not supported, creating placeholder texture for', textureNode.RelativeFilename);\n      texture = new Texture();\n    } else {\n      texture = this.textureLoader.load(fileName);\n    }\n\n    this.textureLoader.setPath(currentPath);\n    return texture;\n  } // Parse nodes in FBXTree.Objects.Material\n\n\n  parseMaterials(textureMap) {\n    const materialMap = new Map();\n\n    if ('Material' in fbxTree.Objects) {\n      const materialNodes = fbxTree.Objects.Material;\n\n      for (const nodeID in materialNodes) {\n        const material = this.parseMaterial(materialNodes[nodeID], textureMap);\n        if (material !== null) materialMap.set(parseInt(nodeID), material);\n      }\n    }\n\n    return materialMap;\n  } // Parse single node in FBXTree.Objects.Material\n  // Materials are connected to texture maps in FBXTree.Objects.Textures\n  // FBX format currently only supports Lambert and Phong shading models\n\n\n  parseMaterial(materialNode, textureMap) {\n    const ID = materialNode.id;\n    const name = materialNode.attrName;\n    let type = materialNode.ShadingModel; // Case where FBX wraps shading model in property object.\n\n    if (typeof type === 'object') {\n      type = type.value;\n    } // Ignore unused materials which don't have any connections.\n\n\n    if (!connections.has(ID)) return null;\n    const parameters = this.parseParameters(materialNode, textureMap, ID);\n    let material;\n\n    switch (type.toLowerCase()) {\n      case 'phong':\n        material = new MeshPhongMaterial();\n        break;\n\n      case 'lambert':\n        material = new MeshLambertMaterial();\n        break;\n\n      default:\n        console.warn('THREE.FBXLoader: unknown material type \"%s\". Defaulting to MeshPhongMaterial.', type);\n        material = new MeshPhongMaterial();\n        break;\n    }\n\n    material.setValues(parameters);\n    material.name = name;\n    return material;\n  } // Parse FBX material and return parameters suitable for a three.js material\n  // Also parse the texture map and return any textures associated with the material\n\n\n  parseParameters(materialNode, textureMap, ID) {\n    const parameters = {};\n\n    if (materialNode.BumpFactor) {\n      parameters.bumpScale = materialNode.BumpFactor.value;\n    }\n\n    if (materialNode.Diffuse) {\n      parameters.color = new Color().fromArray(materialNode.Diffuse.value);\n    } else if (materialNode.DiffuseColor && (materialNode.DiffuseColor.type === 'Color' || materialNode.DiffuseColor.type === 'ColorRGB')) {\n      // The blender exporter exports diffuse here instead of in materialNode.Diffuse\n      parameters.color = new Color().fromArray(materialNode.DiffuseColor.value);\n    }\n\n    if (materialNode.DisplacementFactor) {\n      parameters.displacementScale = materialNode.DisplacementFactor.value;\n    }\n\n    if (materialNode.Emissive) {\n      parameters.emissive = new Color().fromArray(materialNode.Emissive.value);\n    } else if (materialNode.EmissiveColor && (materialNode.EmissiveColor.type === 'Color' || materialNode.EmissiveColor.type === 'ColorRGB')) {\n      // The blender exporter exports emissive color here instead of in materialNode.Emissive\n      parameters.emissive = new Color().fromArray(materialNode.EmissiveColor.value);\n    }\n\n    if (materialNode.EmissiveFactor) {\n      parameters.emissiveIntensity = parseFloat(materialNode.EmissiveFactor.value);\n    }\n\n    if (materialNode.Opacity) {\n      parameters.opacity = parseFloat(materialNode.Opacity.value);\n    }\n\n    if (parameters.opacity < 1.0) {\n      parameters.transparent = true;\n    }\n\n    if (materialNode.ReflectionFactor) {\n      parameters.reflectivity = materialNode.ReflectionFactor.value;\n    }\n\n    if (materialNode.Shininess) {\n      parameters.shininess = materialNode.Shininess.value;\n    }\n\n    if (materialNode.Specular) {\n      parameters.specular = new Color().fromArray(materialNode.Specular.value);\n    } else if (materialNode.SpecularColor && materialNode.SpecularColor.type === 'Color') {\n      // The blender exporter exports specular color here instead of in materialNode.Specular\n      parameters.specular = new Color().fromArray(materialNode.SpecularColor.value);\n    }\n\n    const scope = this;\n    connections.get(ID).children.forEach(function (child) {\n      const type = child.relationship;\n\n      switch (type) {\n        case 'Bump':\n          parameters.bumpMap = scope.getTexture(textureMap, child.ID);\n          break;\n\n        case 'Maya|TEX_ao_map':\n          parameters.aoMap = scope.getTexture(textureMap, child.ID);\n          break;\n\n        case 'DiffuseColor':\n        case 'Maya|TEX_color_map':\n          parameters.map = scope.getTexture(textureMap, child.ID);\n          parameters.map.encoding = sRGBEncoding;\n          break;\n\n        case 'DisplacementColor':\n          parameters.displacementMap = scope.getTexture(textureMap, child.ID);\n          break;\n\n        case 'EmissiveColor':\n          parameters.emissiveMap = scope.getTexture(textureMap, child.ID);\n          parameters.emissiveMap.encoding = sRGBEncoding;\n          break;\n\n        case 'NormalMap':\n        case 'Maya|TEX_normal_map':\n          parameters.normalMap = scope.getTexture(textureMap, child.ID);\n          break;\n\n        case 'ReflectionColor':\n          parameters.envMap = scope.getTexture(textureMap, child.ID);\n          parameters.envMap.mapping = EquirectangularReflectionMapping;\n          parameters.envMap.encoding = sRGBEncoding;\n          break;\n\n        case 'SpecularColor':\n          parameters.specularMap = scope.getTexture(textureMap, child.ID);\n          parameters.specularMap.encoding = sRGBEncoding;\n          break;\n\n        case 'TransparentColor':\n        case 'TransparencyFactor':\n          parameters.alphaMap = scope.getTexture(textureMap, child.ID);\n          parameters.transparent = true;\n          break;\n\n        case 'AmbientColor':\n        case 'ShininessExponent': // AKA glossiness map\n\n        case 'SpecularFactor': // AKA specularLevel\n\n        case 'VectorDisplacementColor': // NOTE: Seems to be a copy of DisplacementColor\n\n        default:\n          console.warn('THREE.FBXLoader: %s map is not supported in three.js, skipping texture.', type);\n          break;\n      }\n    });\n    return parameters;\n  } // get a texture from the textureMap for use by a material.\n\n\n  getTexture(textureMap, id) {\n    // if the texture is a layered texture, just use the first layer and issue a warning\n    if ('LayeredTexture' in fbxTree.Objects && id in fbxTree.Objects.LayeredTexture) {\n      console.warn('THREE.FBXLoader: layered textures are not supported in three.js. Discarding all but first layer.');\n      id = connections.get(id).children[0].ID;\n    }\n\n    return textureMap.get(id);\n  } // Parse nodes in FBXTree.Objects.Deformer\n  // Deformer node can contain skinning or Vertex Cache animation data, however only skinning is supported here\n  // Generates map of Skeleton-like objects for use later when generating and binding skeletons.\n\n\n  parseDeformers() {\n    const skeletons = {};\n    const morphTargets = {};\n\n    if ('Deformer' in fbxTree.Objects) {\n      const DeformerNodes = fbxTree.Objects.Deformer;\n\n      for (const nodeID in DeformerNodes) {\n        const deformerNode = DeformerNodes[nodeID];\n        const relationships = connections.get(parseInt(nodeID));\n\n        if (deformerNode.attrType === 'Skin') {\n          const skeleton = this.parseSkeleton(relationships, DeformerNodes);\n          skeleton.ID = nodeID;\n\n          if (relationships.parents.length > 1) {\n            console.warn('THREE.FBXLoader: skeleton attached to more than one geometry is not supported.');\n          }\n\n          skeleton.geometryID = relationships.parents[0].ID;\n          skeletons[nodeID] = skeleton;\n        } else if (deformerNode.attrType === 'BlendShape') {\n          const morphTarget = {\n            id: nodeID\n          };\n          morphTarget.rawTargets = this.parseMorphTargets(relationships, DeformerNodes);\n          morphTarget.id = nodeID;\n\n          if (relationships.parents.length > 1) {\n            console.warn('THREE.FBXLoader: morph target attached to more than one geometry is not supported.');\n          }\n\n          morphTargets[nodeID] = morphTarget;\n        }\n      }\n    }\n\n    return {\n      skeletons: skeletons,\n      morphTargets: morphTargets\n    };\n  } // Parse single nodes in FBXTree.Objects.Deformer\n  // The top level skeleton node has type 'Skin' and sub nodes have type 'Cluster'\n  // Each skin node represents a skeleton and each cluster node represents a bone\n\n\n  parseSkeleton(relationships, deformerNodes) {\n    const rawBones = [];\n    relationships.children.forEach(function (child) {\n      const boneNode = deformerNodes[child.ID];\n      if (boneNode.attrType !== 'Cluster') return;\n      const rawBone = {\n        ID: child.ID,\n        indices: [],\n        weights: [],\n        transformLink: new Matrix4().fromArray(boneNode.TransformLink.a) // transform: new Matrix4().fromArray( boneNode.Transform.a ),\n        // linkMode: boneNode.Mode,\n\n      };\n\n      if ('Indexes' in boneNode) {\n        rawBone.indices = boneNode.Indexes.a;\n        rawBone.weights = boneNode.Weights.a;\n      }\n\n      rawBones.push(rawBone);\n    });\n    return {\n      rawBones: rawBones,\n      bones: []\n    };\n  } // The top level morph deformer node has type \"BlendShape\" and sub nodes have type \"BlendShapeChannel\"\n\n\n  parseMorphTargets(relationships, deformerNodes) {\n    const rawMorphTargets = [];\n\n    for (let i = 0; i < relationships.children.length; i++) {\n      const child = relationships.children[i];\n      const morphTargetNode = deformerNodes[child.ID];\n      const rawMorphTarget = {\n        name: morphTargetNode.attrName,\n        initialWeight: morphTargetNode.DeformPercent,\n        id: morphTargetNode.id,\n        fullWeights: morphTargetNode.FullWeights.a\n      };\n      if (morphTargetNode.attrType !== 'BlendShapeChannel') return;\n      rawMorphTarget.geoID = connections.get(parseInt(child.ID)).children.filter(function (child) {\n        return child.relationship === undefined;\n      })[0].ID;\n      rawMorphTargets.push(rawMorphTarget);\n    }\n\n    return rawMorphTargets;\n  } // create the main Group() to be returned by the loader\n\n\n  parseScene(deformers, geometryMap, materialMap) {\n    sceneGraph = new Group();\n    const modelMap = this.parseModels(deformers.skeletons, geometryMap, materialMap);\n    const modelNodes = fbxTree.Objects.Model;\n    const scope = this;\n    modelMap.forEach(function (model) {\n      const modelNode = modelNodes[model.ID];\n      scope.setLookAtProperties(model, modelNode);\n      const parentConnections = connections.get(model.ID).parents;\n      parentConnections.forEach(function (connection) {\n        const parent = modelMap.get(connection.ID);\n        if (parent !== undefined) parent.add(model);\n      });\n\n      if (model.parent === null) {\n        sceneGraph.add(model);\n      }\n    });\n    this.bindSkeleton(deformers.skeletons, geometryMap, modelMap);\n    this.createAmbientLight();\n    this.setupMorphMaterials();\n    sceneGraph.traverse(function (node) {\n      if (node.userData.transformData) {\n        if (node.parent) {\n          node.userData.transformData.parentMatrix = node.parent.matrix;\n          node.userData.transformData.parentMatrixWorld = node.parent.matrixWorld;\n        }\n\n        const transform = generateTransform(node.userData.transformData);\n        node.applyMatrix4(transform);\n        node.updateWorldMatrix();\n      }\n    });\n    const animations = new AnimationParser().parse(); // if all the models where already combined in a single group, just return that\n\n    if (sceneGraph.children.length === 1 && sceneGraph.children[0].isGroup) {\n      sceneGraph.children[0].animations = animations;\n      sceneGraph = sceneGraph.children[0];\n    }\n\n    sceneGraph.animations = animations;\n  } // parse nodes in FBXTree.Objects.Model\n\n\n  parseModels(skeletons, geometryMap, materialMap) {\n    const modelMap = new Map();\n    const modelNodes = fbxTree.Objects.Model;\n\n    for (const nodeID in modelNodes) {\n      const id = parseInt(nodeID);\n      const node = modelNodes[nodeID];\n      const relationships = connections.get(id);\n      let model = this.buildSkeleton(relationships, skeletons, id, node.attrName);\n\n      if (!model) {\n        switch (node.attrType) {\n          case 'Camera':\n            model = this.createCamera(relationships);\n            break;\n\n          case 'Light':\n            model = this.createLight(relationships);\n            break;\n\n          case 'Mesh':\n            model = this.createMesh(relationships, geometryMap, materialMap);\n            break;\n\n          case 'NurbsCurve':\n            model = this.createCurve(relationships, geometryMap);\n            break;\n\n          case 'LimbNode':\n          case 'Root':\n            model = new Bone();\n            break;\n\n          case 'Null':\n          default:\n            model = new Group();\n            break;\n        }\n\n        model.name = node.attrName ? PropertyBinding.sanitizeNodeName(node.attrName) : '';\n        model.ID = id;\n      }\n\n      this.getTransformData(model, node);\n      modelMap.set(id, model);\n    }\n\n    return modelMap;\n  }\n\n  buildSkeleton(relationships, skeletons, id, name) {\n    let bone = null;\n    relationships.parents.forEach(function (parent) {\n      for (const ID in skeletons) {\n        const skeleton = skeletons[ID];\n        skeleton.rawBones.forEach(function (rawBone, i) {\n          if (rawBone.ID === parent.ID) {\n            const subBone = bone;\n            bone = new Bone();\n            bone.matrixWorld.copy(rawBone.transformLink); // set name and id here - otherwise in cases where \"subBone\" is created it will not have a name / id\n\n            bone.name = name ? PropertyBinding.sanitizeNodeName(name) : '';\n            bone.ID = id;\n            skeleton.bones[i] = bone; // In cases where a bone is shared between multiple meshes\n            // duplicate the bone here and and it as a child of the first bone\n\n            if (subBone !== null) {\n              bone.add(subBone);\n            }\n          }\n        });\n      }\n    });\n    return bone;\n  } // create a PerspectiveCamera or OrthographicCamera\n\n\n  createCamera(relationships) {\n    let model;\n    let cameraAttribute;\n    relationships.children.forEach(function (child) {\n      const attr = fbxTree.Objects.NodeAttribute[child.ID];\n\n      if (attr !== undefined) {\n        cameraAttribute = attr;\n      }\n    });\n\n    if (cameraAttribute === undefined) {\n      model = new Object3D();\n    } else {\n      let type = 0;\n\n      if (cameraAttribute.CameraProjectionType !== undefined && cameraAttribute.CameraProjectionType.value === 1) {\n        type = 1;\n      }\n\n      let nearClippingPlane = 1;\n\n      if (cameraAttribute.NearPlane !== undefined) {\n        nearClippingPlane = cameraAttribute.NearPlane.value / 1000;\n      }\n\n      let farClippingPlane = 1000;\n\n      if (cameraAttribute.FarPlane !== undefined) {\n        farClippingPlane = cameraAttribute.FarPlane.value / 1000;\n      }\n\n      let width = window.innerWidth;\n      let height = window.innerHeight;\n\n      if (cameraAttribute.AspectWidth !== undefined && cameraAttribute.AspectHeight !== undefined) {\n        width = cameraAttribute.AspectWidth.value;\n        height = cameraAttribute.AspectHeight.value;\n      }\n\n      const aspect = width / height;\n      let fov = 45;\n\n      if (cameraAttribute.FieldOfView !== undefined) {\n        fov = cameraAttribute.FieldOfView.value;\n      }\n\n      const focalLength = cameraAttribute.FocalLength ? cameraAttribute.FocalLength.value : null;\n\n      switch (type) {\n        case 0:\n          // Perspective\n          model = new PerspectiveCamera(fov, aspect, nearClippingPlane, farClippingPlane);\n          if (focalLength !== null) model.setFocalLength(focalLength);\n          break;\n\n        case 1:\n          // Orthographic\n          model = new OrthographicCamera(-width / 2, width / 2, height / 2, -height / 2, nearClippingPlane, farClippingPlane);\n          break;\n\n        default:\n          console.warn('THREE.FBXLoader: Unknown camera type ' + type + '.');\n          model = new Object3D();\n          break;\n      }\n    }\n\n    return model;\n  } // Create a DirectionalLight, PointLight or SpotLight\n\n\n  createLight(relationships) {\n    let model;\n    let lightAttribute;\n    relationships.children.forEach(function (child) {\n      const attr = fbxTree.Objects.NodeAttribute[child.ID];\n\n      if (attr !== undefined) {\n        lightAttribute = attr;\n      }\n    });\n\n    if (lightAttribute === undefined) {\n      model = new Object3D();\n    } else {\n      let type; // LightType can be undefined for Point lights\n\n      if (lightAttribute.LightType === undefined) {\n        type = 0;\n      } else {\n        type = lightAttribute.LightType.value;\n      }\n\n      let color = 0xffffff;\n\n      if (lightAttribute.Color !== undefined) {\n        color = new Color().fromArray(lightAttribute.Color.value);\n      }\n\n      let intensity = lightAttribute.Intensity === undefined ? 1 : lightAttribute.Intensity.value / 100; // light disabled\n\n      if (lightAttribute.CastLightOnObject !== undefined && lightAttribute.CastLightOnObject.value === 0) {\n        intensity = 0;\n      }\n\n      let distance = 0;\n\n      if (lightAttribute.FarAttenuationEnd !== undefined) {\n        if (lightAttribute.EnableFarAttenuation !== undefined && lightAttribute.EnableFarAttenuation.value === 0) {\n          distance = 0;\n        } else {\n          distance = lightAttribute.FarAttenuationEnd.value;\n        }\n      } // TODO: could this be calculated linearly from FarAttenuationStart to FarAttenuationEnd?\n\n\n      const decay = 1;\n\n      switch (type) {\n        case 0:\n          // Point\n          model = new PointLight(color, intensity, distance, decay);\n          break;\n\n        case 1:\n          // Directional\n          model = new DirectionalLight(color, intensity);\n          break;\n\n        case 2:\n          // Spot\n          let angle = Math.PI / 3;\n\n          if (lightAttribute.InnerAngle !== undefined) {\n            angle = MathUtils.degToRad(lightAttribute.InnerAngle.value);\n          }\n\n          let penumbra = 0;\n\n          if (lightAttribute.OuterAngle !== undefined) {\n            // TODO: this is not correct - FBX calculates outer and inner angle in degrees\n            // with OuterAngle > InnerAngle && OuterAngle <= Math.PI\n            // while three.js uses a penumbra between (0, 1) to attenuate the inner angle\n            penumbra = MathUtils.degToRad(lightAttribute.OuterAngle.value);\n            penumbra = Math.max(penumbra, 1);\n          }\n\n          model = new SpotLight(color, intensity, distance, angle, penumbra, decay);\n          break;\n\n        default:\n          console.warn('THREE.FBXLoader: Unknown light type ' + lightAttribute.LightType.value + ', defaulting to a PointLight.');\n          model = new PointLight(color, intensity);\n          break;\n      }\n\n      if (lightAttribute.CastShadows !== undefined && lightAttribute.CastShadows.value === 1) {\n        model.castShadow = true;\n      }\n    }\n\n    return model;\n  }\n\n  createMesh(relationships, geometryMap, materialMap) {\n    let model;\n    let geometry = null;\n    let material = null;\n    const materials = []; // get geometry and materials(s) from connections\n\n    relationships.children.forEach(function (child) {\n      if (geometryMap.has(child.ID)) {\n        geometry = geometryMap.get(child.ID);\n      }\n\n      if (materialMap.has(child.ID)) {\n        materials.push(materialMap.get(child.ID));\n      }\n    });\n\n    if (materials.length > 1) {\n      material = materials;\n    } else if (materials.length > 0) {\n      material = materials[0];\n    } else {\n      material = new MeshPhongMaterial({\n        color: 0xcccccc\n      });\n      materials.push(material);\n    }\n\n    if ('color' in geometry.attributes) {\n      materials.forEach(function (material) {\n        material.vertexColors = true;\n      });\n    }\n\n    if (geometry.FBX_Deformer) {\n      materials.forEach(function (material) {\n        material.skinning = true;\n      });\n      model = new SkinnedMesh(geometry, material);\n      model.normalizeSkinWeights();\n    } else {\n      model = new Mesh(geometry, material);\n    }\n\n    return model;\n  }\n\n  createCurve(relationships, geometryMap) {\n    const geometry = relationships.children.reduce(function (geo, child) {\n      if (geometryMap.has(child.ID)) geo = geometryMap.get(child.ID);\n      return geo;\n    }, null); // FBX does not list materials for Nurbs lines, so we'll just put our own in here.\n\n    const material = new LineBasicMaterial({\n      color: 0x3300ff,\n      linewidth: 1\n    });\n    return new Line(geometry, material);\n  } // parse the model node for transform data\n\n\n  getTransformData(model, modelNode) {\n    const transformData = {};\n    if ('InheritType' in modelNode) transformData.inheritType = parseInt(modelNode.InheritType.value);\n    if ('RotationOrder' in modelNode) transformData.eulerOrder = getEulerOrder(modelNode.RotationOrder.value);else transformData.eulerOrder = 'ZYX';\n    if ('Lcl_Translation' in modelNode) transformData.translation = modelNode.Lcl_Translation.value;\n    if ('PreRotation' in modelNode) transformData.preRotation = modelNode.PreRotation.value;\n    if ('Lcl_Rotation' in modelNode) transformData.rotation = modelNode.Lcl_Rotation.value;\n    if ('PostRotation' in modelNode) transformData.postRotation = modelNode.PostRotation.value;\n    if ('Lcl_Scaling' in modelNode) transformData.scale = modelNode.Lcl_Scaling.value;\n    if ('ScalingOffset' in modelNode) transformData.scalingOffset = modelNode.ScalingOffset.value;\n    if ('ScalingPivot' in modelNode) transformData.scalingPivot = modelNode.ScalingPivot.value;\n    if ('RotationOffset' in modelNode) transformData.rotationOffset = modelNode.RotationOffset.value;\n    if ('RotationPivot' in modelNode) transformData.rotationPivot = modelNode.RotationPivot.value;\n    model.userData.transformData = transformData;\n  }\n\n  setLookAtProperties(model, modelNode) {\n    if ('LookAtProperty' in modelNode) {\n      const children = connections.get(model.ID).children;\n      children.forEach(function (child) {\n        if (child.relationship === 'LookAtProperty') {\n          const lookAtTarget = fbxTree.Objects.Model[child.ID];\n\n          if ('Lcl_Translation' in lookAtTarget) {\n            const pos = lookAtTarget.Lcl_Translation.value; // DirectionalLight, SpotLight\n\n            if (model.target !== undefined) {\n              model.target.position.fromArray(pos);\n              sceneGraph.add(model.target);\n            } else {\n              // Cameras and other Object3Ds\n              model.lookAt(new Vector3().fromArray(pos));\n            }\n          }\n        }\n      });\n    }\n  }\n\n  bindSkeleton(skeletons, geometryMap, modelMap) {\n    const bindMatrices = this.parsePoseNodes();\n\n    for (const ID in skeletons) {\n      const skeleton = skeletons[ID];\n      const parents = connections.get(parseInt(skeleton.ID)).parents;\n      parents.forEach(function (parent) {\n        if (geometryMap.has(parent.ID)) {\n          const geoID = parent.ID;\n          const geoRelationships = connections.get(geoID);\n          geoRelationships.parents.forEach(function (geoConnParent) {\n            if (modelMap.has(geoConnParent.ID)) {\n              const model = modelMap.get(geoConnParent.ID);\n              model.bind(new Skeleton(skeleton.bones), bindMatrices[geoConnParent.ID]);\n            }\n          });\n        }\n      });\n    }\n  }\n\n  parsePoseNodes() {\n    const bindMatrices = {};\n\n    if ('Pose' in fbxTree.Objects) {\n      const BindPoseNode = fbxTree.Objects.Pose;\n\n      for (const nodeID in BindPoseNode) {\n        if (BindPoseNode[nodeID].attrType === 'BindPose') {\n          const poseNodes = BindPoseNode[nodeID].PoseNode;\n\n          if (Array.isArray(poseNodes)) {\n            poseNodes.forEach(function (poseNode) {\n              bindMatrices[poseNode.Node] = new Matrix4().fromArray(poseNode.Matrix.a);\n            });\n          } else {\n            bindMatrices[poseNodes.Node] = new Matrix4().fromArray(poseNodes.Matrix.a);\n          }\n        }\n      }\n    }\n\n    return bindMatrices;\n  } // Parse ambient color in FBXTree.GlobalSettings - if it's not set to black (default), create an ambient light\n\n\n  createAmbientLight() {\n    if ('GlobalSettings' in fbxTree && 'AmbientColor' in fbxTree.GlobalSettings) {\n      const ambientColor = fbxTree.GlobalSettings.AmbientColor.value;\n      const r = ambientColor[0];\n      const g = ambientColor[1];\n      const b = ambientColor[2];\n\n      if (r !== 0 || g !== 0 || b !== 0) {\n        const color = new Color(r, g, b);\n        sceneGraph.add(new AmbientLight(color, 1));\n      }\n    }\n  }\n\n  setupMorphMaterials() {\n    const scope = this;\n    sceneGraph.traverse(function (child) {\n      if (child.isMesh) {\n        if (child.geometry.morphAttributes.position && child.geometry.morphAttributes.position.length) {\n          if (Array.isArray(child.material)) {\n            child.material.forEach(function (material, i) {\n              scope.setupMorphMaterial(child, material, i);\n            });\n          } else {\n            scope.setupMorphMaterial(child, child.material);\n          }\n        }\n      }\n    });\n  }\n\n  setupMorphMaterial(child, material, index) {\n    const uuid = child.uuid;\n    const matUuid = material.uuid; // if a geometry has morph targets, it cannot share the material with other geometries\n\n    let sharedMat = false;\n    sceneGraph.traverse(function (node) {\n      if (node.isMesh) {\n        if (Array.isArray(node.material)) {\n          node.material.forEach(function (mat) {\n            if (mat.uuid === matUuid && node.uuid !== uuid) sharedMat = true;\n          });\n        } else if (node.material.uuid === matUuid && node.uuid !== uuid) {\n          sharedMat = true;\n        }\n      }\n    });\n\n    if (sharedMat === true) {\n      const clonedMat = material.clone();\n      clonedMat.morphTargets = true;\n      if (index === undefined) child.material = clonedMat;else child.material[index] = clonedMat;\n    } else {\n      material.morphTargets = true;\n    }\n  }\n\n} // parse Geometry data from FBXTree and return map of BufferGeometries\n\n\nclass GeometryParser {\n  // Parse nodes in FBXTree.Objects.Geometry\n  parse(deformers) {\n    const geometryMap = new Map();\n\n    if ('Geometry' in fbxTree.Objects) {\n      const geoNodes = fbxTree.Objects.Geometry;\n\n      for (const nodeID in geoNodes) {\n        const relationships = connections.get(parseInt(nodeID));\n        const geo = this.parseGeometry(relationships, geoNodes[nodeID], deformers);\n        geometryMap.set(parseInt(nodeID), geo);\n      }\n    }\n\n    return geometryMap;\n  } // Parse single node in FBXTree.Objects.Geometry\n\n\n  parseGeometry(relationships, geoNode, deformers) {\n    switch (geoNode.attrType) {\n      case 'Mesh':\n        return this.parseMeshGeometry(relationships, geoNode, deformers);\n\n      case 'NurbsCurve':\n        return this.parseNurbsGeometry(geoNode);\n    }\n  } // Parse single node mesh geometry in FBXTree.Objects.Geometry\n\n\n  parseMeshGeometry(relationships, geoNode, deformers) {\n    const skeletons = deformers.skeletons;\n    const morphTargets = [];\n    const modelNodes = relationships.parents.map(function (parent) {\n      return fbxTree.Objects.Model[parent.ID];\n    }); // don't create geometry if it is not associated with any models\n\n    if (modelNodes.length === 0) return;\n    const skeleton = relationships.children.reduce(function (skeleton, child) {\n      if (skeletons[child.ID] !== undefined) skeleton = skeletons[child.ID];\n      return skeleton;\n    }, null);\n    relationships.children.forEach(function (child) {\n      if (deformers.morphTargets[child.ID] !== undefined) {\n        morphTargets.push(deformers.morphTargets[child.ID]);\n      }\n    }); // Assume one model and get the preRotation from that\n    // if there is more than one model associated with the geometry this may cause problems\n\n    const modelNode = modelNodes[0];\n    const transformData = {};\n    if ('RotationOrder' in modelNode) transformData.eulerOrder = getEulerOrder(modelNode.RotationOrder.value);\n    if ('InheritType' in modelNode) transformData.inheritType = parseInt(modelNode.InheritType.value);\n    if ('GeometricTranslation' in modelNode) transformData.translation = modelNode.GeometricTranslation.value;\n    if ('GeometricRotation' in modelNode) transformData.rotation = modelNode.GeometricRotation.value;\n    if ('GeometricScaling' in modelNode) transformData.scale = modelNode.GeometricScaling.value;\n    const transform = generateTransform(transformData);\n    return this.genGeometry(geoNode, skeleton, morphTargets, transform);\n  } // Generate a BufferGeometry from a node in FBXTree.Objects.Geometry\n\n\n  genGeometry(geoNode, skeleton, morphTargets, preTransform) {\n    const geo = new BufferGeometry();\n    if (geoNode.attrName) geo.name = geoNode.attrName;\n    const geoInfo = this.parseGeoNode(geoNode, skeleton);\n    const buffers = this.genBuffers(geoInfo);\n    const positionAttribute = new Float32BufferAttribute(buffers.vertex, 3);\n    positionAttribute.applyMatrix4(preTransform);\n    geo.setAttribute('position', positionAttribute);\n\n    if (buffers.colors.length > 0) {\n      geo.setAttribute('color', new Float32BufferAttribute(buffers.colors, 3));\n    }\n\n    if (skeleton) {\n      geo.setAttribute('skinIndex', new Uint16BufferAttribute(buffers.weightsIndices, 4));\n      geo.setAttribute('skinWeight', new Float32BufferAttribute(buffers.vertexWeights, 4)); // used later to bind the skeleton to the model\n\n      geo.FBX_Deformer = skeleton;\n    }\n\n    if (buffers.normal.length > 0) {\n      const normalMatrix = new Matrix3().getNormalMatrix(preTransform);\n      const normalAttribute = new Float32BufferAttribute(buffers.normal, 3);\n      normalAttribute.applyNormalMatrix(normalMatrix);\n      geo.setAttribute('normal', normalAttribute);\n    }\n\n    buffers.uvs.forEach(function (uvBuffer, i) {\n      // subsequent uv buffers are called 'uv1', 'uv2', ...\n      let name = 'uv' + (i + 1).toString(); // the first uv buffer is just called 'uv'\n\n      if (i === 0) {\n        name = 'uv';\n      }\n\n      geo.setAttribute(name, new Float32BufferAttribute(buffers.uvs[i], 2));\n    });\n\n    if (geoInfo.material && geoInfo.material.mappingType !== 'AllSame') {\n      // Convert the material indices of each vertex into rendering groups on the geometry.\n      let prevMaterialIndex = buffers.materialIndex[0];\n      let startIndex = 0;\n      buffers.materialIndex.forEach(function (currentIndex, i) {\n        if (currentIndex !== prevMaterialIndex) {\n          geo.addGroup(startIndex, i - startIndex, prevMaterialIndex);\n          prevMaterialIndex = currentIndex;\n          startIndex = i;\n        }\n      }); // the loop above doesn't add the last group, do that here.\n\n      if (geo.groups.length > 0) {\n        const lastGroup = geo.groups[geo.groups.length - 1];\n        const lastIndex = lastGroup.start + lastGroup.count;\n\n        if (lastIndex !== buffers.materialIndex.length) {\n          geo.addGroup(lastIndex, buffers.materialIndex.length - lastIndex, prevMaterialIndex);\n        }\n      } // case where there are multiple materials but the whole geometry is only\n      // using one of them\n\n\n      if (geo.groups.length === 0) {\n        geo.addGroup(0, buffers.materialIndex.length, buffers.materialIndex[0]);\n      }\n    }\n\n    this.addMorphTargets(geo, geoNode, morphTargets, preTransform);\n    return geo;\n  }\n\n  parseGeoNode(geoNode, skeleton) {\n    const geoInfo = {};\n    geoInfo.vertexPositions = geoNode.Vertices !== undefined ? geoNode.Vertices.a : [];\n    geoInfo.vertexIndices = geoNode.PolygonVertexIndex !== undefined ? geoNode.PolygonVertexIndex.a : [];\n\n    if (geoNode.LayerElementColor) {\n      geoInfo.color = this.parseVertexColors(geoNode.LayerElementColor[0]);\n    }\n\n    if (geoNode.LayerElementMaterial) {\n      geoInfo.material = this.parseMaterialIndices(geoNode.LayerElementMaterial[0]);\n    }\n\n    if (geoNode.LayerElementNormal) {\n      geoInfo.normal = this.parseNormals(geoNode.LayerElementNormal[0]);\n    }\n\n    if (geoNode.LayerElementUV) {\n      geoInfo.uv = [];\n      let i = 0;\n\n      while (geoNode.LayerElementUV[i]) {\n        if (geoNode.LayerElementUV[i].UV) {\n          geoInfo.uv.push(this.parseUVs(geoNode.LayerElementUV[i]));\n        }\n\n        i++;\n      }\n    }\n\n    geoInfo.weightTable = {};\n\n    if (skeleton !== null) {\n      geoInfo.skeleton = skeleton;\n      skeleton.rawBones.forEach(function (rawBone, i) {\n        // loop over the bone's vertex indices and weights\n        rawBone.indices.forEach(function (index, j) {\n          if (geoInfo.weightTable[index] === undefined) geoInfo.weightTable[index] = [];\n          geoInfo.weightTable[index].push({\n            id: i,\n            weight: rawBone.weights[j]\n          });\n        });\n      });\n    }\n\n    return geoInfo;\n  }\n\n  genBuffers(geoInfo) {\n    const buffers = {\n      vertex: [],\n      normal: [],\n      colors: [],\n      uvs: [],\n      materialIndex: [],\n      vertexWeights: [],\n      weightsIndices: []\n    };\n    let polygonIndex = 0;\n    let faceLength = 0;\n    let displayedWeightsWarning = false; // these will hold data for a single face\n\n    let facePositionIndexes = [];\n    let faceNormals = [];\n    let faceColors = [];\n    let faceUVs = [];\n    let faceWeights = [];\n    let faceWeightIndices = [];\n    const scope = this;\n    geoInfo.vertexIndices.forEach(function (vertexIndex, polygonVertexIndex) {\n      let materialIndex;\n      let endOfFace = false; // Face index and vertex index arrays are combined in a single array\n      // A cube with quad faces looks like this:\n      // PolygonVertexIndex: *24 {\n      //  a: 0, 1, 3, -3, 2, 3, 5, -5, 4, 5, 7, -7, 6, 7, 1, -1, 1, 7, 5, -4, 6, 0, 2, -5\n      //  }\n      // Negative numbers mark the end of a face - first face here is 0, 1, 3, -3\n      // to find index of last vertex bit shift the index: ^ - 1\n\n      if (vertexIndex < 0) {\n        vertexIndex = vertexIndex ^ -1; // equivalent to ( x * -1 ) - 1\n\n        endOfFace = true;\n      }\n\n      let weightIndices = [];\n      let weights = [];\n      facePositionIndexes.push(vertexIndex * 3, vertexIndex * 3 + 1, vertexIndex * 3 + 2);\n\n      if (geoInfo.color) {\n        const data = getData(polygonVertexIndex, polygonIndex, vertexIndex, geoInfo.color);\n        faceColors.push(data[0], data[1], data[2]);\n      }\n\n      if (geoInfo.skeleton) {\n        if (geoInfo.weightTable[vertexIndex] !== undefined) {\n          geoInfo.weightTable[vertexIndex].forEach(function (wt) {\n            weights.push(wt.weight);\n            weightIndices.push(wt.id);\n          });\n        }\n\n        if (weights.length > 4) {\n          if (!displayedWeightsWarning) {\n            console.warn('THREE.FBXLoader: Vertex has more than 4 skinning weights assigned to vertex. Deleting additional weights.');\n            displayedWeightsWarning = true;\n          }\n\n          const wIndex = [0, 0, 0, 0];\n          const Weight = [0, 0, 0, 0];\n          weights.forEach(function (weight, weightIndex) {\n            let currentWeight = weight;\n            let currentIndex = weightIndices[weightIndex];\n            Weight.forEach(function (comparedWeight, comparedWeightIndex, comparedWeightArray) {\n              if (currentWeight > comparedWeight) {\n                comparedWeightArray[comparedWeightIndex] = currentWeight;\n                currentWeight = comparedWeight;\n                const tmp = wIndex[comparedWeightIndex];\n                wIndex[comparedWeightIndex] = currentIndex;\n                currentIndex = tmp;\n              }\n            });\n          });\n          weightIndices = wIndex;\n          weights = Weight;\n        } // if the weight array is shorter than 4 pad with 0s\n\n\n        while (weights.length < 4) {\n          weights.push(0);\n          weightIndices.push(0);\n        }\n\n        for (let i = 0; i < 4; ++i) {\n          faceWeights.push(weights[i]);\n          faceWeightIndices.push(weightIndices[i]);\n        }\n      }\n\n      if (geoInfo.normal) {\n        const data = getData(polygonVertexIndex, polygonIndex, vertexIndex, geoInfo.normal);\n        faceNormals.push(data[0], data[1], data[2]);\n      }\n\n      if (geoInfo.material && geoInfo.material.mappingType !== 'AllSame') {\n        materialIndex = getData(polygonVertexIndex, polygonIndex, vertexIndex, geoInfo.material)[0];\n      }\n\n      if (geoInfo.uv) {\n        geoInfo.uv.forEach(function (uv, i) {\n          const data = getData(polygonVertexIndex, polygonIndex, vertexIndex, uv);\n\n          if (faceUVs[i] === undefined) {\n            faceUVs[i] = [];\n          }\n\n          faceUVs[i].push(data[0]);\n          faceUVs[i].push(data[1]);\n        });\n      }\n\n      faceLength++;\n\n      if (endOfFace) {\n        scope.genFace(buffers, geoInfo, facePositionIndexes, materialIndex, faceNormals, faceColors, faceUVs, faceWeights, faceWeightIndices, faceLength);\n        polygonIndex++;\n        faceLength = 0; // reset arrays for the next face\n\n        facePositionIndexes = [];\n        faceNormals = [];\n        faceColors = [];\n        faceUVs = [];\n        faceWeights = [];\n        faceWeightIndices = [];\n      }\n    });\n    return buffers;\n  } // Generate data for a single face in a geometry. If the face is a quad then split it into 2 tris\n\n\n  genFace(buffers, geoInfo, facePositionIndexes, materialIndex, faceNormals, faceColors, faceUVs, faceWeights, faceWeightIndices, faceLength) {\n    for (let i = 2; i < faceLength; i++) {\n      buffers.vertex.push(geoInfo.vertexPositions[facePositionIndexes[0]]);\n      buffers.vertex.push(geoInfo.vertexPositions[facePositionIndexes[1]]);\n      buffers.vertex.push(geoInfo.vertexPositions[facePositionIndexes[2]]);\n      buffers.vertex.push(geoInfo.vertexPositions[facePositionIndexes[(i - 1) * 3]]);\n      buffers.vertex.push(geoInfo.vertexPositions[facePositionIndexes[(i - 1) * 3 + 1]]);\n      buffers.vertex.push(geoInfo.vertexPositions[facePositionIndexes[(i - 1) * 3 + 2]]);\n      buffers.vertex.push(geoInfo.vertexPositions[facePositionIndexes[i * 3]]);\n      buffers.vertex.push(geoInfo.vertexPositions[facePositionIndexes[i * 3 + 1]]);\n      buffers.vertex.push(geoInfo.vertexPositions[facePositionIndexes[i * 3 + 2]]);\n\n      if (geoInfo.skeleton) {\n        buffers.vertexWeights.push(faceWeights[0]);\n        buffers.vertexWeights.push(faceWeights[1]);\n        buffers.vertexWeights.push(faceWeights[2]);\n        buffers.vertexWeights.push(faceWeights[3]);\n        buffers.vertexWeights.push(faceWeights[(i - 1) * 4]);\n        buffers.vertexWeights.push(faceWeights[(i - 1) * 4 + 1]);\n        buffers.vertexWeights.push(faceWeights[(i - 1) * 4 + 2]);\n        buffers.vertexWeights.push(faceWeights[(i - 1) * 4 + 3]);\n        buffers.vertexWeights.push(faceWeights[i * 4]);\n        buffers.vertexWeights.push(faceWeights[i * 4 + 1]);\n        buffers.vertexWeights.push(faceWeights[i * 4 + 2]);\n        buffers.vertexWeights.push(faceWeights[i * 4 + 3]);\n        buffers.weightsIndices.push(faceWeightIndices[0]);\n        buffers.weightsIndices.push(faceWeightIndices[1]);\n        buffers.weightsIndices.push(faceWeightIndices[2]);\n        buffers.weightsIndices.push(faceWeightIndices[3]);\n        buffers.weightsIndices.push(faceWeightIndices[(i - 1) * 4]);\n        buffers.weightsIndices.push(faceWeightIndices[(i - 1) * 4 + 1]);\n        buffers.weightsIndices.push(faceWeightIndices[(i - 1) * 4 + 2]);\n        buffers.weightsIndices.push(faceWeightIndices[(i - 1) * 4 + 3]);\n        buffers.weightsIndices.push(faceWeightIndices[i * 4]);\n        buffers.weightsIndices.push(faceWeightIndices[i * 4 + 1]);\n        buffers.weightsIndices.push(faceWeightIndices[i * 4 + 2]);\n        buffers.weightsIndices.push(faceWeightIndices[i * 4 + 3]);\n      }\n\n      if (geoInfo.color) {\n        buffers.colors.push(faceColors[0]);\n        buffers.colors.push(faceColors[1]);\n        buffers.colors.push(faceColors[2]);\n        buffers.colors.push(faceColors[(i - 1) * 3]);\n        buffers.colors.push(faceColors[(i - 1) * 3 + 1]);\n        buffers.colors.push(faceColors[(i - 1) * 3 + 2]);\n        buffers.colors.push(faceColors[i * 3]);\n        buffers.colors.push(faceColors[i * 3 + 1]);\n        buffers.colors.push(faceColors[i * 3 + 2]);\n      }\n\n      if (geoInfo.material && geoInfo.material.mappingType !== 'AllSame') {\n        buffers.materialIndex.push(materialIndex);\n        buffers.materialIndex.push(materialIndex);\n        buffers.materialIndex.push(materialIndex);\n      }\n\n      if (geoInfo.normal) {\n        buffers.normal.push(faceNormals[0]);\n        buffers.normal.push(faceNormals[1]);\n        buffers.normal.push(faceNormals[2]);\n        buffers.normal.push(faceNormals[(i - 1) * 3]);\n        buffers.normal.push(faceNormals[(i - 1) * 3 + 1]);\n        buffers.normal.push(faceNormals[(i - 1) * 3 + 2]);\n        buffers.normal.push(faceNormals[i * 3]);\n        buffers.normal.push(faceNormals[i * 3 + 1]);\n        buffers.normal.push(faceNormals[i * 3 + 2]);\n      }\n\n      if (geoInfo.uv) {\n        geoInfo.uv.forEach(function (uv, j) {\n          if (buffers.uvs[j] === undefined) buffers.uvs[j] = [];\n          buffers.uvs[j].push(faceUVs[j][0]);\n          buffers.uvs[j].push(faceUVs[j][1]);\n          buffers.uvs[j].push(faceUVs[j][(i - 1) * 2]);\n          buffers.uvs[j].push(faceUVs[j][(i - 1) * 2 + 1]);\n          buffers.uvs[j].push(faceUVs[j][i * 2]);\n          buffers.uvs[j].push(faceUVs[j][i * 2 + 1]);\n        });\n      }\n    }\n  }\n\n  addMorphTargets(parentGeo, parentGeoNode, morphTargets, preTransform) {\n    if (morphTargets.length === 0) return;\n    parentGeo.morphTargetsRelative = true;\n    parentGeo.morphAttributes.position = []; // parentGeo.morphAttributes.normal = []; // not implemented\n\n    const scope = this;\n    morphTargets.forEach(function (morphTarget) {\n      morphTarget.rawTargets.forEach(function (rawTarget) {\n        const morphGeoNode = fbxTree.Objects.Geometry[rawTarget.geoID];\n\n        if (morphGeoNode !== undefined) {\n          scope.genMorphGeometry(parentGeo, parentGeoNode, morphGeoNode, preTransform, rawTarget.name);\n        }\n      });\n    });\n  } // a morph geometry node is similar to a standard  node, and the node is also contained\n  // in FBXTree.Objects.Geometry, however it can only have attributes for position, normal\n  // and a special attribute Index defining which vertices of the original geometry are affected\n  // Normal and position attributes only have data for the vertices that are affected by the morph\n\n\n  genMorphGeometry(parentGeo, parentGeoNode, morphGeoNode, preTransform, name) {\n    const vertexIndices = parentGeoNode.PolygonVertexIndex !== undefined ? parentGeoNode.PolygonVertexIndex.a : [];\n    const morphPositionsSparse = morphGeoNode.Vertices !== undefined ? morphGeoNode.Vertices.a : [];\n    const indices = morphGeoNode.Indexes !== undefined ? morphGeoNode.Indexes.a : [];\n    const length = parentGeo.attributes.position.count * 3;\n    const morphPositions = new Float32Array(length);\n\n    for (let i = 0; i < indices.length; i++) {\n      const morphIndex = indices[i] * 3;\n      morphPositions[morphIndex] = morphPositionsSparse[i * 3];\n      morphPositions[morphIndex + 1] = morphPositionsSparse[i * 3 + 1];\n      morphPositions[morphIndex + 2] = morphPositionsSparse[i * 3 + 2];\n    } // TODO: add morph normal support\n\n\n    const morphGeoInfo = {\n      vertexIndices: vertexIndices,\n      vertexPositions: morphPositions\n    };\n    const morphBuffers = this.genBuffers(morphGeoInfo);\n    const positionAttribute = new Float32BufferAttribute(morphBuffers.vertex, 3);\n    positionAttribute.name = name || morphGeoNode.attrName;\n    positionAttribute.applyMatrix4(preTransform);\n    parentGeo.morphAttributes.position.push(positionAttribute);\n  } // Parse normal from FBXTree.Objects.Geometry.LayerElementNormal if it exists\n\n\n  parseNormals(NormalNode) {\n    const mappingType = NormalNode.MappingInformationType;\n    const referenceType = NormalNode.ReferenceInformationType;\n    const buffer = NormalNode.Normals.a;\n    let indexBuffer = [];\n\n    if (referenceType === 'IndexToDirect') {\n      if ('NormalIndex' in NormalNode) {\n        indexBuffer = NormalNode.NormalIndex.a;\n      } else if ('NormalsIndex' in NormalNode) {\n        indexBuffer = NormalNode.NormalsIndex.a;\n      }\n    }\n\n    return {\n      dataSize: 3,\n      buffer: buffer,\n      indices: indexBuffer,\n      mappingType: mappingType,\n      referenceType: referenceType\n    };\n  } // Parse UVs from FBXTree.Objects.Geometry.LayerElementUV if it exists\n\n\n  parseUVs(UVNode) {\n    const mappingType = UVNode.MappingInformationType;\n    const referenceType = UVNode.ReferenceInformationType;\n    const buffer = UVNode.UV.a;\n    let indexBuffer = [];\n\n    if (referenceType === 'IndexToDirect') {\n      indexBuffer = UVNode.UVIndex.a;\n    }\n\n    return {\n      dataSize: 2,\n      buffer: buffer,\n      indices: indexBuffer,\n      mappingType: mappingType,\n      referenceType: referenceType\n    };\n  } // Parse Vertex Colors from FBXTree.Objects.Geometry.LayerElementColor if it exists\n\n\n  parseVertexColors(ColorNode) {\n    const mappingType = ColorNode.MappingInformationType;\n    const referenceType = ColorNode.ReferenceInformationType;\n    const buffer = ColorNode.Colors.a;\n    let indexBuffer = [];\n\n    if (referenceType === 'IndexToDirect') {\n      indexBuffer = ColorNode.ColorIndex.a;\n    }\n\n    return {\n      dataSize: 4,\n      buffer: buffer,\n      indices: indexBuffer,\n      mappingType: mappingType,\n      referenceType: referenceType\n    };\n  } // Parse mapping and material data in FBXTree.Objects.Geometry.LayerElementMaterial if it exists\n\n\n  parseMaterialIndices(MaterialNode) {\n    const mappingType = MaterialNode.MappingInformationType;\n    const referenceType = MaterialNode.ReferenceInformationType;\n\n    if (mappingType === 'NoMappingInformation') {\n      return {\n        dataSize: 1,\n        buffer: [0],\n        indices: [0],\n        mappingType: 'AllSame',\n        referenceType: referenceType\n      };\n    }\n\n    const materialIndexBuffer = MaterialNode.Materials.a; // Since materials are stored as indices, there's a bit of a mismatch between FBX and what\n    // we expect.So we create an intermediate buffer that points to the index in the buffer,\n    // for conforming with the other functions we've written for other data.\n\n    const materialIndices = [];\n\n    for (let i = 0; i < materialIndexBuffer.length; ++i) {\n      materialIndices.push(i);\n    }\n\n    return {\n      dataSize: 1,\n      buffer: materialIndexBuffer,\n      indices: materialIndices,\n      mappingType: mappingType,\n      referenceType: referenceType\n    };\n  } // Generate a NurbGeometry from a node in FBXTree.Objects.Geometry\n\n\n  parseNurbsGeometry(geoNode) {\n    if (NURBSCurve === undefined) {\n      console.error('THREE.FBXLoader: The loader relies on NURBSCurve for any nurbs present in the model. Nurbs will show up as empty geometry.');\n      return new BufferGeometry();\n    }\n\n    const order = parseInt(geoNode.Order);\n\n    if (isNaN(order)) {\n      console.error('THREE.FBXLoader: Invalid Order %s given for geometry ID: %s', geoNode.Order, geoNode.id);\n      return new BufferGeometry();\n    }\n\n    const degree = order - 1;\n    const knots = geoNode.KnotVector.a;\n    const controlPoints = [];\n    const pointsValues = geoNode.Points.a;\n\n    for (let i = 0, l = pointsValues.length; i < l; i += 4) {\n      controlPoints.push(new Vector4().fromArray(pointsValues, i));\n    }\n\n    let startKnot, endKnot;\n\n    if (geoNode.Form === 'Closed') {\n      controlPoints.push(controlPoints[0]);\n    } else if (geoNode.Form === 'Periodic') {\n      startKnot = degree;\n      endKnot = knots.length - 1 - startKnot;\n\n      for (let i = 0; i < degree; ++i) {\n        controlPoints.push(controlPoints[i]);\n      }\n    }\n\n    const curve = new NURBSCurve(degree, knots, controlPoints, startKnot, endKnot);\n    const vertices = curve.getPoints(controlPoints.length * 7);\n    const positions = new Float32Array(vertices.length * 3);\n    vertices.forEach(function (vertex, i) {\n      vertex.toArray(positions, i * 3);\n    });\n    const geometry = new BufferGeometry();\n    geometry.setAttribute('position', new BufferAttribute(positions, 3));\n    return geometry;\n  }\n\n} // parse animation data from FBXTree\n\n\nclass AnimationParser {\n  // take raw animation clips and turn them into three.js animation clips\n  parse() {\n    const animationClips = [];\n    const rawClips = this.parseClips();\n\n    if (rawClips !== undefined) {\n      for (const key in rawClips) {\n        const rawClip = rawClips[key];\n        const clip = this.addClip(rawClip);\n        animationClips.push(clip);\n      }\n    }\n\n    return animationClips;\n  }\n\n  parseClips() {\n    // since the actual transformation data is stored in FBXTree.Objects.AnimationCurve,\n    // if this is undefined we can safely assume there are no animations\n    if (fbxTree.Objects.AnimationCurve === undefined) return undefined;\n    const curveNodesMap = this.parseAnimationCurveNodes();\n    this.parseAnimationCurves(curveNodesMap);\n    const layersMap = this.parseAnimationLayers(curveNodesMap);\n    const rawClips = this.parseAnimStacks(layersMap);\n    return rawClips;\n  } // parse nodes in FBXTree.Objects.AnimationCurveNode\n  // each AnimationCurveNode holds data for an animation transform for a model (e.g. left arm rotation )\n  // and is referenced by an AnimationLayer\n\n\n  parseAnimationCurveNodes() {\n    const rawCurveNodes = fbxTree.Objects.AnimationCurveNode;\n    const curveNodesMap = new Map();\n\n    for (const nodeID in rawCurveNodes) {\n      const rawCurveNode = rawCurveNodes[nodeID];\n\n      if (rawCurveNode.attrName.match(/S|R|T|DeformPercent/) !== null) {\n        const curveNode = {\n          id: rawCurveNode.id,\n          attr: rawCurveNode.attrName,\n          curves: {}\n        };\n        curveNodesMap.set(curveNode.id, curveNode);\n      }\n    }\n\n    return curveNodesMap;\n  } // parse nodes in FBXTree.Objects.AnimationCurve and connect them up to\n  // previously parsed AnimationCurveNodes. Each AnimationCurve holds data for a single animated\n  // axis ( e.g. times and values of x rotation)\n\n\n  parseAnimationCurves(curveNodesMap) {\n    const rawCurves = fbxTree.Objects.AnimationCurve; // TODO: Many values are identical up to roundoff error, but won't be optimised\n    // e.g. position times: [0, 0.4, 0. 8]\n    // position values: [7.23538335023477e-7, 93.67518615722656, -0.9982695579528809, 7.23538335023477e-7, 93.67518615722656, -0.9982695579528809, 7.235384487103147e-7, 93.67520904541016, -0.9982695579528809]\n    // clearly, this should be optimised to\n    // times: [0], positions [7.23538335023477e-7, 93.67518615722656, -0.9982695579528809]\n    // this shows up in nearly every FBX file, and generally time array is length > 100\n\n    for (const nodeID in rawCurves) {\n      const animationCurve = {\n        id: rawCurves[nodeID].id,\n        times: rawCurves[nodeID].KeyTime.a.map(convertFBXTimeToSeconds),\n        values: rawCurves[nodeID].KeyValueFloat.a\n      };\n      const relationships = connections.get(animationCurve.id);\n\n      if (relationships !== undefined) {\n        const animationCurveID = relationships.parents[0].ID;\n        const animationCurveRelationship = relationships.parents[0].relationship;\n\n        if (animationCurveRelationship.match(/X/)) {\n          curveNodesMap.get(animationCurveID).curves['x'] = animationCurve;\n        } else if (animationCurveRelationship.match(/Y/)) {\n          curveNodesMap.get(animationCurveID).curves['y'] = animationCurve;\n        } else if (animationCurveRelationship.match(/Z/)) {\n          curveNodesMap.get(animationCurveID).curves['z'] = animationCurve;\n        } else if (animationCurveRelationship.match(/d|DeformPercent/) && curveNodesMap.has(animationCurveID)) {\n          curveNodesMap.get(animationCurveID).curves['morph'] = animationCurve;\n        }\n      }\n    }\n  } // parse nodes in FBXTree.Objects.AnimationLayer. Each layers holds references\n  // to various AnimationCurveNodes and is referenced by an AnimationStack node\n  // note: theoretically a stack can have multiple layers, however in practice there always seems to be one per stack\n\n\n  parseAnimationLayers(curveNodesMap) {\n    const rawLayers = fbxTree.Objects.AnimationLayer;\n    const layersMap = new Map();\n\n    for (const nodeID in rawLayers) {\n      const layerCurveNodes = [];\n      const connection = connections.get(parseInt(nodeID));\n\n      if (connection !== undefined) {\n        // all the animationCurveNodes used in the layer\n        const children = connection.children;\n        children.forEach(function (child, i) {\n          if (curveNodesMap.has(child.ID)) {\n            const curveNode = curveNodesMap.get(child.ID); // check that the curves are defined for at least one axis, otherwise ignore the curveNode\n\n            if (curveNode.curves.x !== undefined || curveNode.curves.y !== undefined || curveNode.curves.z !== undefined) {\n              if (layerCurveNodes[i] === undefined) {\n                const modelID = connections.get(child.ID).parents.filter(function (parent) {\n                  return parent.relationship !== undefined;\n                })[0].ID;\n\n                if (modelID !== undefined) {\n                  const rawModel = fbxTree.Objects.Model[modelID.toString()];\n\n                  if (rawModel === undefined) {\n                    console.warn('THREE.FBXLoader: Encountered a unused curve.', child);\n                    return;\n                  }\n\n                  const node = {\n                    modelName: rawModel.attrName ? PropertyBinding.sanitizeNodeName(rawModel.attrName) : '',\n                    ID: rawModel.id,\n                    initialPosition: [0, 0, 0],\n                    initialRotation: [0, 0, 0],\n                    initialScale: [1, 1, 1]\n                  };\n                  sceneGraph.traverse(function (child) {\n                    if (child.ID === rawModel.id) {\n                      node.transform = child.matrix;\n                      if (child.userData.transformData) node.eulerOrder = child.userData.transformData.eulerOrder;\n                    }\n                  });\n                  if (!node.transform) node.transform = new Matrix4(); // if the animated model is pre rotated, we'll have to apply the pre rotations to every\n                  // animation value as well\n\n                  if ('PreRotation' in rawModel) node.preRotation = rawModel.PreRotation.value;\n                  if ('PostRotation' in rawModel) node.postRotation = rawModel.PostRotation.value;\n                  layerCurveNodes[i] = node;\n                }\n              }\n\n              if (layerCurveNodes[i]) layerCurveNodes[i][curveNode.attr] = curveNode;\n            } else if (curveNode.curves.morph !== undefined) {\n              if (layerCurveNodes[i] === undefined) {\n                const deformerID = connections.get(child.ID).parents.filter(function (parent) {\n                  return parent.relationship !== undefined;\n                })[0].ID;\n                const morpherID = connections.get(deformerID).parents[0].ID;\n                const geoID = connections.get(morpherID).parents[0].ID; // assuming geometry is not used in more than one model\n\n                const modelID = connections.get(geoID).parents[0].ID;\n                const rawModel = fbxTree.Objects.Model[modelID];\n                const node = {\n                  modelName: rawModel.attrName ? PropertyBinding.sanitizeNodeName(rawModel.attrName) : '',\n                  morphName: fbxTree.Objects.Deformer[deformerID].attrName\n                };\n                layerCurveNodes[i] = node;\n              }\n\n              layerCurveNodes[i][curveNode.attr] = curveNode;\n            }\n          }\n        });\n        layersMap.set(parseInt(nodeID), layerCurveNodes);\n      }\n    }\n\n    return layersMap;\n  } // parse nodes in FBXTree.Objects.AnimationStack. These are the top level node in the animation\n  // hierarchy. Each Stack node will be used to create a AnimationClip\n\n\n  parseAnimStacks(layersMap) {\n    const rawStacks = fbxTree.Objects.AnimationStack; // connect the stacks (clips) up to the layers\n\n    const rawClips = {};\n\n    for (const nodeID in rawStacks) {\n      const children = connections.get(parseInt(nodeID)).children;\n\n      if (children.length > 1) {\n        // it seems like stacks will always be associated with a single layer. But just in case there are files\n        // where there are multiple layers per stack, we'll display a warning\n        console.warn('THREE.FBXLoader: Encountered an animation stack with multiple layers, this is currently not supported. Ignoring subsequent layers.');\n      }\n\n      const layer = layersMap.get(children[0].ID);\n      rawClips[nodeID] = {\n        name: rawStacks[nodeID].attrName,\n        layer: layer\n      };\n    }\n\n    return rawClips;\n  }\n\n  addClip(rawClip) {\n    let tracks = [];\n    const scope = this;\n    rawClip.layer.forEach(function (rawTracks) {\n      tracks = tracks.concat(scope.generateTracks(rawTracks));\n    });\n    return new AnimationClip(rawClip.name, -1, tracks);\n  }\n\n  generateTracks(rawTracks) {\n    const tracks = [];\n    let initialPosition = new Vector3();\n    let initialRotation = new Quaternion();\n    let initialScale = new Vector3();\n    if (rawTracks.transform) rawTracks.transform.decompose(initialPosition, initialRotation, initialScale);\n    initialPosition = initialPosition.toArray();\n    initialRotation = new Euler().setFromQuaternion(initialRotation, rawTracks.eulerOrder).toArray();\n    initialScale = initialScale.toArray();\n\n    if (rawTracks.T !== undefined && Object.keys(rawTracks.T.curves).length > 0) {\n      const positionTrack = this.generateVectorTrack(rawTracks.modelName, rawTracks.T.curves, initialPosition, 'position');\n      if (positionTrack !== undefined) tracks.push(positionTrack);\n    }\n\n    if (rawTracks.R !== undefined && Object.keys(rawTracks.R.curves).length > 0) {\n      const rotationTrack = this.generateRotationTrack(rawTracks.modelName, rawTracks.R.curves, initialRotation, rawTracks.preRotation, rawTracks.postRotation, rawTracks.eulerOrder);\n      if (rotationTrack !== undefined) tracks.push(rotationTrack);\n    }\n\n    if (rawTracks.S !== undefined && Object.keys(rawTracks.S.curves).length > 0) {\n      const scaleTrack = this.generateVectorTrack(rawTracks.modelName, rawTracks.S.curves, initialScale, 'scale');\n      if (scaleTrack !== undefined) tracks.push(scaleTrack);\n    }\n\n    if (rawTracks.DeformPercent !== undefined) {\n      const morphTrack = this.generateMorphTrack(rawTracks);\n      if (morphTrack !== undefined) tracks.push(morphTrack);\n    }\n\n    return tracks;\n  }\n\n  generateVectorTrack(modelName, curves, initialValue, type) {\n    const times = this.getTimesForAllAxes(curves);\n    const values = this.getKeyframeTrackValues(times, curves, initialValue);\n    return new VectorKeyframeTrack(modelName + '.' + type, times, values);\n  }\n\n  generateRotationTrack(modelName, curves, initialValue, preRotation, postRotation, eulerOrder) {\n    if (curves.x !== undefined) {\n      this.interpolateRotations(curves.x);\n      curves.x.values = curves.x.values.map(MathUtils.degToRad);\n    }\n\n    if (curves.y !== undefined) {\n      this.interpolateRotations(curves.y);\n      curves.y.values = curves.y.values.map(MathUtils.degToRad);\n    }\n\n    if (curves.z !== undefined) {\n      this.interpolateRotations(curves.z);\n      curves.z.values = curves.z.values.map(MathUtils.degToRad);\n    }\n\n    const times = this.getTimesForAllAxes(curves);\n    const values = this.getKeyframeTrackValues(times, curves, initialValue);\n\n    if (preRotation !== undefined) {\n      preRotation = preRotation.map(MathUtils.degToRad);\n      preRotation.push(eulerOrder);\n      preRotation = new Euler().fromArray(preRotation);\n      preRotation = new Quaternion().setFromEuler(preRotation);\n    }\n\n    if (postRotation !== undefined) {\n      postRotation = postRotation.map(MathUtils.degToRad);\n      postRotation.push(eulerOrder);\n      postRotation = new Euler().fromArray(postRotation);\n      postRotation = new Quaternion().setFromEuler(postRotation).invert();\n    }\n\n    const quaternion = new Quaternion();\n    const euler = new Euler();\n    const quaternionValues = [];\n\n    for (let i = 0; i < values.length; i += 3) {\n      euler.set(values[i], values[i + 1], values[i + 2], eulerOrder);\n      quaternion.setFromEuler(euler);\n      if (preRotation !== undefined) quaternion.premultiply(preRotation);\n      if (postRotation !== undefined) quaternion.multiply(postRotation);\n      quaternion.toArray(quaternionValues, i / 3 * 4);\n    }\n\n    return new QuaternionKeyframeTrack(modelName + '.quaternion', times, quaternionValues);\n  }\n\n  generateMorphTrack(rawTracks) {\n    const curves = rawTracks.DeformPercent.curves.morph;\n    const values = curves.values.map(function (val) {\n      return val / 100;\n    });\n    const morphNum = sceneGraph.getObjectByName(rawTracks.modelName).morphTargetDictionary[rawTracks.morphName];\n    return new NumberKeyframeTrack(rawTracks.modelName + '.morphTargetInfluences[' + morphNum + ']', curves.times, values);\n  } // For all animated objects, times are defined separately for each axis\n  // Here we'll combine the times into one sorted array without duplicates\n\n\n  getTimesForAllAxes(curves) {\n    let times = []; // first join together the times for each axis, if defined\n\n    if (curves.x !== undefined) times = times.concat(curves.x.times);\n    if (curves.y !== undefined) times = times.concat(curves.y.times);\n    if (curves.z !== undefined) times = times.concat(curves.z.times); // then sort them\n\n    times = times.sort(function (a, b) {\n      return a - b;\n    }); // and remove duplicates\n\n    if (times.length > 1) {\n      let targetIndex = 1;\n      let lastValue = times[0];\n\n      for (let i = 1; i < times.length; i++) {\n        const currentValue = times[i];\n\n        if (currentValue !== lastValue) {\n          times[targetIndex] = currentValue;\n          lastValue = currentValue;\n          targetIndex++;\n        }\n      }\n\n      times = times.slice(0, targetIndex);\n    }\n\n    return times;\n  }\n\n  getKeyframeTrackValues(times, curves, initialValue) {\n    const prevValue = initialValue;\n    const values = [];\n    let xIndex = -1;\n    let yIndex = -1;\n    let zIndex = -1;\n    times.forEach(function (time) {\n      if (curves.x) xIndex = curves.x.times.indexOf(time);\n      if (curves.y) yIndex = curves.y.times.indexOf(time);\n      if (curves.z) zIndex = curves.z.times.indexOf(time); // if there is an x value defined for this frame, use that\n\n      if (xIndex !== -1) {\n        const xValue = curves.x.values[xIndex];\n        values.push(xValue);\n        prevValue[0] = xValue;\n      } else {\n        // otherwise use the x value from the previous frame\n        values.push(prevValue[0]);\n      }\n\n      if (yIndex !== -1) {\n        const yValue = curves.y.values[yIndex];\n        values.push(yValue);\n        prevValue[1] = yValue;\n      } else {\n        values.push(prevValue[1]);\n      }\n\n      if (zIndex !== -1) {\n        const zValue = curves.z.values[zIndex];\n        values.push(zValue);\n        prevValue[2] = zValue;\n      } else {\n        values.push(prevValue[2]);\n      }\n    });\n    return values;\n  } // Rotations are defined as Euler angles which can have values  of any size\n  // These will be converted to quaternions which don't support values greater than\n  // PI, so we'll interpolate large rotations\n\n\n  interpolateRotations(curve) {\n    for (let i = 1; i < curve.values.length; i++) {\n      const initialValue = curve.values[i - 1];\n      const valuesSpan = curve.values[i] - initialValue;\n      const absoluteSpan = Math.abs(valuesSpan);\n\n      if (absoluteSpan >= 180) {\n        const numSubIntervals = absoluteSpan / 180;\n        const step = valuesSpan / numSubIntervals;\n        let nextValue = initialValue + step;\n        const initialTime = curve.times[i - 1];\n        const timeSpan = curve.times[i] - initialTime;\n        const interval = timeSpan / numSubIntervals;\n        let nextTime = initialTime + interval;\n        const interpolatedTimes = [];\n        const interpolatedValues = [];\n\n        while (nextTime < curve.times[i]) {\n          interpolatedTimes.push(nextTime);\n          nextTime += interval;\n          interpolatedValues.push(nextValue);\n          nextValue += step;\n        }\n\n        curve.times = inject(curve.times, i, interpolatedTimes);\n        curve.values = inject(curve.values, i, interpolatedValues);\n      }\n    }\n  }\n\n} // parse an FBX file in ASCII format\n\n\nclass TextParser {\n  getPrevNode() {\n    return this.nodeStack[this.currentIndent - 2];\n  }\n\n  getCurrentNode() {\n    return this.nodeStack[this.currentIndent - 1];\n  }\n\n  getCurrentProp() {\n    return this.currentProp;\n  }\n\n  pushStack(node) {\n    this.nodeStack.push(node);\n    this.currentIndent += 1;\n  }\n\n  popStack() {\n    this.nodeStack.pop();\n    this.currentIndent -= 1;\n  }\n\n  setCurrentProp(val, name) {\n    this.currentProp = val;\n    this.currentPropName = name;\n  }\n\n  parse(text) {\n    this.currentIndent = 0;\n    this.allNodes = new FBXTree();\n    this.nodeStack = [];\n    this.currentProp = [];\n    this.currentPropName = '';\n    const scope = this;\n    const split = text.split(/[\\r\\n]+/);\n    split.forEach(function (line, i) {\n      const matchComment = line.match(/^[\\s\\t]*;/);\n      const matchEmpty = line.match(/^[\\s\\t]*$/);\n      if (matchComment || matchEmpty) return;\n      const matchBeginning = line.match('^\\\\t{' + scope.currentIndent + '}(\\\\w+):(.*){', '');\n      const matchProperty = line.match('^\\\\t{' + scope.currentIndent + '}(\\\\w+):[\\\\s\\\\t\\\\r\\\\n](.*)');\n      const matchEnd = line.match('^\\\\t{' + (scope.currentIndent - 1) + '}}');\n\n      if (matchBeginning) {\n        scope.parseNodeBegin(line, matchBeginning);\n      } else if (matchProperty) {\n        scope.parseNodeProperty(line, matchProperty, split[++i]);\n      } else if (matchEnd) {\n        scope.popStack();\n      } else if (line.match(/^[^\\s\\t}]/)) {\n        // large arrays are split over multiple lines terminated with a ',' character\n        // if this is encountered the line needs to be joined to the previous line\n        scope.parseNodePropertyContinued(line);\n      }\n    });\n    return this.allNodes;\n  }\n\n  parseNodeBegin(line, property) {\n    const nodeName = property[1].trim().replace(/^\"/, '').replace(/\"$/, '');\n    const nodeAttrs = property[2].split(',').map(function (attr) {\n      return attr.trim().replace(/^\"/, '').replace(/\"$/, '');\n    });\n    const node = {\n      name: nodeName\n    };\n    const attrs = this.parseNodeAttr(nodeAttrs);\n    const currentNode = this.getCurrentNode(); // a top node\n\n    if (this.currentIndent === 0) {\n      this.allNodes.add(nodeName, node);\n    } else {\n      // a subnode\n      // if the subnode already exists, append it\n      if (nodeName in currentNode) {\n        // special case Pose needs PoseNodes as an array\n        if (nodeName === 'PoseNode') {\n          currentNode.PoseNode.push(node);\n        } else if (currentNode[nodeName].id !== undefined) {\n          currentNode[nodeName] = {};\n          currentNode[nodeName][currentNode[nodeName].id] = currentNode[nodeName];\n        }\n\n        if (attrs.id !== '') currentNode[nodeName][attrs.id] = node;\n      } else if (typeof attrs.id === 'number') {\n        currentNode[nodeName] = {};\n        currentNode[nodeName][attrs.id] = node;\n      } else if (nodeName !== 'Properties70') {\n        if (nodeName === 'PoseNode') currentNode[nodeName] = [node];else currentNode[nodeName] = node;\n      }\n    }\n\n    if (typeof attrs.id === 'number') node.id = attrs.id;\n    if (attrs.name !== '') node.attrName = attrs.name;\n    if (attrs.type !== '') node.attrType = attrs.type;\n    this.pushStack(node);\n  }\n\n  parseNodeAttr(attrs) {\n    let id = attrs[0];\n\n    if (attrs[0] !== '') {\n      id = parseInt(attrs[0]);\n\n      if (isNaN(id)) {\n        id = attrs[0];\n      }\n    }\n\n    let name = '',\n        type = '';\n\n    if (attrs.length > 1) {\n      name = attrs[1].replace(/^(\\w+)::/, '');\n      type = attrs[2];\n    }\n\n    return {\n      id: id,\n      name: name,\n      type: type\n    };\n  }\n\n  parseNodeProperty(line, property, contentLine) {\n    let propName = property[1].replace(/^\"/, '').replace(/\"$/, '').trim();\n    let propValue = property[2].replace(/^\"/, '').replace(/\"$/, '').trim(); // for special case: base64 image data follows \"Content: ,\" line\n    //\tContent: ,\n    //\t \"/9j/4RDaRXhpZgAATU0A...\"\n\n    if (propName === 'Content' && propValue === ',') {\n      propValue = contentLine.replace(/\"/g, '').replace(/,$/, '').trim();\n    }\n\n    const currentNode = this.getCurrentNode();\n    const parentName = currentNode.name;\n\n    if (parentName === 'Properties70') {\n      this.parseNodeSpecialProperty(line, propName, propValue);\n      return;\n    } // Connections\n\n\n    if (propName === 'C') {\n      const connProps = propValue.split(',').slice(1);\n      const from = parseInt(connProps[0]);\n      const to = parseInt(connProps[1]);\n      let rest = propValue.split(',').slice(3);\n      rest = rest.map(function (elem) {\n        return elem.trim().replace(/^\"/, '');\n      });\n      propName = 'connections';\n      propValue = [from, to];\n      append(propValue, rest);\n\n      if (currentNode[propName] === undefined) {\n        currentNode[propName] = [];\n      }\n    } // Node\n\n\n    if (propName === 'Node') currentNode.id = propValue; // connections\n\n    if (propName in currentNode && Array.isArray(currentNode[propName])) {\n      currentNode[propName].push(propValue);\n    } else {\n      if (propName !== 'a') currentNode[propName] = propValue;else currentNode.a = propValue;\n    }\n\n    this.setCurrentProp(currentNode, propName); // convert string to array, unless it ends in ',' in which case more will be added to it\n\n    if (propName === 'a' && propValue.slice(-1) !== ',') {\n      currentNode.a = parseNumberArray(propValue);\n    }\n  }\n\n  parseNodePropertyContinued(line) {\n    const currentNode = this.getCurrentNode();\n    currentNode.a += line; // if the line doesn't end in ',' we have reached the end of the property value\n    // so convert the string to an array\n\n    if (line.slice(-1) !== ',') {\n      currentNode.a = parseNumberArray(currentNode.a);\n    }\n  } // parse \"Property70\"\n\n\n  parseNodeSpecialProperty(line, propName, propValue) {\n    // split this\n    // P: \"Lcl Scaling\", \"Lcl Scaling\", \"\", \"A\",1,1,1\n    // into array like below\n    // [\"Lcl Scaling\", \"Lcl Scaling\", \"\", \"A\", \"1,1,1\" ]\n    const props = propValue.split('\",').map(function (prop) {\n      return prop.trim().replace(/^\\\"/, '').replace(/\\s/, '_');\n    });\n    const innerPropName = props[0];\n    const innerPropType1 = props[1];\n    const innerPropType2 = props[2];\n    const innerPropFlag = props[3];\n    let innerPropValue = props[4]; // cast values where needed, otherwise leave as strings\n\n    switch (innerPropType1) {\n      case 'int':\n      case 'enum':\n      case 'bool':\n      case 'ULongLong':\n      case 'double':\n      case 'Number':\n      case 'FieldOfView':\n        innerPropValue = parseFloat(innerPropValue);\n        break;\n\n      case 'Color':\n      case 'ColorRGB':\n      case 'Vector3D':\n      case 'Lcl_Translation':\n      case 'Lcl_Rotation':\n      case 'Lcl_Scaling':\n        innerPropValue = parseNumberArray(innerPropValue);\n        break;\n    } // CAUTION: these props must append to parent's parent\n\n\n    this.getPrevNode()[innerPropName] = {\n      type: innerPropType1,\n      type2: innerPropType2,\n      flag: innerPropFlag,\n      value: innerPropValue\n    };\n    this.setCurrentProp(this.getPrevNode(), innerPropName);\n  }\n\n} // Parse an FBX file in Binary format\n\n\nclass BinaryParser {\n  parse(buffer) {\n    const reader = new BinaryReader(buffer);\n    reader.skip(23); // skip magic 23 bytes\n\n    const version = reader.getUint32();\n\n    if (version < 6400) {\n      throw new Error('THREE.FBXLoader: FBX version not supported, FileVersion: ' + version);\n    }\n\n    const allNodes = new FBXTree();\n\n    while (!this.endOfContent(reader)) {\n      const node = this.parseNode(reader, version);\n      if (node !== null) allNodes.add(node.name, node);\n    }\n\n    return allNodes;\n  } // Check if reader has reached the end of content.\n\n\n  endOfContent(reader) {\n    // footer size: 160bytes + 16-byte alignment padding\n    // - 16bytes: magic\n    // - padding til 16-byte alignment (at least 1byte?)\n    //\t(seems like some exporters embed fixed 15 or 16bytes?)\n    // - 4bytes: magic\n    // - 4bytes: version\n    // - 120bytes: zero\n    // - 16bytes: magic\n    if (reader.size() % 16 === 0) {\n      return (reader.getOffset() + 160 + 16 & ~0xf) >= reader.size();\n    } else {\n      return reader.getOffset() + 160 + 16 >= reader.size();\n    }\n  } // recursively parse nodes until the end of the file is reached\n\n\n  parseNode(reader, version) {\n    const node = {}; // The first three data sizes depends on version.\n\n    const endOffset = version >= 7500 ? reader.getUint64() : reader.getUint32();\n    const numProperties = version >= 7500 ? reader.getUint64() : reader.getUint32();\n    version >= 7500 ? reader.getUint64() : reader.getUint32(); // the returned propertyListLen is not used\n\n    const nameLen = reader.getUint8();\n    const name = reader.getString(nameLen); // Regards this node as NULL-record if endOffset is zero\n\n    if (endOffset === 0) return null;\n    const propertyList = [];\n\n    for (let i = 0; i < numProperties; i++) {\n      propertyList.push(this.parseProperty(reader));\n    } // Regards the first three elements in propertyList as id, attrName, and attrType\n\n\n    const id = propertyList.length > 0 ? propertyList[0] : '';\n    const attrName = propertyList.length > 1 ? propertyList[1] : '';\n    const attrType = propertyList.length > 2 ? propertyList[2] : ''; // check if this node represents just a single property\n    // like (name, 0) set or (name2, [0, 1, 2]) set of {name: 0, name2: [0, 1, 2]}\n\n    node.singleProperty = numProperties === 1 && reader.getOffset() === endOffset ? true : false;\n\n    while (endOffset > reader.getOffset()) {\n      const subNode = this.parseNode(reader, version);\n      if (subNode !== null) this.parseSubNode(name, node, subNode);\n    }\n\n    node.propertyList = propertyList; // raw property list used by parent\n\n    if (typeof id === 'number') node.id = id;\n    if (attrName !== '') node.attrName = attrName;\n    if (attrType !== '') node.attrType = attrType;\n    if (name !== '') node.name = name;\n    return node;\n  }\n\n  parseSubNode(name, node, subNode) {\n    // special case: child node is single property\n    if (subNode.singleProperty === true) {\n      const value = subNode.propertyList[0];\n\n      if (Array.isArray(value)) {\n        node[subNode.name] = subNode;\n        subNode.a = value;\n      } else {\n        node[subNode.name] = value;\n      }\n    } else if (name === 'Connections' && subNode.name === 'C') {\n      const array = [];\n      subNode.propertyList.forEach(function (property, i) {\n        // first Connection is FBX type (OO, OP, etc.). We'll discard these\n        if (i !== 0) array.push(property);\n      });\n\n      if (node.connections === undefined) {\n        node.connections = [];\n      }\n\n      node.connections.push(array);\n    } else if (subNode.name === 'Properties70') {\n      const keys = Object.keys(subNode);\n      keys.forEach(function (key) {\n        node[key] = subNode[key];\n      });\n    } else if (name === 'Properties70' && subNode.name === 'P') {\n      let innerPropName = subNode.propertyList[0];\n      let innerPropType1 = subNode.propertyList[1];\n      const innerPropType2 = subNode.propertyList[2];\n      const innerPropFlag = subNode.propertyList[3];\n      let innerPropValue;\n      if (innerPropName.indexOf('Lcl ') === 0) innerPropName = innerPropName.replace('Lcl ', 'Lcl_');\n      if (innerPropType1.indexOf('Lcl ') === 0) innerPropType1 = innerPropType1.replace('Lcl ', 'Lcl_');\n\n      if (innerPropType1 === 'Color' || innerPropType1 === 'ColorRGB' || innerPropType1 === 'Vector' || innerPropType1 === 'Vector3D' || innerPropType1.indexOf('Lcl_') === 0) {\n        innerPropValue = [subNode.propertyList[4], subNode.propertyList[5], subNode.propertyList[6]];\n      } else {\n        innerPropValue = subNode.propertyList[4];\n      } // this will be copied to parent, see above\n\n\n      node[innerPropName] = {\n        type: innerPropType1,\n        type2: innerPropType2,\n        flag: innerPropFlag,\n        value: innerPropValue\n      };\n    } else if (node[subNode.name] === undefined) {\n      if (typeof subNode.id === 'number') {\n        node[subNode.name] = {};\n        node[subNode.name][subNode.id] = subNode;\n      } else {\n        node[subNode.name] = subNode;\n      }\n    } else {\n      if (subNode.name === 'PoseNode') {\n        if (!Array.isArray(node[subNode.name])) {\n          node[subNode.name] = [node[subNode.name]];\n        }\n\n        node[subNode.name].push(subNode);\n      } else if (node[subNode.name][subNode.id] === undefined) {\n        node[subNode.name][subNode.id] = subNode;\n      }\n    }\n  }\n\n  parseProperty(reader) {\n    const type = reader.getString(1);\n    let length;\n\n    switch (type) {\n      case 'C':\n        return reader.getBoolean();\n\n      case 'D':\n        return reader.getFloat64();\n\n      case 'F':\n        return reader.getFloat32();\n\n      case 'I':\n        return reader.getInt32();\n\n      case 'L':\n        return reader.getInt64();\n\n      case 'R':\n        length = reader.getUint32();\n        return reader.getArrayBuffer(length);\n\n      case 'S':\n        length = reader.getUint32();\n        return reader.getString(length);\n\n      case 'Y':\n        return reader.getInt16();\n\n      case 'b':\n      case 'c':\n      case 'd':\n      case 'f':\n      case 'i':\n      case 'l':\n        const arrayLength = reader.getUint32();\n        const encoding = reader.getUint32(); // 0: non-compressed, 1: compressed\n\n        const compressedLength = reader.getUint32();\n\n        if (encoding === 0) {\n          switch (type) {\n            case 'b':\n            case 'c':\n              return reader.getBooleanArray(arrayLength);\n\n            case 'd':\n              return reader.getFloat64Array(arrayLength);\n\n            case 'f':\n              return reader.getFloat32Array(arrayLength);\n\n            case 'i':\n              return reader.getInt32Array(arrayLength);\n\n            case 'l':\n              return reader.getInt64Array(arrayLength);\n          }\n        }\n\n        const data = unzlibSync(new Uint8Array(reader.getArrayBuffer(compressedLength))); // eslint-disable-line no-undef\n\n        const reader2 = new BinaryReader(data.buffer);\n\n        switch (type) {\n          case 'b':\n          case 'c':\n            return reader2.getBooleanArray(arrayLength);\n\n          case 'd':\n            return reader2.getFloat64Array(arrayLength);\n\n          case 'f':\n            return reader2.getFloat32Array(arrayLength);\n\n          case 'i':\n            return reader2.getInt32Array(arrayLength);\n\n          case 'l':\n            return reader2.getInt64Array(arrayLength);\n        }\n\n      default:\n        throw new Error('THREE.FBXLoader: Unknown property type ' + type);\n    }\n  }\n\n}\n\nclass BinaryReader {\n  constructor(buffer, littleEndian) {\n    this.dv = new DataView(buffer);\n    this.offset = 0;\n    this.littleEndian = littleEndian !== undefined ? littleEndian : true;\n  }\n\n  getOffset() {\n    return this.offset;\n  }\n\n  size() {\n    return this.dv.buffer.byteLength;\n  }\n\n  skip(length) {\n    this.offset += length;\n  } // seems like true/false representation depends on exporter.\n  // true: 1 or 'Y'(=0x59), false: 0 or 'T'(=0x54)\n  // then sees LSB.\n\n\n  getBoolean() {\n    return (this.getUint8() & 1) === 1;\n  }\n\n  getBooleanArray(size) {\n    const a = [];\n\n    for (let i = 0; i < size; i++) {\n      a.push(this.getBoolean());\n    }\n\n    return a;\n  }\n\n  getUint8() {\n    const value = this.dv.getUint8(this.offset);\n    this.offset += 1;\n    return value;\n  }\n\n  getInt16() {\n    const value = this.dv.getInt16(this.offset, this.littleEndian);\n    this.offset += 2;\n    return value;\n  }\n\n  getInt32() {\n    const value = this.dv.getInt32(this.offset, this.littleEndian);\n    this.offset += 4;\n    return value;\n  }\n\n  getInt32Array(size) {\n    const a = [];\n\n    for (let i = 0; i < size; i++) {\n      a.push(this.getInt32());\n    }\n\n    return a;\n  }\n\n  getUint32() {\n    const value = this.dv.getUint32(this.offset, this.littleEndian);\n    this.offset += 4;\n    return value;\n  } // JavaScript doesn't support 64-bit integer so calculate this here\n  // 1 << 32 will return 1 so using multiply operation instead here.\n  // There's a possibility that this method returns wrong value if the value\n  // is out of the range between Number.MAX_SAFE_INTEGER and Number.MIN_SAFE_INTEGER.\n  // TODO: safely handle 64-bit integer\n\n\n  getInt64() {\n    let low, high;\n\n    if (this.littleEndian) {\n      low = this.getUint32();\n      high = this.getUint32();\n    } else {\n      high = this.getUint32();\n      low = this.getUint32();\n    } // calculate negative value\n\n\n    if (high & 0x80000000) {\n      high = ~high & 0xffffffff;\n      low = ~low & 0xffffffff;\n      if (low === 0xffffffff) high = high + 1 & 0xffffffff;\n      low = low + 1 & 0xffffffff;\n      return -(high * 0x100000000 + low);\n    }\n\n    return high * 0x100000000 + low;\n  }\n\n  getInt64Array(size) {\n    const a = [];\n\n    for (let i = 0; i < size; i++) {\n      a.push(this.getInt64());\n    }\n\n    return a;\n  } // Note: see getInt64() comment\n\n\n  getUint64() {\n    let low, high;\n\n    if (this.littleEndian) {\n      low = this.getUint32();\n      high = this.getUint32();\n    } else {\n      high = this.getUint32();\n      low = this.getUint32();\n    }\n\n    return high * 0x100000000 + low;\n  }\n\n  getFloat32() {\n    const value = this.dv.getFloat32(this.offset, this.littleEndian);\n    this.offset += 4;\n    return value;\n  }\n\n  getFloat32Array(size) {\n    const a = [];\n\n    for (let i = 0; i < size; i++) {\n      a.push(this.getFloat32());\n    }\n\n    return a;\n  }\n\n  getFloat64() {\n    const value = this.dv.getFloat64(this.offset, this.littleEndian);\n    this.offset += 8;\n    return value;\n  }\n\n  getFloat64Array(size) {\n    const a = [];\n\n    for (let i = 0; i < size; i++) {\n      a.push(this.getFloat64());\n    }\n\n    return a;\n  }\n\n  getArrayBuffer(size) {\n    const value = this.dv.buffer.slice(this.offset, this.offset + size);\n    this.offset += size;\n    return value;\n  }\n\n  getString(size) {\n    // note: safari 9 doesn't support Uint8Array.indexOf; create intermediate array instead\n    let a = [];\n\n    for (let i = 0; i < size; i++) {\n      a[i] = this.getUint8();\n    }\n\n    const nullByte = a.indexOf(0);\n    if (nullByte >= 0) a = a.slice(0, nullByte);\n    return LoaderUtils.decodeText(new Uint8Array(a));\n  }\n\n} // FBXTree holds a representation of the FBX data, returned by the TextParser ( FBX ASCII format)\n// and BinaryParser( FBX Binary format)\n\n\nclass FBXTree {\n  add(key, val) {\n    this[key] = val;\n  }\n\n} // ************** UTILITY FUNCTIONS **************\n\n\nfunction isFbxFormatBinary(buffer) {\n  const CORRECT = 'Kaydara\\u0020FBX\\u0020Binary\\u0020\\u0020\\0';\n  return buffer.byteLength >= CORRECT.length && CORRECT === convertArrayBufferToString(buffer, 0, CORRECT.length);\n}\n\nfunction isFbxFormatASCII(text) {\n  const CORRECT = ['K', 'a', 'y', 'd', 'a', 'r', 'a', '\\\\', 'F', 'B', 'X', '\\\\', 'B', 'i', 'n', 'a', 'r', 'y', '\\\\', '\\\\'];\n  let cursor = 0;\n\n  function read(offset) {\n    const result = text[offset - 1];\n    text = text.slice(cursor + offset);\n    cursor++;\n    return result;\n  }\n\n  for (let i = 0; i < CORRECT.length; ++i) {\n    const num = read(1);\n\n    if (num === CORRECT[i]) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nfunction getFbxVersion(text) {\n  const versionRegExp = /FBXVersion: (\\d+)/;\n  const match = text.match(versionRegExp);\n\n  if (match) {\n    const version = parseInt(match[1]);\n    return version;\n  }\n\n  throw new Error('THREE.FBXLoader: Cannot find the version number for the file given.');\n} // Converts FBX ticks into real time seconds.\n\n\nfunction convertFBXTimeToSeconds(time) {\n  return time / 46186158000;\n}\n\nconst dataArray = []; // extracts the data from the correct position in the FBX array based on indexing type\n\nfunction getData(polygonVertexIndex, polygonIndex, vertexIndex, infoObject) {\n  let index;\n\n  switch (infoObject.mappingType) {\n    case 'ByPolygonVertex':\n      index = polygonVertexIndex;\n      break;\n\n    case 'ByPolygon':\n      index = polygonIndex;\n      break;\n\n    case 'ByVertice':\n      index = vertexIndex;\n      break;\n\n    case 'AllSame':\n      index = infoObject.indices[0];\n      break;\n\n    default:\n      console.warn('THREE.FBXLoader: unknown attribute mapping type ' + infoObject.mappingType);\n  }\n\n  if (infoObject.referenceType === 'IndexToDirect') index = infoObject.indices[index];\n  const from = index * infoObject.dataSize;\n  const to = from + infoObject.dataSize;\n  return slice(dataArray, infoObject.buffer, from, to);\n}\n\nconst tempEuler = new Euler();\nconst tempVec = new Vector3(); // generate transformation from FBX transform data\n// ref: https://help.autodesk.com/view/FBX/2017/ENU/?guid=__files_GUID_10CDD63C_79C1_4F2D_BB28_AD2BE65A02ED_htm\n// ref: http://docs.autodesk.com/FBX/2014/ENU/FBX-SDK-Documentation/index.html?url=cpp_ref/_transformations_2main_8cxx-example.html,topicNumber=cpp_ref__transformations_2main_8cxx_example_htmlfc10a1e1-b18d-4e72-9dc0-70d0f1959f5e\n\nfunction generateTransform(transformData) {\n  const lTranslationM = new Matrix4();\n  const lPreRotationM = new Matrix4();\n  const lRotationM = new Matrix4();\n  const lPostRotationM = new Matrix4();\n  const lScalingM = new Matrix4();\n  const lScalingPivotM = new Matrix4();\n  const lScalingOffsetM = new Matrix4();\n  const lRotationOffsetM = new Matrix4();\n  const lRotationPivotM = new Matrix4();\n  const lParentGX = new Matrix4();\n  const lParentLX = new Matrix4();\n  const lGlobalT = new Matrix4();\n  const inheritType = transformData.inheritType ? transformData.inheritType : 0;\n  if (transformData.translation) lTranslationM.setPosition(tempVec.fromArray(transformData.translation));\n\n  if (transformData.preRotation) {\n    const array = transformData.preRotation.map(MathUtils.degToRad);\n    array.push(transformData.eulerOrder);\n    lPreRotationM.makeRotationFromEuler(tempEuler.fromArray(array));\n  }\n\n  if (transformData.rotation) {\n    const array = transformData.rotation.map(MathUtils.degToRad);\n    array.push(transformData.eulerOrder);\n    lRotationM.makeRotationFromEuler(tempEuler.fromArray(array));\n  }\n\n  if (transformData.postRotation) {\n    const array = transformData.postRotation.map(MathUtils.degToRad);\n    array.push(transformData.eulerOrder);\n    lPostRotationM.makeRotationFromEuler(tempEuler.fromArray(array));\n    lPostRotationM.invert();\n  }\n\n  if (transformData.scale) lScalingM.scale(tempVec.fromArray(transformData.scale)); // Pivots and offsets\n\n  if (transformData.scalingOffset) lScalingOffsetM.setPosition(tempVec.fromArray(transformData.scalingOffset));\n  if (transformData.scalingPivot) lScalingPivotM.setPosition(tempVec.fromArray(transformData.scalingPivot));\n  if (transformData.rotationOffset) lRotationOffsetM.setPosition(tempVec.fromArray(transformData.rotationOffset));\n  if (transformData.rotationPivot) lRotationPivotM.setPosition(tempVec.fromArray(transformData.rotationPivot)); // parent transform\n\n  if (transformData.parentMatrixWorld) {\n    lParentLX.copy(transformData.parentMatrix);\n    lParentGX.copy(transformData.parentMatrixWorld);\n  }\n\n  const lLRM = new Matrix4().copy(lPreRotationM).multiply(lRotationM).multiply(lPostRotationM); // Global Rotation\n\n  const lParentGRM = new Matrix4();\n  lParentGRM.extractRotation(lParentGX); // Global Shear*Scaling\n\n  const lParentTM = new Matrix4();\n  lParentTM.copyPosition(lParentGX);\n  const lParentGSM = new Matrix4();\n  const lParentGRSM = new Matrix4().copy(lParentTM).invert().multiply(lParentGX);\n  lParentGSM.copy(lParentGRM).invert().multiply(lParentGRSM);\n  const lLSM = lScalingM;\n  const lGlobalRS = new Matrix4();\n\n  if (inheritType === 0) {\n    lGlobalRS.copy(lParentGRM).multiply(lLRM).multiply(lParentGSM).multiply(lLSM);\n  } else if (inheritType === 1) {\n    lGlobalRS.copy(lParentGRM).multiply(lParentGSM).multiply(lLRM).multiply(lLSM);\n  } else {\n    const lParentLSM = new Matrix4().scale(new Vector3().setFromMatrixScale(lParentLX));\n    const lParentLSM_inv = new Matrix4().copy(lParentLSM).invert();\n    const lParentGSM_noLocal = new Matrix4().copy(lParentGSM).multiply(lParentLSM_inv);\n    lGlobalRS.copy(lParentGRM).multiply(lLRM).multiply(lParentGSM_noLocal).multiply(lLSM);\n  }\n\n  const lRotationPivotM_inv = new Matrix4();\n  lRotationPivotM_inv.copy(lRotationPivotM).invert();\n  const lScalingPivotM_inv = new Matrix4();\n  lScalingPivotM_inv.copy(lScalingPivotM).invert(); // Calculate the local transform matrix\n\n  let lTransform = new Matrix4();\n  lTransform.copy(lTranslationM).multiply(lRotationOffsetM).multiply(lRotationPivotM).multiply(lPreRotationM).multiply(lRotationM).multiply(lPostRotationM).multiply(lRotationPivotM_inv).multiply(lScalingOffsetM).multiply(lScalingPivotM).multiply(lScalingM).multiply(lScalingPivotM_inv);\n  const lLocalTWithAllPivotAndOffsetInfo = new Matrix4().copyPosition(lTransform);\n  const lGlobalTranslation = new Matrix4().copy(lParentGX).multiply(lLocalTWithAllPivotAndOffsetInfo);\n  lGlobalT.copyPosition(lGlobalTranslation);\n  lTransform = new Matrix4().copy(lGlobalT).multiply(lGlobalRS); // from global to local\n\n  lTransform.premultiply(lParentGX.invert());\n  return lTransform;\n} // Returns the three.js intrinsic Euler order corresponding to FBX extrinsic Euler order\n// ref: http://help.autodesk.com/view/FBX/2017/ENU/?guid=__cpp_ref_class_fbx_euler_html\n\n\nfunction getEulerOrder(order) {\n  order = order || 0;\n  const enums = ['ZYX', // -> XYZ extrinsic\n  'YZX', // -> XZY extrinsic\n  'XZY', // -> YZX extrinsic\n  'ZXY', // -> YXZ extrinsic\n  'YXZ', // -> ZXY extrinsic\n  'XYZ' // -> ZYX extrinsic\n  //'SphericXYZ', // not possible to support\n  ];\n\n  if (order === 6) {\n    console.warn('THREE.FBXLoader: unsupported Euler Order: Spherical XYZ. Animations and rotations may be incorrect.');\n    return enums[0];\n  }\n\n  return enums[order];\n} // Parses comma separated list of numbers and returns them an array.\n// Used internally by the TextParser\n\n\nfunction parseNumberArray(value) {\n  const array = value.split(',').map(function (val) {\n    return parseFloat(val);\n  });\n  return array;\n}\n\nfunction convertArrayBufferToString(buffer, from, to) {\n  if (from === undefined) from = 0;\n  if (to === undefined) to = buffer.byteLength;\n  return LoaderUtils.decodeText(new Uint8Array(buffer, from, to));\n}\n\nfunction append(a, b) {\n  for (let i = 0, j = a.length, l = b.length; i < l; i++, j++) {\n    a[j] = b[i];\n  }\n}\n\nfunction slice(a, b, from, to) {\n  for (let i = from, j = 0; i < to; i++, j++) {\n    a[j] = b[i];\n  }\n\n  return a;\n} // inject array a2 into array a1 at index\n\n\nfunction inject(a1, index, a2) {\n  return a1.slice(0, index).concat(a2).concat(a1.slice(index));\n}\n\nexport { FBXLoader };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}