{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.validateRedundantMethods = exports.validateMissingCstMethods = exports.validateVisitor = exports.CstVisitorDefinitionError = exports.createBaseVisitorConstructorWithDefaults = exports.createBaseSemanticVisitorConstructor = exports.defaultVisit = void 0;\nvar utils_1 = require(\"@chevrotain/utils\");\nvar lang_extensions_1 = require(\"../../lang/lang_extensions\");\nfunction defaultVisit(ctx, param) {\n  var childrenNames = utils_1.keys(ctx);\n  var childrenNamesLength = childrenNames.length;\n  for (var i = 0; i < childrenNamesLength; i++) {\n    var currChildName = childrenNames[i];\n    var currChildArray = ctx[currChildName];\n    var currChildArrayLength = currChildArray.length;\n    for (var j = 0; j < currChildArrayLength; j++) {\n      var currChild = currChildArray[j];\n      // distinction between Tokens Children and CstNode children\n      if (currChild.tokenTypeIdx === undefined) {\n        this[currChild.name](currChild.children, param);\n      }\n    }\n  }\n  // defaultVisit does not support generic out param\n  return undefined;\n}\nexports.defaultVisit = defaultVisit;\nfunction createBaseSemanticVisitorConstructor(grammarName, ruleNames) {\n  var derivedConstructor = function () {};\n  // can be overwritten according to:\n  // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/\n  // name?redirectlocale=en-US&redirectslug=JavaScript%2FReference%2FGlobal_Objects%2FFunction%2Fname\n  lang_extensions_1.defineNameProp(derivedConstructor, grammarName + \"BaseSemantics\");\n  var semanticProto = {\n    visit: function (cstNode, param) {\n      // enables writing more concise visitor methods when CstNode has only a single child\n      if (utils_1.isArray(cstNode)) {\n        // A CST Node's children dictionary can never have empty arrays as values\n        // If a key is defined there will be at least one element in the corresponding value array.\n        cstNode = cstNode[0];\n      }\n      // enables passing optional CstNodes concisely.\n      if (utils_1.isUndefined(cstNode)) {\n        return undefined;\n      }\n      return this[cstNode.name](cstNode.children, param);\n    },\n    validateVisitor: function () {\n      var semanticDefinitionErrors = validateVisitor(this, ruleNames);\n      if (!utils_1.isEmpty(semanticDefinitionErrors)) {\n        var errorMessages = utils_1.map(semanticDefinitionErrors, function (currDefError) {\n          return currDefError.msg;\n        });\n        throw Error(\"Errors Detected in CST Visitor <\" + lang_extensions_1.functionName(this.constructor) + \">:\\n\\t\" + (\"\" + errorMessages.join(\"\\n\\n\").replace(/\\n/g, \"\\n\\t\")));\n      }\n    }\n  };\n  derivedConstructor.prototype = semanticProto;\n  derivedConstructor.prototype.constructor = derivedConstructor;\n  derivedConstructor._RULE_NAMES = ruleNames;\n  return derivedConstructor;\n}\nexports.createBaseSemanticVisitorConstructor = createBaseSemanticVisitorConstructor;\nfunction createBaseVisitorConstructorWithDefaults(grammarName, ruleNames, baseConstructor) {\n  var derivedConstructor = function () {};\n  // can be overwritten according to:\n  // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/\n  // name?redirectlocale=en-US&redirectslug=JavaScript%2FReference%2FGlobal_Objects%2FFunction%2Fname\n  lang_extensions_1.defineNameProp(derivedConstructor, grammarName + \"BaseSemanticsWithDefaults\");\n  var withDefaultsProto = Object.create(baseConstructor.prototype);\n  utils_1.forEach(ruleNames, function (ruleName) {\n    withDefaultsProto[ruleName] = defaultVisit;\n  });\n  derivedConstructor.prototype = withDefaultsProto;\n  derivedConstructor.prototype.constructor = derivedConstructor;\n  return derivedConstructor;\n}\nexports.createBaseVisitorConstructorWithDefaults = createBaseVisitorConstructorWithDefaults;\nvar CstVisitorDefinitionError;\n(function (CstVisitorDefinitionError) {\n  CstVisitorDefinitionError[CstVisitorDefinitionError[\"REDUNDANT_METHOD\"] = 0] = \"REDUNDANT_METHOD\";\n  CstVisitorDefinitionError[CstVisitorDefinitionError[\"MISSING_METHOD\"] = 1] = \"MISSING_METHOD\";\n})(CstVisitorDefinitionError = exports.CstVisitorDefinitionError || (exports.CstVisitorDefinitionError = {}));\nfunction validateVisitor(visitorInstance, ruleNames) {\n  var missingErrors = validateMissingCstMethods(visitorInstance, ruleNames);\n  var redundantErrors = validateRedundantMethods(visitorInstance, ruleNames);\n  return missingErrors.concat(redundantErrors);\n}\nexports.validateVisitor = validateVisitor;\nfunction validateMissingCstMethods(visitorInstance, ruleNames) {\n  var errors = utils_1.map(ruleNames, function (currRuleName) {\n    if (!utils_1.isFunction(visitorInstance[currRuleName])) {\n      return {\n        msg: \"Missing visitor method: <\" + currRuleName + \"> on \" + lang_extensions_1.functionName(visitorInstance.constructor) + \" CST Visitor.\",\n        type: CstVisitorDefinitionError.MISSING_METHOD,\n        methodName: currRuleName\n      };\n    }\n  });\n  return utils_1.compact(errors);\n}\nexports.validateMissingCstMethods = validateMissingCstMethods;\nvar VALID_PROP_NAMES = [\"constructor\", \"visit\", \"validateVisitor\"];\nfunction validateRedundantMethods(visitorInstance, ruleNames) {\n  var errors = [];\n  for (var prop in visitorInstance) {\n    if (utils_1.isFunction(visitorInstance[prop]) && !utils_1.contains(VALID_PROP_NAMES, prop) && !utils_1.contains(ruleNames, prop)) {\n      errors.push({\n        msg: \"Redundant visitor method: <\" + prop + \"> on \" + lang_extensions_1.functionName(visitorInstance.constructor) + \" CST Visitor\\n\" + \"There is no Grammar Rule corresponding to this method's name.\\n\",\n        type: CstVisitorDefinitionError.REDUNDANT_METHOD,\n        methodName: prop\n      });\n    }\n  }\n  return errors;\n}\nexports.validateRedundantMethods = validateRedundantMethods;","map":{"version":3,"names":["utils_1","require","lang_extensions_1","defaultVisit","ctx","param","childrenNames","keys","childrenNamesLength","length","i","currChildName","currChildArray","currChildArrayLength","j","currChild","tokenTypeIdx","undefined","name","children","exports","createBaseSemanticVisitorConstructor","grammarName","ruleNames","derivedConstructor","defineNameProp","semanticProto","visit","cstNode","isArray","isUndefined","validateVisitor","semanticDefinitionErrors","isEmpty","errorMessages","map","currDefError","msg","Error","functionName","constructor","join","replace","prototype","_RULE_NAMES","createBaseVisitorConstructorWithDefaults","baseConstructor","withDefaultsProto","Object","create","forEach","ruleName","CstVisitorDefinitionError","visitorInstance","missingErrors","validateMissingCstMethods","redundantErrors","validateRedundantMethods","concat","errors","currRuleName","isFunction","type","MISSING_METHOD","methodName","compact","VALID_PROP_NAMES","prop","contains","push","REDUNDANT_METHOD"],"sources":["C:\\Users\\Work\\node_modules\\chevrotain\\src\\parse\\cst\\cst_visitor.ts"],"sourcesContent":["import {\n  compact,\n  contains,\n  forEach,\n  isArray,\n  isEmpty,\n  isFunction,\n  isUndefined,\n  keys,\n  map\n} from \"@chevrotain/utils\"\nimport { defineNameProp, functionName } from \"../../lang/lang_extensions\"\nimport { ICstVisitor } from \"@chevrotain/types\"\n\nexport function defaultVisit<IN, OUT>(ctx: any, param: IN): OUT {\n  const childrenNames = keys(ctx)\n  const childrenNamesLength = childrenNames.length\n  for (let i = 0; i < childrenNamesLength; i++) {\n    const currChildName = childrenNames[i]\n    const currChildArray = ctx[currChildName]\n    const currChildArrayLength = currChildArray.length\n    for (let j = 0; j < currChildArrayLength; j++) {\n      const currChild: any = currChildArray[j]\n      // distinction between Tokens Children and CstNode children\n      if (currChild.tokenTypeIdx === undefined) {\n        this[currChild.name](currChild.children, param)\n      }\n    }\n  }\n  // defaultVisit does not support generic out param\n  return undefined\n}\n\nexport function createBaseSemanticVisitorConstructor(\n  grammarName: string,\n  ruleNames: string[]\n): {\n  new (...args: any[]): ICstVisitor<any, any>\n} {\n  const derivedConstructor: any = function () {}\n\n  // can be overwritten according to:\n  // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/\n  // name?redirectlocale=en-US&redirectslug=JavaScript%2FReference%2FGlobal_Objects%2FFunction%2Fname\n  defineNameProp(derivedConstructor, grammarName + \"BaseSemantics\")\n\n  const semanticProto = {\n    visit: function (cstNode, param) {\n      // enables writing more concise visitor methods when CstNode has only a single child\n      if (isArray(cstNode)) {\n        // A CST Node's children dictionary can never have empty arrays as values\n        // If a key is defined there will be at least one element in the corresponding value array.\n        cstNode = cstNode[0]\n      }\n\n      // enables passing optional CstNodes concisely.\n      if (isUndefined(cstNode)) {\n        return undefined\n      }\n\n      return this[cstNode.name](cstNode.children, param)\n    },\n\n    validateVisitor: function () {\n      const semanticDefinitionErrors = validateVisitor(this, ruleNames)\n      if (!isEmpty(semanticDefinitionErrors)) {\n        const errorMessages = map(\n          semanticDefinitionErrors,\n          (currDefError) => currDefError.msg\n        )\n        throw Error(\n          `Errors Detected in CST Visitor <${functionName(\n            this.constructor\n          )}>:\\n\\t` + `${errorMessages.join(\"\\n\\n\").replace(/\\n/g, \"\\n\\t\")}`\n        )\n      }\n    }\n  }\n\n  derivedConstructor.prototype = semanticProto\n  derivedConstructor.prototype.constructor = derivedConstructor\n\n  derivedConstructor._RULE_NAMES = ruleNames\n\n  return derivedConstructor\n}\n\nexport function createBaseVisitorConstructorWithDefaults(\n  grammarName: string,\n  ruleNames: string[],\n  baseConstructor: Function\n): {\n  new (...args: any[]): ICstVisitor<any, any>\n} {\n  const derivedConstructor: any = function () {}\n\n  // can be overwritten according to:\n  // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/\n  // name?redirectlocale=en-US&redirectslug=JavaScript%2FReference%2FGlobal_Objects%2FFunction%2Fname\n  defineNameProp(derivedConstructor, grammarName + \"BaseSemanticsWithDefaults\")\n\n  const withDefaultsProto = Object.create(baseConstructor.prototype)\n  forEach(ruleNames, (ruleName) => {\n    withDefaultsProto[ruleName] = defaultVisit\n  })\n\n  derivedConstructor.prototype = withDefaultsProto\n  derivedConstructor.prototype.constructor = derivedConstructor\n\n  return derivedConstructor\n}\n\nexport enum CstVisitorDefinitionError {\n  REDUNDANT_METHOD,\n  MISSING_METHOD\n}\n\nexport interface IVisitorDefinitionError {\n  msg: string\n  type: CstVisitorDefinitionError\n  methodName: string\n}\n\nexport function validateVisitor(\n  visitorInstance: Function,\n  ruleNames: string[]\n): IVisitorDefinitionError[] {\n  const missingErrors = validateMissingCstMethods(visitorInstance, ruleNames)\n  const redundantErrors = validateRedundantMethods(visitorInstance, ruleNames)\n\n  return missingErrors.concat(redundantErrors)\n}\n\nexport function validateMissingCstMethods(\n  visitorInstance: Function,\n  ruleNames: string[]\n): IVisitorDefinitionError[] {\n  const errors: IVisitorDefinitionError[] = map(ruleNames, (currRuleName) => {\n    if (!isFunction(visitorInstance[currRuleName])) {\n      return {\n        msg: `Missing visitor method: <${currRuleName}> on ${functionName(\n          <any>visitorInstance.constructor\n        )} CST Visitor.`,\n        type: CstVisitorDefinitionError.MISSING_METHOD,\n        methodName: currRuleName\n      }\n    }\n  })\n\n  return compact<IVisitorDefinitionError>(errors)\n}\n\nconst VALID_PROP_NAMES = [\"constructor\", \"visit\", \"validateVisitor\"]\nexport function validateRedundantMethods(\n  visitorInstance: Function,\n  ruleNames: string[]\n): IVisitorDefinitionError[] {\n  const errors = []\n\n  for (const prop in visitorInstance) {\n    if (\n      isFunction(visitorInstance[prop]) &&\n      !contains(VALID_PROP_NAMES, prop) &&\n      !contains(ruleNames, prop)\n    ) {\n      errors.push({\n        msg:\n          `Redundant visitor method: <${prop}> on ${functionName(\n            <any>visitorInstance.constructor\n          )} CST Visitor\\n` +\n          `There is no Grammar Rule corresponding to this method's name.\\n`,\n        type: CstVisitorDefinitionError.REDUNDANT_METHOD,\n        methodName: prop\n      })\n    }\n  }\n  return errors\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}