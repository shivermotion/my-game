{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.isTokenType = exports.hasExtendingTokensTypesMapProperty = exports.hasExtendingTokensTypesProperty = exports.hasCategoriesProperty = exports.hasShortKeyProperty = exports.singleAssignCategoriesToksMap = exports.assignCategoriesMapProp = exports.assignCategoriesTokensProp = exports.assignTokenDefaultProps = exports.expandCategories = exports.augmentTokenTypes = exports.tokenIdxToClass = exports.tokenShortNameIdx = exports.tokenStructuredMatcherNoCategories = exports.tokenStructuredMatcher = void 0;\nvar utils_1 = require(\"@chevrotain/utils\");\nfunction tokenStructuredMatcher(tokInstance, tokConstructor) {\n  var instanceType = tokInstance.tokenTypeIdx;\n  if (instanceType === tokConstructor.tokenTypeIdx) {\n    return true;\n  } else {\n    return tokConstructor.isParent === true && tokConstructor.categoryMatchesMap[instanceType] === true;\n  }\n}\nexports.tokenStructuredMatcher = tokenStructuredMatcher;\n// Optimized tokenMatcher in case our grammar does not use token categories\n// Being so tiny it is much more likely to be in-lined and this avoid the function call overhead\nfunction tokenStructuredMatcherNoCategories(token, tokType) {\n  return token.tokenTypeIdx === tokType.tokenTypeIdx;\n}\nexports.tokenStructuredMatcherNoCategories = tokenStructuredMatcherNoCategories;\nexports.tokenShortNameIdx = 1;\nexports.tokenIdxToClass = {};\nfunction augmentTokenTypes(tokenTypes) {\n  // collect the parent Token Types as well.\n  var tokenTypesAndParents = expandCategories(tokenTypes);\n  // add required tokenType and categoryMatches properties\n  assignTokenDefaultProps(tokenTypesAndParents);\n  // fill up the categoryMatches\n  assignCategoriesMapProp(tokenTypesAndParents);\n  assignCategoriesTokensProp(tokenTypesAndParents);\n  utils_1.forEach(tokenTypesAndParents, function (tokType) {\n    tokType.isParent = tokType.categoryMatches.length > 0;\n  });\n}\nexports.augmentTokenTypes = augmentTokenTypes;\nfunction expandCategories(tokenTypes) {\n  var result = utils_1.cloneArr(tokenTypes);\n  var categories = tokenTypes;\n  var searching = true;\n  while (searching) {\n    categories = utils_1.compact(utils_1.flatten(utils_1.map(categories, function (currTokType) {\n      return currTokType.CATEGORIES;\n    })));\n    var newCategories = utils_1.difference(categories, result);\n    result = result.concat(newCategories);\n    if (utils_1.isEmpty(newCategories)) {\n      searching = false;\n    } else {\n      categories = newCategories;\n    }\n  }\n  return result;\n}\nexports.expandCategories = expandCategories;\nfunction assignTokenDefaultProps(tokenTypes) {\n  utils_1.forEach(tokenTypes, function (currTokType) {\n    if (!hasShortKeyProperty(currTokType)) {\n      exports.tokenIdxToClass[exports.tokenShortNameIdx] = currTokType;\n      currTokType.tokenTypeIdx = exports.tokenShortNameIdx++;\n    }\n    // CATEGORIES? : TokenType | TokenType[]\n    if (hasCategoriesProperty(currTokType) && !utils_1.isArray(currTokType.CATEGORIES)\n    // &&\n    // !isUndefined(currTokType.CATEGORIES.PATTERN)\n    ) {\n      currTokType.CATEGORIES = [currTokType.CATEGORIES];\n    }\n    if (!hasCategoriesProperty(currTokType)) {\n      currTokType.CATEGORIES = [];\n    }\n    if (!hasExtendingTokensTypesProperty(currTokType)) {\n      currTokType.categoryMatches = [];\n    }\n    if (!hasExtendingTokensTypesMapProperty(currTokType)) {\n      currTokType.categoryMatchesMap = {};\n    }\n  });\n}\nexports.assignTokenDefaultProps = assignTokenDefaultProps;\nfunction assignCategoriesTokensProp(tokenTypes) {\n  utils_1.forEach(tokenTypes, function (currTokType) {\n    // avoid duplications\n    currTokType.categoryMatches = [];\n    utils_1.forEach(currTokType.categoryMatchesMap, function (val, key) {\n      currTokType.categoryMatches.push(exports.tokenIdxToClass[key].tokenTypeIdx);\n    });\n  });\n}\nexports.assignCategoriesTokensProp = assignCategoriesTokensProp;\nfunction assignCategoriesMapProp(tokenTypes) {\n  utils_1.forEach(tokenTypes, function (currTokType) {\n    singleAssignCategoriesToksMap([], currTokType);\n  });\n}\nexports.assignCategoriesMapProp = assignCategoriesMapProp;\nfunction singleAssignCategoriesToksMap(path, nextNode) {\n  utils_1.forEach(path, function (pathNode) {\n    nextNode.categoryMatchesMap[pathNode.tokenTypeIdx] = true;\n  });\n  utils_1.forEach(nextNode.CATEGORIES, function (nextCategory) {\n    var newPath = path.concat(nextNode);\n    // avoids infinite loops due to cyclic categories.\n    if (!utils_1.contains(newPath, nextCategory)) {\n      singleAssignCategoriesToksMap(newPath, nextCategory);\n    }\n  });\n}\nexports.singleAssignCategoriesToksMap = singleAssignCategoriesToksMap;\nfunction hasShortKeyProperty(tokType) {\n  return utils_1.has(tokType, \"tokenTypeIdx\");\n}\nexports.hasShortKeyProperty = hasShortKeyProperty;\nfunction hasCategoriesProperty(tokType) {\n  return utils_1.has(tokType, \"CATEGORIES\");\n}\nexports.hasCategoriesProperty = hasCategoriesProperty;\nfunction hasExtendingTokensTypesProperty(tokType) {\n  return utils_1.has(tokType, \"categoryMatches\");\n}\nexports.hasExtendingTokensTypesProperty = hasExtendingTokensTypesProperty;\nfunction hasExtendingTokensTypesMapProperty(tokType) {\n  return utils_1.has(tokType, \"categoryMatchesMap\");\n}\nexports.hasExtendingTokensTypesMapProperty = hasExtendingTokensTypesMapProperty;\nfunction isTokenType(tokType) {\n  return utils_1.has(tokType, \"tokenTypeIdx\");\n}\nexports.isTokenType = isTokenType;","map":{"version":3,"names":["utils_1","require","tokenStructuredMatcher","tokInstance","tokConstructor","instanceType","tokenTypeIdx","isParent","categoryMatchesMap","exports","tokenStructuredMatcherNoCategories","token","tokType","tokenShortNameIdx","tokenIdxToClass","augmentTokenTypes","tokenTypes","tokenTypesAndParents","expandCategories","assignTokenDefaultProps","assignCategoriesMapProp","assignCategoriesTokensProp","forEach","categoryMatches","length","result","cloneArr","categories","searching","compact","flatten","map","currTokType","CATEGORIES","newCategories","difference","concat","isEmpty","hasShortKeyProperty","hasCategoriesProperty","isArray","hasExtendingTokensTypesProperty","hasExtendingTokensTypesMapProperty","val","key","push","singleAssignCategoriesToksMap","path","nextNode","pathNode","nextCategory","newPath","contains","has","isTokenType"],"sources":["C:\\Users\\Work\\node_modules\\chevrotain\\src\\scan\\tokens.ts"],"sourcesContent":["import {\n  cloneArr,\n  compact,\n  contains,\n  difference,\n  flatten,\n  forEach,\n  has,\n  isArray,\n  isEmpty,\n  map\n} from \"@chevrotain/utils\"\nimport { TokenType } from \"@chevrotain/types\"\n\nexport function tokenStructuredMatcher(tokInstance, tokConstructor) {\n  const instanceType = tokInstance.tokenTypeIdx\n  if (instanceType === tokConstructor.tokenTypeIdx) {\n    return true\n  } else {\n    return (\n      tokConstructor.isParent === true &&\n      tokConstructor.categoryMatchesMap[instanceType] === true\n    )\n  }\n}\n\n// Optimized tokenMatcher in case our grammar does not use token categories\n// Being so tiny it is much more likely to be in-lined and this avoid the function call overhead\nexport function tokenStructuredMatcherNoCategories(token, tokType) {\n  return token.tokenTypeIdx === tokType.tokenTypeIdx\n}\n\nexport let tokenShortNameIdx = 1\nexport const tokenIdxToClass = {}\n\nexport function augmentTokenTypes(tokenTypes: TokenType[]): void {\n  // collect the parent Token Types as well.\n  const tokenTypesAndParents = expandCategories(tokenTypes)\n\n  // add required tokenType and categoryMatches properties\n  assignTokenDefaultProps(tokenTypesAndParents)\n\n  // fill up the categoryMatches\n  assignCategoriesMapProp(tokenTypesAndParents)\n  assignCategoriesTokensProp(tokenTypesAndParents)\n\n  forEach(tokenTypesAndParents, (tokType) => {\n    tokType.isParent = tokType.categoryMatches.length > 0\n  })\n}\n\nexport function expandCategories(tokenTypes: TokenType[]): TokenType[] {\n  let result = cloneArr(tokenTypes)\n\n  let categories = tokenTypes\n  let searching = true\n  while (searching) {\n    categories = compact(\n      flatten(map(categories, (currTokType) => currTokType.CATEGORIES))\n    )\n\n    const newCategories = difference(categories, result)\n\n    result = result.concat(newCategories)\n\n    if (isEmpty(newCategories)) {\n      searching = false\n    } else {\n      categories = newCategories\n    }\n  }\n  return result\n}\n\nexport function assignTokenDefaultProps(tokenTypes: TokenType[]): void {\n  forEach(tokenTypes, (currTokType) => {\n    if (!hasShortKeyProperty(currTokType)) {\n      tokenIdxToClass[tokenShortNameIdx] = currTokType\n      ;(<any>currTokType).tokenTypeIdx = tokenShortNameIdx++\n    }\n\n    // CATEGORIES? : TokenType | TokenType[]\n    if (\n      hasCategoriesProperty(currTokType) &&\n      !isArray(currTokType.CATEGORIES)\n      // &&\n      // !isUndefined(currTokType.CATEGORIES.PATTERN)\n    ) {\n      currTokType.CATEGORIES = [currTokType.CATEGORIES]\n    }\n\n    if (!hasCategoriesProperty(currTokType)) {\n      currTokType.CATEGORIES = []\n    }\n\n    if (!hasExtendingTokensTypesProperty(currTokType)) {\n      currTokType.categoryMatches = []\n    }\n\n    if (!hasExtendingTokensTypesMapProperty(currTokType)) {\n      currTokType.categoryMatchesMap = {}\n    }\n  })\n}\n\nexport function assignCategoriesTokensProp(tokenTypes: TokenType[]): void {\n  forEach(tokenTypes, (currTokType) => {\n    // avoid duplications\n    currTokType.categoryMatches = []\n    forEach(currTokType.categoryMatchesMap, (val, key) => {\n      currTokType.categoryMatches.push(tokenIdxToClass[key].tokenTypeIdx)\n    })\n  })\n}\n\nexport function assignCategoriesMapProp(tokenTypes: TokenType[]): void {\n  forEach(tokenTypes, (currTokType) => {\n    singleAssignCategoriesToksMap([], currTokType)\n  })\n}\n\nexport function singleAssignCategoriesToksMap(\n  path: TokenType[],\n  nextNode: TokenType\n): void {\n  forEach(path, (pathNode) => {\n    nextNode.categoryMatchesMap[pathNode.tokenTypeIdx] = true\n  })\n\n  forEach(nextNode.CATEGORIES, (nextCategory) => {\n    const newPath = path.concat(nextNode)\n    // avoids infinite loops due to cyclic categories.\n    if (!contains(newPath, nextCategory)) {\n      singleAssignCategoriesToksMap(newPath, nextCategory)\n    }\n  })\n}\n\nexport function hasShortKeyProperty(tokType: TokenType): boolean {\n  return has(tokType, \"tokenTypeIdx\")\n}\n\nexport function hasCategoriesProperty(tokType: TokenType): boolean {\n  return has(tokType, \"CATEGORIES\")\n}\n\nexport function hasExtendingTokensTypesProperty(tokType: TokenType): boolean {\n  return has(tokType, \"categoryMatches\")\n}\n\nexport function hasExtendingTokensTypesMapProperty(\n  tokType: TokenType\n): boolean {\n  return has(tokType, \"categoryMatchesMap\")\n}\n\nexport function isTokenType(tokType: TokenType): boolean {\n  return has(tokType, \"tokenTypeIdx\")\n}\n"],"mappings":";;;;;;AAAA,IAAAA,OAAA,GAAAC,OAAA;AAcA,SAAgBC,sBAAsBA,CAACC,WAAW,EAAEC,cAAc;EAChE,IAAMC,YAAY,GAAGF,WAAW,CAACG,YAAY;EAC7C,IAAID,YAAY,KAAKD,cAAc,CAACE,YAAY,EAAE;IAChD,OAAO,IAAI;GACZ,MAAM;IACL,OACEF,cAAc,CAACG,QAAQ,KAAK,IAAI,IAChCH,cAAc,CAACI,kBAAkB,CAACH,YAAY,CAAC,KAAK,IAAI;;AAG9D;AAVAI,OAAA,CAAAP,sBAAA,GAAAA,sBAAA;AAYA;AACA;AACA,SAAgBQ,kCAAkCA,CAACC,KAAK,EAAEC,OAAO;EAC/D,OAAOD,KAAK,CAACL,YAAY,KAAKM,OAAO,CAACN,YAAY;AACpD;AAFAG,OAAA,CAAAC,kCAAA,GAAAA,kCAAA;AAIWD,OAAA,CAAAI,iBAAiB,GAAG,CAAC;AACnBJ,OAAA,CAAAK,eAAe,GAAG,EAAE;AAEjC,SAAgBC,iBAAiBA,CAACC,UAAuB;EACvD;EACA,IAAMC,oBAAoB,GAAGC,gBAAgB,CAACF,UAAU,CAAC;EAEzD;EACAG,uBAAuB,CAACF,oBAAoB,CAAC;EAE7C;EACAG,uBAAuB,CAACH,oBAAoB,CAAC;EAC7CI,0BAA0B,CAACJ,oBAAoB,CAAC;EAEhDjB,OAAA,CAAAsB,OAAO,CAACL,oBAAoB,EAAE,UAACL,OAAO;IACpCA,OAAO,CAACL,QAAQ,GAAGK,OAAO,CAACW,eAAe,CAACC,MAAM,GAAG,CAAC;EACvD,CAAC,CAAC;AACJ;AAdAf,OAAA,CAAAM,iBAAA,GAAAA,iBAAA;AAgBA,SAAgBG,gBAAgBA,CAACF,UAAuB;EACtD,IAAIS,MAAM,GAAGzB,OAAA,CAAA0B,QAAQ,CAACV,UAAU,CAAC;EAEjC,IAAIW,UAAU,GAAGX,UAAU;EAC3B,IAAIY,SAAS,GAAG,IAAI;EACpB,OAAOA,SAAS,EAAE;IAChBD,UAAU,GAAG3B,OAAA,CAAA6B,OAAO,CAClB7B,OAAA,CAAA8B,OAAO,CAAC9B,OAAA,CAAA+B,GAAG,CAACJ,UAAU,EAAE,UAACK,WAAW;MAAK,OAAAA,WAAW,CAACC,UAAU;IAAtB,CAAsB,CAAC,CAAC,CAClE;IAED,IAAMC,aAAa,GAAGlC,OAAA,CAAAmC,UAAU,CAACR,UAAU,EAAEF,MAAM,CAAC;IAEpDA,MAAM,GAAGA,MAAM,CAACW,MAAM,CAACF,aAAa,CAAC;IAErC,IAAIlC,OAAA,CAAAqC,OAAO,CAACH,aAAa,CAAC,EAAE;MAC1BN,SAAS,GAAG,KAAK;KAClB,MAAM;MACLD,UAAU,GAAGO,aAAa;;;EAG9B,OAAOT,MAAM;AACf;AArBAhB,OAAA,CAAAS,gBAAA,GAAAA,gBAAA;AAuBA,SAAgBC,uBAAuBA,CAACH,UAAuB;EAC7DhB,OAAA,CAAAsB,OAAO,CAACN,UAAU,EAAE,UAACgB,WAAW;IAC9B,IAAI,CAACM,mBAAmB,CAACN,WAAW,CAAC,EAAE;MACrCvB,OAAA,CAAAK,eAAe,CAACL,OAAA,CAAAI,iBAAiB,CAAC,GAAGmB,WAAW;MACzCA,WAAY,CAAC1B,YAAY,GAAGG,OAAA,CAAAI,iBAAiB,EAAE;;IAGxD;IACA,IACE0B,qBAAqB,CAACP,WAAW,CAAC,IAClC,CAAChC,OAAA,CAAAwC,OAAO,CAACR,WAAW,CAACC,UAAU;IAC/B;IACA;IAAA,EACA;MACAD,WAAW,CAACC,UAAU,GAAG,CAACD,WAAW,CAACC,UAAU,CAAC;;IAGnD,IAAI,CAACM,qBAAqB,CAACP,WAAW,CAAC,EAAE;MACvCA,WAAW,CAACC,UAAU,GAAG,EAAE;;IAG7B,IAAI,CAACQ,+BAA+B,CAACT,WAAW,CAAC,EAAE;MACjDA,WAAW,CAACT,eAAe,GAAG,EAAE;;IAGlC,IAAI,CAACmB,kCAAkC,CAACV,WAAW,CAAC,EAAE;MACpDA,WAAW,CAACxB,kBAAkB,GAAG,EAAE;;EAEvC,CAAC,CAAC;AACJ;AA7BAC,OAAA,CAAAU,uBAAA,GAAAA,uBAAA;AA+BA,SAAgBE,0BAA0BA,CAACL,UAAuB;EAChEhB,OAAA,CAAAsB,OAAO,CAACN,UAAU,EAAE,UAACgB,WAAW;IAC9B;IACAA,WAAW,CAACT,eAAe,GAAG,EAAE;IAChCvB,OAAA,CAAAsB,OAAO,CAACU,WAAW,CAACxB,kBAAkB,EAAE,UAACmC,GAAG,EAAEC,GAAG;MAC/CZ,WAAW,CAACT,eAAe,CAACsB,IAAI,CAACpC,OAAA,CAAAK,eAAe,CAAC8B,GAAG,CAAC,CAACtC,YAAY,CAAC;IACrE,CAAC,CAAC;EACJ,CAAC,CAAC;AACJ;AARAG,OAAA,CAAAY,0BAAA,GAAAA,0BAAA;AAUA,SAAgBD,uBAAuBA,CAACJ,UAAuB;EAC7DhB,OAAA,CAAAsB,OAAO,CAACN,UAAU,EAAE,UAACgB,WAAW;IAC9Bc,6BAA6B,CAAC,EAAE,EAAEd,WAAW,CAAC;EAChD,CAAC,CAAC;AACJ;AAJAvB,OAAA,CAAAW,uBAAA,GAAAA,uBAAA;AAMA,SAAgB0B,6BAA6BA,CAC3CC,IAAiB,EACjBC,QAAmB;EAEnBhD,OAAA,CAAAsB,OAAO,CAACyB,IAAI,EAAE,UAACE,QAAQ;IACrBD,QAAQ,CAACxC,kBAAkB,CAACyC,QAAQ,CAAC3C,YAAY,CAAC,GAAG,IAAI;EAC3D,CAAC,CAAC;EAEFN,OAAA,CAAAsB,OAAO,CAAC0B,QAAQ,CAACf,UAAU,EAAE,UAACiB,YAAY;IACxC,IAAMC,OAAO,GAAGJ,IAAI,CAACX,MAAM,CAACY,QAAQ,CAAC;IACrC;IACA,IAAI,CAAChD,OAAA,CAAAoD,QAAQ,CAACD,OAAO,EAAED,YAAY,CAAC,EAAE;MACpCJ,6BAA6B,CAACK,OAAO,EAAED,YAAY,CAAC;;EAExD,CAAC,CAAC;AACJ;AAfAzC,OAAA,CAAAqC,6BAAA,GAAAA,6BAAA;AAiBA,SAAgBR,mBAAmBA,CAAC1B,OAAkB;EACpD,OAAOZ,OAAA,CAAAqD,GAAG,CAACzC,OAAO,EAAE,cAAc,CAAC;AACrC;AAFAH,OAAA,CAAA6B,mBAAA,GAAAA,mBAAA;AAIA,SAAgBC,qBAAqBA,CAAC3B,OAAkB;EACtD,OAAOZ,OAAA,CAAAqD,GAAG,CAACzC,OAAO,EAAE,YAAY,CAAC;AACnC;AAFAH,OAAA,CAAA8B,qBAAA,GAAAA,qBAAA;AAIA,SAAgBE,+BAA+BA,CAAC7B,OAAkB;EAChE,OAAOZ,OAAA,CAAAqD,GAAG,CAACzC,OAAO,EAAE,iBAAiB,CAAC;AACxC;AAFAH,OAAA,CAAAgC,+BAAA,GAAAA,+BAAA;AAIA,SAAgBC,kCAAkCA,CAChD9B,OAAkB;EAElB,OAAOZ,OAAA,CAAAqD,GAAG,CAACzC,OAAO,EAAE,oBAAoB,CAAC;AAC3C;AAJAH,OAAA,CAAAiC,kCAAA,GAAAA,kCAAA;AAMA,SAAgBY,WAAWA,CAAC1C,OAAkB;EAC5C,OAAOZ,OAAA,CAAAqD,GAAG,CAACzC,OAAO,EAAE,cAAc,CAAC;AACrC;AAFAH,OAAA,CAAA6C,WAAA,GAAAA,WAAA"},"metadata":{},"sourceType":"script","externalDependencies":[]}