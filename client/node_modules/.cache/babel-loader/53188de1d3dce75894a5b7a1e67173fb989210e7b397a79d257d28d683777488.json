{"ast":null,"code":"import * as React from 'react';\nimport { useFrame } from '@react-three/fiber';\nimport { Color, Vector3, Spherical, AdditiveBlending, ShaderMaterial } from 'three';\nclass StarfieldMaterial extends ShaderMaterial {\n  constructor() {\n    super({\n      uniforms: {\n        time: {\n          value: 0.0\n        },\n        fade: {\n          value: 1.0\n        }\n      },\n      vertexShader: /* glsl */\n      `\n      uniform float time;\n      attribute float size;\n      varying vec3 vColor;\n      void main() {\n        vColor = color;\n        vec4 mvPosition = modelViewMatrix * vec4(position, 0.5);\n        gl_PointSize = size * (30.0 / -mvPosition.z) * (3.0 + sin(mvPosition.x + 2.0 * time + 100.0));\n        gl_Position = projectionMatrix * mvPosition;\n      }`,\n      fragmentShader: /* glsl */\n      `\n      uniform sampler2D pointTexture;\n      uniform float fade;\n      varying vec3 vColor;\n      void main() {\n        float opacity = 1.0;\n        if (fade == 1.0) {\n          float d = distance(gl_PointCoord, vec2(0.5, 0.5));\n          opacity = 1.0 / (1.0 + exp(16.0 * (d - 0.25)));\n        }\n        gl_FragColor = vec4(vColor, opacity);\n      }`\n    });\n  }\n}\nconst genStar = r => {\n  return new Vector3().setFromSpherical(new Spherical(r, Math.acos(1 - Math.random() * 2), Math.random() * 2 * Math.PI));\n};\nconst Stars = /*#__PURE__*/React.forwardRef(({\n  radius = 100,\n  depth = 50,\n  count = 5000,\n  saturation = 0,\n  factor = 4,\n  fade = false\n}, ref) => {\n  const material = React.useRef();\n  const [position, color, size] = React.useMemo(() => {\n    const positions = [];\n    const colors = [];\n    const sizes = Array.from({\n      length: count\n    }, () => (0.5 + 0.5 * Math.random()) * factor);\n    const color = new Color();\n    let r = radius + depth;\n    const increment = depth / count;\n    for (let i = 0; i < count; i++) {\n      r -= increment * Math.random();\n      positions.push(...genStar(r).toArray());\n      color.setHSL(i / count, saturation, 0.9);\n      colors.push(color.r, color.g, color.b);\n    }\n    return [new Float32Array(positions), new Float32Array(colors), new Float32Array(sizes)];\n  }, [count, depth, factor, radius, saturation]);\n  useFrame(state => material.current && (material.current.uniforms.time.value = state.clock.getElapsedTime()));\n  const [starfieldMaterial] = React.useState(() => new StarfieldMaterial());\n  return /*#__PURE__*/React.createElement(\"points\", {\n    ref: ref\n  }, /*#__PURE__*/React.createElement(\"bufferGeometry\", {\n    attach: \"geometry\"\n  }, /*#__PURE__*/React.createElement(\"bufferAttribute\", {\n    attachObject: ['attributes', 'position'],\n    args: [position, 3]\n  }), /*#__PURE__*/React.createElement(\"bufferAttribute\", {\n    attachObject: ['attributes', 'color'],\n    args: [color, 3]\n  }), /*#__PURE__*/React.createElement(\"bufferAttribute\", {\n    attachObject: ['attributes', 'size'],\n    args: [size, 1]\n  })), /*#__PURE__*/React.createElement(\"primitive\", {\n    dispose: undefined,\n    ref: material,\n    object: starfieldMaterial,\n    attach: \"material\",\n    blending: AdditiveBlending,\n    \"uniforms-fade-value\": fade,\n    transparent: true,\n    vertexColors: true\n  }));\n});\nexport { Stars };","map":{"version":3,"names":["React","useFrame","Color","Vector3","Spherical","AdditiveBlending","ShaderMaterial","StarfieldMaterial","constructor","uniforms","time","value","fade","vertexShader","fragmentShader","genStar","r","setFromSpherical","Math","acos","random","PI","Stars","forwardRef","radius","depth","count","saturation","factor","ref","material","useRef","position","color","size","useMemo","positions","colors","sizes","Array","from","length","increment","i","push","toArray","setHSL","g","b","Float32Array","state","current","clock","getElapsedTime","starfieldMaterial","useState","createElement","attach","attachObject","args","dispose","undefined","object","blending","transparent","vertexColors"],"sources":["C:/Users/Work/node_modules/@react-three/drei/core/Stars.js"],"sourcesContent":["import * as React from 'react';\nimport { useFrame } from '@react-three/fiber';\nimport { Color, Vector3, Spherical, AdditiveBlending, ShaderMaterial } from 'three';\n\nclass StarfieldMaterial extends ShaderMaterial {\n  constructor() {\n    super({\n      uniforms: {\n        time: {\n          value: 0.0\n        },\n        fade: {\n          value: 1.0\n        }\n      },\n      vertexShader:\n      /* glsl */\n      `\n      uniform float time;\n      attribute float size;\n      varying vec3 vColor;\n      void main() {\n        vColor = color;\n        vec4 mvPosition = modelViewMatrix * vec4(position, 0.5);\n        gl_PointSize = size * (30.0 / -mvPosition.z) * (3.0 + sin(mvPosition.x + 2.0 * time + 100.0));\n        gl_Position = projectionMatrix * mvPosition;\n      }`,\n      fragmentShader:\n      /* glsl */\n      `\n      uniform sampler2D pointTexture;\n      uniform float fade;\n      varying vec3 vColor;\n      void main() {\n        float opacity = 1.0;\n        if (fade == 1.0) {\n          float d = distance(gl_PointCoord, vec2(0.5, 0.5));\n          opacity = 1.0 / (1.0 + exp(16.0 * (d - 0.25)));\n        }\n        gl_FragColor = vec4(vColor, opacity);\n      }`\n    });\n  }\n\n}\n\nconst genStar = r => {\n  return new Vector3().setFromSpherical(new Spherical(r, Math.acos(1 - Math.random() * 2), Math.random() * 2 * Math.PI));\n};\n\nconst Stars = /*#__PURE__*/React.forwardRef(({\n  radius = 100,\n  depth = 50,\n  count = 5000,\n  saturation = 0,\n  factor = 4,\n  fade = false\n}, ref) => {\n  const material = React.useRef();\n  const [position, color, size] = React.useMemo(() => {\n    const positions = [];\n    const colors = [];\n    const sizes = Array.from({\n      length: count\n    }, () => (0.5 + 0.5 * Math.random()) * factor);\n    const color = new Color();\n    let r = radius + depth;\n    const increment = depth / count;\n\n    for (let i = 0; i < count; i++) {\n      r -= increment * Math.random();\n      positions.push(...genStar(r).toArray());\n      color.setHSL(i / count, saturation, 0.9);\n      colors.push(color.r, color.g, color.b);\n    }\n\n    return [new Float32Array(positions), new Float32Array(colors), new Float32Array(sizes)];\n  }, [count, depth, factor, radius, saturation]);\n  useFrame(state => material.current && (material.current.uniforms.time.value = state.clock.getElapsedTime()));\n  const [starfieldMaterial] = React.useState(() => new StarfieldMaterial());\n  return /*#__PURE__*/React.createElement(\"points\", {\n    ref: ref\n  }, /*#__PURE__*/React.createElement(\"bufferGeometry\", {\n    attach: \"geometry\"\n  }, /*#__PURE__*/React.createElement(\"bufferAttribute\", {\n    attachObject: ['attributes', 'position'],\n    args: [position, 3]\n  }), /*#__PURE__*/React.createElement(\"bufferAttribute\", {\n    attachObject: ['attributes', 'color'],\n    args: [color, 3]\n  }), /*#__PURE__*/React.createElement(\"bufferAttribute\", {\n    attachObject: ['attributes', 'size'],\n    args: [size, 1]\n  })), /*#__PURE__*/React.createElement(\"primitive\", {\n    dispose: undefined,\n    ref: material,\n    object: starfieldMaterial,\n    attach: \"material\",\n    blending: AdditiveBlending,\n    \"uniforms-fade-value\": fade,\n    transparent: true,\n    vertexColors: true\n  }));\n});\n\nexport { Stars };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}