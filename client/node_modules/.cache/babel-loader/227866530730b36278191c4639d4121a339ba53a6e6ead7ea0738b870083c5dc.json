{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n    return extendStatics(d, b);\n  };\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.serializeProduction = exports.serializeGrammar = exports.Terminal = exports.Alternation = exports.RepetitionWithSeparator = exports.Repetition = exports.RepetitionMandatoryWithSeparator = exports.RepetitionMandatory = exports.Option = exports.Alternative = exports.Rule = exports.NonTerminal = exports.AbstractProduction = void 0;\nvar utils_1 = require(\"@chevrotain/utils\");\nvar tokens_public_1 = require(\"../../../scan/tokens_public\");\nvar AbstractProduction = /** @class */function () {\n  function AbstractProduction(_definition) {\n    this._definition = _definition;\n  }\n  Object.defineProperty(AbstractProduction.prototype, \"definition\", {\n    get: function () {\n      return this._definition;\n    },\n    set: function (value) {\n      this._definition = value;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  AbstractProduction.prototype.accept = function (visitor) {\n    visitor.visit(this);\n    utils_1.forEach(this.definition, function (prod) {\n      prod.accept(visitor);\n    });\n  };\n  return AbstractProduction;\n}();\nexports.AbstractProduction = AbstractProduction;\nvar NonTerminal = /** @class */function (_super) {\n  __extends(NonTerminal, _super);\n  function NonTerminal(options) {\n    var _this = _super.call(this, []) || this;\n    _this.idx = 1;\n    utils_1.assign(_this, utils_1.pick(options, function (v) {\n      return v !== undefined;\n    }));\n    return _this;\n  }\n  Object.defineProperty(NonTerminal.prototype, \"definition\", {\n    get: function () {\n      if (this.referencedRule !== undefined) {\n        return this.referencedRule.definition;\n      }\n      return [];\n    },\n    set: function (definition) {\n      // immutable\n    },\n    enumerable: false,\n    configurable: true\n  });\n  NonTerminal.prototype.accept = function (visitor) {\n    visitor.visit(this);\n    // don't visit children of a reference, we will get cyclic infinite loops if we do so\n  };\n\n  return NonTerminal;\n}(AbstractProduction);\nexports.NonTerminal = NonTerminal;\nvar Rule = /** @class */function (_super) {\n  __extends(Rule, _super);\n  function Rule(options) {\n    var _this = _super.call(this, options.definition) || this;\n    _this.orgText = \"\";\n    utils_1.assign(_this, utils_1.pick(options, function (v) {\n      return v !== undefined;\n    }));\n    return _this;\n  }\n  return Rule;\n}(AbstractProduction);\nexports.Rule = Rule;\nvar Alternative = /** @class */function (_super) {\n  __extends(Alternative, _super);\n  function Alternative(options) {\n    var _this = _super.call(this, options.definition) || this;\n    _this.ignoreAmbiguities = false;\n    utils_1.assign(_this, utils_1.pick(options, function (v) {\n      return v !== undefined;\n    }));\n    return _this;\n  }\n  return Alternative;\n}(AbstractProduction);\nexports.Alternative = Alternative;\nvar Option = /** @class */function (_super) {\n  __extends(Option, _super);\n  function Option(options) {\n    var _this = _super.call(this, options.definition) || this;\n    _this.idx = 1;\n    utils_1.assign(_this, utils_1.pick(options, function (v) {\n      return v !== undefined;\n    }));\n    return _this;\n  }\n  return Option;\n}(AbstractProduction);\nexports.Option = Option;\nvar RepetitionMandatory = /** @class */function (_super) {\n  __extends(RepetitionMandatory, _super);\n  function RepetitionMandatory(options) {\n    var _this = _super.call(this, options.definition) || this;\n    _this.idx = 1;\n    utils_1.assign(_this, utils_1.pick(options, function (v) {\n      return v !== undefined;\n    }));\n    return _this;\n  }\n  return RepetitionMandatory;\n}(AbstractProduction);\nexports.RepetitionMandatory = RepetitionMandatory;\nvar RepetitionMandatoryWithSeparator = /** @class */function (_super) {\n  __extends(RepetitionMandatoryWithSeparator, _super);\n  function RepetitionMandatoryWithSeparator(options) {\n    var _this = _super.call(this, options.definition) || this;\n    _this.idx = 1;\n    utils_1.assign(_this, utils_1.pick(options, function (v) {\n      return v !== undefined;\n    }));\n    return _this;\n  }\n  return RepetitionMandatoryWithSeparator;\n}(AbstractProduction);\nexports.RepetitionMandatoryWithSeparator = RepetitionMandatoryWithSeparator;\nvar Repetition = /** @class */function (_super) {\n  __extends(Repetition, _super);\n  function Repetition(options) {\n    var _this = _super.call(this, options.definition) || this;\n    _this.idx = 1;\n    utils_1.assign(_this, utils_1.pick(options, function (v) {\n      return v !== undefined;\n    }));\n    return _this;\n  }\n  return Repetition;\n}(AbstractProduction);\nexports.Repetition = Repetition;\nvar RepetitionWithSeparator = /** @class */function (_super) {\n  __extends(RepetitionWithSeparator, _super);\n  function RepetitionWithSeparator(options) {\n    var _this = _super.call(this, options.definition) || this;\n    _this.idx = 1;\n    utils_1.assign(_this, utils_1.pick(options, function (v) {\n      return v !== undefined;\n    }));\n    return _this;\n  }\n  return RepetitionWithSeparator;\n}(AbstractProduction);\nexports.RepetitionWithSeparator = RepetitionWithSeparator;\nvar Alternation = /** @class */function (_super) {\n  __extends(Alternation, _super);\n  function Alternation(options) {\n    var _this = _super.call(this, options.definition) || this;\n    _this.idx = 1;\n    _this.ignoreAmbiguities = false;\n    _this.hasPredicates = false;\n    utils_1.assign(_this, utils_1.pick(options, function (v) {\n      return v !== undefined;\n    }));\n    return _this;\n  }\n  Object.defineProperty(Alternation.prototype, \"definition\", {\n    get: function () {\n      return this._definition;\n    },\n    set: function (value) {\n      this._definition = value;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  return Alternation;\n}(AbstractProduction);\nexports.Alternation = Alternation;\nvar Terminal = /** @class */function () {\n  function Terminal(options) {\n    this.idx = 1;\n    utils_1.assign(this, utils_1.pick(options, function (v) {\n      return v !== undefined;\n    }));\n  }\n  Terminal.prototype.accept = function (visitor) {\n    visitor.visit(this);\n  };\n  return Terminal;\n}();\nexports.Terminal = Terminal;\nfunction serializeGrammar(topRules) {\n  return utils_1.map(topRules, serializeProduction);\n}\nexports.serializeGrammar = serializeGrammar;\nfunction serializeProduction(node) {\n  function convertDefinition(definition) {\n    return utils_1.map(definition, serializeProduction);\n  }\n  /* istanbul ignore else */\n  if (node instanceof NonTerminal) {\n    var serializedNonTerminal = {\n      type: \"NonTerminal\",\n      name: node.nonTerminalName,\n      idx: node.idx\n    };\n    if (utils_1.isString(node.label)) {\n      serializedNonTerminal.label = node.label;\n    }\n    return serializedNonTerminal;\n  } else if (node instanceof Alternative) {\n    return {\n      type: \"Alternative\",\n      definition: convertDefinition(node.definition)\n    };\n  } else if (node instanceof Option) {\n    return {\n      type: \"Option\",\n      idx: node.idx,\n      definition: convertDefinition(node.definition)\n    };\n  } else if (node instanceof RepetitionMandatory) {\n    return {\n      type: \"RepetitionMandatory\",\n      idx: node.idx,\n      definition: convertDefinition(node.definition)\n    };\n  } else if (node instanceof RepetitionMandatoryWithSeparator) {\n    return {\n      type: \"RepetitionMandatoryWithSeparator\",\n      idx: node.idx,\n      separator: serializeProduction(new Terminal({\n        terminalType: node.separator\n      })),\n      definition: convertDefinition(node.definition)\n    };\n  } else if (node instanceof RepetitionWithSeparator) {\n    return {\n      type: \"RepetitionWithSeparator\",\n      idx: node.idx,\n      separator: serializeProduction(new Terminal({\n        terminalType: node.separator\n      })),\n      definition: convertDefinition(node.definition)\n    };\n  } else if (node instanceof Repetition) {\n    return {\n      type: \"Repetition\",\n      idx: node.idx,\n      definition: convertDefinition(node.definition)\n    };\n  } else if (node instanceof Alternation) {\n    return {\n      type: \"Alternation\",\n      idx: node.idx,\n      definition: convertDefinition(node.definition)\n    };\n  } else if (node instanceof Terminal) {\n    var serializedTerminal = {\n      type: \"Terminal\",\n      name: node.terminalType.name,\n      label: tokens_public_1.tokenLabel(node.terminalType),\n      idx: node.idx\n    };\n    if (utils_1.isString(node.label)) {\n      serializedTerminal.terminalLabel = node.label;\n    }\n    var pattern = node.terminalType.PATTERN;\n    if (node.terminalType.PATTERN) {\n      serializedTerminal.pattern = utils_1.isRegExp(pattern) ? pattern.source : pattern;\n    }\n    return serializedTerminal;\n  } else if (node instanceof Rule) {\n    return {\n      type: \"Rule\",\n      name: node.name,\n      orgText: node.orgText,\n      definition: convertDefinition(node.definition)\n    };\n  } else {\n    throw Error(\"non exhaustive match\");\n  }\n}\nexports.serializeProduction = serializeProduction;","map":{"version":3,"names":["utils_1","require","tokens_public_1","AbstractProduction","_definition","Object","defineProperty","prototype","get","set","value","accept","visitor","visit","forEach","definition","prod","exports","NonTerminal","_super","__extends","options","_this","call","idx","assign","pick","v","undefined","referencedRule","Rule","orgText","Alternative","ignoreAmbiguities","Option","RepetitionMandatory","RepetitionMandatoryWithSeparator","Repetition","RepetitionWithSeparator","Alternation","hasPredicates","Terminal","serializeGrammar","topRules","map","serializeProduction","node","convertDefinition","serializedNonTerminal","type","name","nonTerminalName","isString","label","separator","terminalType","serializedTerminal","tokenLabel","terminalLabel","pattern","PATTERN","isRegExp","source","Error"],"sources":["C:\\Users\\Work\\node_modules\\chevrotain\\src\\parse\\grammar\\gast\\gast_public.ts"],"sourcesContent":["import {\n  assign,\n  forEach,\n  isRegExp,\n  isString,\n  map,\n  pick\n} from \"@chevrotain/utils\"\nimport { tokenLabel } from \"../../../scan/tokens_public\"\nimport {\n  IGASTVisitor,\n  IProduction,\n  IProductionWithOccurrence,\n  ISerializedGast,\n  TokenType\n} from \"@chevrotain/types\"\n\nexport abstract class AbstractProduction<T extends IProduction = IProduction>\n  implements IProduction {\n  public get definition(): T[] {\n    return this._definition\n  }\n  public set definition(value: T[]) {\n    this._definition = value\n  }\n\n  constructor(protected _definition: T[]) {}\n\n  accept(visitor: IGASTVisitor): void {\n    visitor.visit(this)\n    forEach(this.definition, (prod) => {\n      prod.accept(visitor)\n    })\n  }\n}\n\nexport class NonTerminal\n  extends AbstractProduction\n  implements IProductionWithOccurrence {\n  public nonTerminalName: string\n  public label?: string\n  public referencedRule: Rule\n  public idx: number = 1\n\n  constructor(options: {\n    nonTerminalName: string\n    label?: string\n    referencedRule?: Rule\n    idx?: number\n  }) {\n    super([])\n    assign(\n      this,\n      pick(options, (v) => v !== undefined)\n    )\n  }\n\n  set definition(definition: IProduction[]) {\n    // immutable\n  }\n\n  get definition(): IProduction[] {\n    if (this.referencedRule !== undefined) {\n      return this.referencedRule.definition\n    }\n    return []\n  }\n\n  accept(visitor: IGASTVisitor): void {\n    visitor.visit(this)\n    // don't visit children of a reference, we will get cyclic infinite loops if we do so\n  }\n}\n\nexport class Rule extends AbstractProduction {\n  public name: string\n  public orgText: string = \"\"\n\n  constructor(options: {\n    name: string\n    definition: IProduction[]\n    orgText?: string\n  }) {\n    super(options.definition)\n    assign(\n      this,\n      pick(options, (v) => v !== undefined)\n    )\n  }\n}\n\nexport class Alternative extends AbstractProduction {\n  public ignoreAmbiguities: boolean = false\n\n  constructor(options: {\n    definition: IProduction[]\n    ignoreAmbiguities?: boolean\n  }) {\n    super(options.definition)\n    assign(\n      this,\n      pick(options, (v) => v !== undefined)\n    )\n  }\n}\n\nexport class Option\n  extends AbstractProduction\n  implements IProductionWithOccurrence {\n  public idx: number = 1\n  public maxLookahead?: number\n\n  constructor(options: {\n    definition: IProduction[]\n    idx?: number\n    maxLookahead?: number\n  }) {\n    super(options.definition)\n    assign(\n      this,\n      pick(options, (v) => v !== undefined)\n    )\n  }\n}\n\nexport class RepetitionMandatory\n  extends AbstractProduction\n  implements IProductionWithOccurrence {\n  public idx: number = 1\n  public maxLookahead?: number\n\n  constructor(options: {\n    definition: IProduction[]\n    idx?: number\n    maxLookahead?: number\n  }) {\n    super(options.definition)\n    assign(\n      this,\n      pick(options, (v) => v !== undefined)\n    )\n  }\n}\n\nexport class RepetitionMandatoryWithSeparator\n  extends AbstractProduction\n  implements IProductionWithOccurrence {\n  public separator: TokenType\n  public idx: number = 1\n\n  constructor(options: {\n    definition: IProduction[]\n    separator: TokenType\n    idx?: number\n  }) {\n    super(options.definition)\n    assign(\n      this,\n      pick(options, (v) => v !== undefined)\n    )\n  }\n}\n\nexport class Repetition\n  extends AbstractProduction\n  implements IProductionWithOccurrence {\n  public separator: TokenType\n  public idx: number = 1\n  public maxLookahead?: number\n\n  constructor(options: {\n    definition: IProduction[]\n    idx?: number\n    maxLookahead?: number\n  }) {\n    super(options.definition)\n    assign(\n      this,\n      pick(options, (v) => v !== undefined)\n    )\n  }\n}\n\nexport class RepetitionWithSeparator\n  extends AbstractProduction\n  implements IProductionWithOccurrence {\n  public separator: TokenType\n  public idx: number = 1\n\n  constructor(options: {\n    definition: IProduction[]\n    separator: TokenType\n    idx?: number\n  }) {\n    super(options.definition)\n    assign(\n      this,\n      pick(options, (v) => v !== undefined)\n    )\n  }\n}\n\nexport class Alternation\n  extends AbstractProduction<Alternative>\n  implements IProductionWithOccurrence {\n  public idx: number = 1\n  public ignoreAmbiguities: boolean = false\n  public hasPredicates: boolean = false\n  public maxLookahead?: number\n\n  public get definition(): Alternative[] {\n    return this._definition\n  }\n  public set definition(value: Alternative[]) {\n    this._definition = value\n  }\n\n  constructor(options: {\n    definition: Alternative[]\n    idx?: number\n    ignoreAmbiguities?: boolean\n    hasPredicates?: boolean\n    maxLookahead?: number\n  }) {\n    super(options.definition)\n    assign(\n      this,\n      pick(options, (v) => v !== undefined)\n    )\n  }\n}\n\nexport class Terminal implements IProductionWithOccurrence {\n  public terminalType: TokenType\n  public label?: string\n  public idx: number = 1\n\n  constructor(options: {\n    terminalType: TokenType\n    label?: string\n    idx?: number\n  }) {\n    assign(\n      this,\n      pick(options, (v) => v !== undefined)\n    )\n  }\n\n  accept(visitor: IGASTVisitor): void {\n    visitor.visit(this)\n  }\n}\n\nexport interface ISerializedBasic extends ISerializedGast {\n  type:\n    | \"Alternative\"\n    | \"Option\"\n    | \"RepetitionMandatory\"\n    | \"Repetition\"\n    | \"Alternation\"\n  idx?: number\n}\n\nexport interface ISerializedGastRule extends ISerializedGast {\n  type: \"Rule\"\n  name: string\n  orgText: string\n}\n\nexport interface ISerializedNonTerminal extends ISerializedGast {\n  type: \"NonTerminal\"\n  name: string\n  label?: string\n  idx: number\n}\n\nexport interface ISerializedTerminal extends ISerializedGast {\n  type: \"Terminal\"\n  name: string\n  terminalLabel?: string\n  label?: string\n  pattern?: string\n  idx: number\n}\n\nexport interface ISerializedTerminalWithSeparator extends ISerializedGast {\n  type: \"RepetitionMandatoryWithSeparator\" | \"RepetitionWithSeparator\"\n  idx: number\n  separator: ISerializedTerminal\n}\n\nexport type ISerializedGastAny =\n  | ISerializedBasic\n  | ISerializedGastRule\n  | ISerializedNonTerminal\n  | ISerializedTerminal\n  | ISerializedTerminalWithSeparator\n\nexport function serializeGrammar(topRules: Rule[]): ISerializedGast[] {\n  return map(topRules, serializeProduction)\n}\n\nexport function serializeProduction(node: IProduction): ISerializedGast {\n  function convertDefinition(definition: IProduction[]): ISerializedGast[] {\n    return map(definition, serializeProduction)\n  }\n  /* istanbul ignore else */\n  if (node instanceof NonTerminal) {\n    const serializedNonTerminal: ISerializedNonTerminal = {\n      type: \"NonTerminal\",\n      name: node.nonTerminalName,\n      idx: node.idx\n    }\n\n    if (isString(node.label)) {\n      serializedNonTerminal.label = node.label\n    }\n\n    return serializedNonTerminal\n  } else if (node instanceof Alternative) {\n    return <ISerializedBasic>{\n      type: \"Alternative\",\n      definition: convertDefinition(node.definition)\n    }\n  } else if (node instanceof Option) {\n    return <ISerializedBasic>{\n      type: \"Option\",\n      idx: node.idx,\n      definition: convertDefinition(node.definition)\n    }\n  } else if (node instanceof RepetitionMandatory) {\n    return <ISerializedBasic>{\n      type: \"RepetitionMandatory\",\n      idx: node.idx,\n      definition: convertDefinition(node.definition)\n    }\n  } else if (node instanceof RepetitionMandatoryWithSeparator) {\n    return <ISerializedTerminalWithSeparator>{\n      type: \"RepetitionMandatoryWithSeparator\",\n      idx: node.idx,\n      separator: <ISerializedTerminal>(\n        serializeProduction(new Terminal({ terminalType: node.separator }))\n      ),\n      definition: convertDefinition(node.definition)\n    }\n  } else if (node instanceof RepetitionWithSeparator) {\n    return <ISerializedTerminalWithSeparator>{\n      type: \"RepetitionWithSeparator\",\n      idx: node.idx,\n      separator: <ISerializedTerminal>(\n        serializeProduction(new Terminal({ terminalType: node.separator }))\n      ),\n      definition: convertDefinition(node.definition)\n    }\n  } else if (node instanceof Repetition) {\n    return <ISerializedBasic>{\n      type: \"Repetition\",\n      idx: node.idx,\n      definition: convertDefinition(node.definition)\n    }\n  } else if (node instanceof Alternation) {\n    return <ISerializedBasic>{\n      type: \"Alternation\",\n      idx: node.idx,\n      definition: convertDefinition(node.definition)\n    }\n  } else if (node instanceof Terminal) {\n    const serializedTerminal = <ISerializedTerminal>{\n      type: \"Terminal\",\n      name: node.terminalType.name,\n      label: tokenLabel(node.terminalType),\n      idx: node.idx\n    }\n\n    if (isString(node.label)) {\n      serializedTerminal.terminalLabel = node.label\n    }\n\n    const pattern = node.terminalType.PATTERN\n    if (node.terminalType.PATTERN) {\n      serializedTerminal.pattern = isRegExp(pattern)\n        ? (<any>pattern).source\n        : pattern\n    }\n\n    return serializedTerminal\n  } else if (node instanceof Rule) {\n    return <ISerializedGastRule>{\n      type: \"Rule\",\n      name: node.name,\n      orgText: node.orgText,\n      definition: convertDefinition(node.definition)\n    }\n  } else {\n    throw Error(\"non exhaustive match\")\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}