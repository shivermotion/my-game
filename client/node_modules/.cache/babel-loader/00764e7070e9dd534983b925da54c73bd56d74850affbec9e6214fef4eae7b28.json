{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.PerformanceTracer = void 0;\nvar utils_1 = require(\"@chevrotain/utils\");\nvar parser_1 = require(\"../parser\");\n/**\n * Trait responsible for runtime parsing errors.\n */\nvar PerformanceTracer = /** @class */function () {\n  function PerformanceTracer() {}\n  PerformanceTracer.prototype.initPerformanceTracer = function (config) {\n    if (utils_1.has(config, \"traceInitPerf\")) {\n      var userTraceInitPerf = config.traceInitPerf;\n      var traceIsNumber = typeof userTraceInitPerf === \"number\";\n      this.traceInitMaxIdent = traceIsNumber ? userTraceInitPerf : Infinity;\n      this.traceInitPerf = traceIsNumber ? userTraceInitPerf > 0 : userTraceInitPerf;\n    } else {\n      this.traceInitMaxIdent = 0;\n      this.traceInitPerf = parser_1.DEFAULT_PARSER_CONFIG.traceInitPerf;\n    }\n    this.traceInitIndent = -1;\n  };\n  PerformanceTracer.prototype.TRACE_INIT = function (phaseDesc, phaseImpl) {\n    // No need to optimize this using NOOP pattern because\n    // It is not called in a hot spot...\n    if (this.traceInitPerf === true) {\n      this.traceInitIndent++;\n      var indent = new Array(this.traceInitIndent + 1).join(\"\\t\");\n      if (this.traceInitIndent < this.traceInitMaxIdent) {\n        console.log(indent + \"--> <\" + phaseDesc + \">\");\n      }\n      var _a = utils_1.timer(phaseImpl),\n        time = _a.time,\n        value = _a.value;\n      /* istanbul ignore next - Difficult to reproduce specific performance behavior (>10ms) in tests */\n      var traceMethod = time > 10 ? console.warn : console.log;\n      if (this.traceInitIndent < this.traceInitMaxIdent) {\n        traceMethod(indent + \"<-- <\" + phaseDesc + \"> time: \" + time + \"ms\");\n      }\n      this.traceInitIndent--;\n      return value;\n    } else {\n      return phaseImpl();\n    }\n  };\n  return PerformanceTracer;\n}();\nexports.PerformanceTracer = PerformanceTracer;","map":{"version":3,"names":["utils_1","require","parser_1","PerformanceTracer","prototype","initPerformanceTracer","config","has","userTraceInitPerf","traceInitPerf","traceIsNumber","traceInitMaxIdent","Infinity","DEFAULT_PARSER_CONFIG","traceInitIndent","TRACE_INIT","phaseDesc","phaseImpl","indent","Array","join","console","log","_a","timer","time","value","traceMethod","warn","exports"],"sources":["C:\\Users\\Work\\node_modules\\chevrotain\\src\\parse\\parser\\traits\\perf_tracer.ts"],"sourcesContent":["import { IParserConfig } from \"@chevrotain/types\"\nimport { has, timer } from \"@chevrotain/utils\"\nimport { MixedInParser } from \"./parser_traits\"\nimport { DEFAULT_PARSER_CONFIG } from \"../parser\"\n\n/**\n * Trait responsible for runtime parsing errors.\n */\nexport class PerformanceTracer {\n  traceInitPerf: boolean | number\n  traceInitMaxIdent: number\n  traceInitIndent: number\n\n  initPerformanceTracer(config: IParserConfig) {\n    if (has(config, \"traceInitPerf\")) {\n      const userTraceInitPerf = config.traceInitPerf\n      const traceIsNumber = typeof userTraceInitPerf === \"number\"\n      this.traceInitMaxIdent = traceIsNumber\n        ? <number>userTraceInitPerf\n        : Infinity\n      this.traceInitPerf = traceIsNumber\n        ? userTraceInitPerf > 0\n        : userTraceInitPerf\n    } else {\n      this.traceInitMaxIdent = 0\n      this.traceInitPerf = DEFAULT_PARSER_CONFIG.traceInitPerf\n    }\n\n    this.traceInitIndent = -1\n  }\n\n  TRACE_INIT<T>(this: MixedInParser, phaseDesc: string, phaseImpl: () => T): T {\n    // No need to optimize this using NOOP pattern because\n    // It is not called in a hot spot...\n    if (this.traceInitPerf === true) {\n      this.traceInitIndent++\n      const indent = new Array(this.traceInitIndent + 1).join(\"\\t\")\n      if (this.traceInitIndent < this.traceInitMaxIdent) {\n        console.log(`${indent}--> <${phaseDesc}>`)\n      }\n      const { time, value } = timer(phaseImpl)\n      /* istanbul ignore next - Difficult to reproduce specific performance behavior (>10ms) in tests */\n      const traceMethod = time > 10 ? console.warn : console.log\n      if (this.traceInitIndent < this.traceInitMaxIdent) {\n        traceMethod(`${indent}<-- <${phaseDesc}> time: ${time}ms`)\n      }\n      this.traceInitIndent--\n      return value\n    } else {\n      return phaseImpl()\n    }\n  }\n}\n"],"mappings":";;;;;;AACA,IAAAA,OAAA,GAAAC,OAAA;AAEA,IAAAC,QAAA,GAAAD,OAAA;AAEA;;;AAGA,IAAAE,iBAAA;EAAA,SAAAA,kBAAA,GA4CA;EAvCEA,iBAAA,CAAAC,SAAA,CAAAC,qBAAqB,GAArB,UAAsBC,MAAqB;IACzC,IAAIN,OAAA,CAAAO,GAAG,CAACD,MAAM,EAAE,eAAe,CAAC,EAAE;MAChC,IAAME,iBAAiB,GAAGF,MAAM,CAACG,aAAa;MAC9C,IAAMC,aAAa,GAAG,OAAOF,iBAAiB,KAAK,QAAQ;MAC3D,IAAI,CAACG,iBAAiB,GAAGD,aAAa,GAC1BF,iBAAiB,GACzBI,QAAQ;MACZ,IAAI,CAACH,aAAa,GAAGC,aAAa,GAC9BF,iBAAiB,GAAG,CAAC,GACrBA,iBAAiB;KACtB,MAAM;MACL,IAAI,CAACG,iBAAiB,GAAG,CAAC;MAC1B,IAAI,CAACF,aAAa,GAAGP,QAAA,CAAAW,qBAAqB,CAACJ,aAAa;;IAG1D,IAAI,CAACK,eAAe,GAAG,CAAC,CAAC;EAC3B,CAAC;EAEDX,iBAAA,CAAAC,SAAA,CAAAW,UAAU,GAAV,UAAmCC,SAAiB,EAAEC,SAAkB;IACtE;IACA;IACA,IAAI,IAAI,CAACR,aAAa,KAAK,IAAI,EAAE;MAC/B,IAAI,CAACK,eAAe,EAAE;MACtB,IAAMI,MAAM,GAAG,IAAIC,KAAK,CAAC,IAAI,CAACL,eAAe,GAAG,CAAC,CAAC,CAACM,IAAI,CAAC,IAAI,CAAC;MAC7D,IAAI,IAAI,CAACN,eAAe,GAAG,IAAI,CAACH,iBAAiB,EAAE;QACjDU,OAAO,CAACC,GAAG,CAAIJ,MAAM,aAAQF,SAAS,MAAG,CAAC;;MAEtC,IAAAO,EAAA,GAAkBvB,OAAA,CAAAwB,KAAK,CAACP,SAAS,CAAC;QAAhCQ,IAAI,GAAAF,EAAA,CAAAE,IAAA;QAAEC,KAAK,GAAAH,EAAA,CAAAG,KAAqB;MACxC;MACA,IAAMC,WAAW,GAAGF,IAAI,GAAG,EAAE,GAAGJ,OAAO,CAACO,IAAI,GAAGP,OAAO,CAACC,GAAG;MAC1D,IAAI,IAAI,CAACR,eAAe,GAAG,IAAI,CAACH,iBAAiB,EAAE;QACjDgB,WAAW,CAAIT,MAAM,aAAQF,SAAS,gBAAWS,IAAI,OAAI,CAAC;;MAE5D,IAAI,CAACX,eAAe,EAAE;MACtB,OAAOY,KAAK;KACb,MAAM;MACL,OAAOT,SAAS,EAAE;;EAEtB,CAAC;EACH,OAAAd,iBAAC;AAAD,CAAC,CA5CD;AAAa0B,OAAA,CAAA1B,iBAAA,GAAAA,iBAAA"},"metadata":{},"sourceType":"script","externalDependencies":[]}