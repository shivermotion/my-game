{"ast":null,"code":"import { Triangle, Vector3, Line3, Sphere } from 'three';\nimport { SeparatingAxisBounds } from './SeparatingAxisBounds.js';\nimport { closestPointsSegmentToSegment, sphereIntersectTriangle } from './MathUtilities.js';\nexport class SeparatingAxisTriangle extends Triangle {\n  constructor(...args) {\n    super(...args);\n    this.isSeparatingAxisTriangle = true;\n    this.satAxes = new Array(4).fill().map(() => new Vector3());\n    this.satBounds = new Array(4).fill().map(() => new SeparatingAxisBounds());\n    this.points = [this.a, this.b, this.c];\n    this.sphere = new Sphere();\n    this.needsUpdate = false;\n  }\n  intersectsSphere(sphere) {\n    return sphereIntersectTriangle(sphere, this);\n  }\n  update() {\n    const a = this.a;\n    const b = this.b;\n    const c = this.c;\n    const points = this.points;\n    const satAxes = this.satAxes;\n    const satBounds = this.satBounds;\n    const axis0 = satAxes[0];\n    const sab0 = satBounds[0];\n    this.getNormal(axis0);\n    sab0.setFromPoints(axis0, points);\n    const axis1 = satAxes[1];\n    const sab1 = satBounds[1];\n    axis1.subVectors(a, b);\n    sab1.setFromPoints(axis1, points);\n    const axis2 = satAxes[2];\n    const sab2 = satBounds[2];\n    axis2.subVectors(b, c);\n    sab2.setFromPoints(axis2, points);\n    const axis3 = satAxes[3];\n    const sab3 = satBounds[3];\n    axis3.subVectors(c, a);\n    sab3.setFromPoints(axis3, points);\n    this.sphere.setFromPoints(this.points);\n    this.needsUpdate = false;\n  }\n}\nSeparatingAxisTriangle.prototype.closestPointToSegment = function () {\n  const point1 = new Vector3();\n  const point2 = new Vector3();\n  const edge = new Line3();\n  return function distanceToSegment(segment, target1 = null, target2 = null) {\n    const {\n      start,\n      end\n    } = segment;\n    const points = this.points;\n    let distSq;\n    let closestDistanceSq = Infinity;\n\n    // check the triangle edges\n    for (let i = 0; i < 3; i++) {\n      const nexti = (i + 1) % 3;\n      edge.start.copy(points[i]);\n      edge.end.copy(points[nexti]);\n      closestPointsSegmentToSegment(edge, segment, point1, point2);\n      distSq = point1.distanceToSquared(point2);\n      if (distSq < closestDistanceSq) {\n        closestDistanceSq = distSq;\n        if (target1) target1.copy(point1);\n        if (target2) target2.copy(point2);\n      }\n    }\n\n    // check end points\n    this.closestPointToPoint(start, point1);\n    distSq = start.distanceToSquared(point1);\n    if (distSq < closestDistanceSq) {\n      closestDistanceSq = distSq;\n      if (target1) target1.copy(point1);\n      if (target2) target2.copy(start);\n    }\n    this.closestPointToPoint(end, point1);\n    distSq = end.distanceToSquared(point1);\n    if (distSq < closestDistanceSq) {\n      closestDistanceSq = distSq;\n      if (target1) target1.copy(point1);\n      if (target2) target2.copy(end);\n    }\n    return Math.sqrt(closestDistanceSq);\n  };\n}();\nSeparatingAxisTriangle.prototype.intersectsTriangle = function () {\n  const saTri2 = new SeparatingAxisTriangle();\n  const arr1 = new Array(3);\n  const arr2 = new Array(3);\n  const cachedSatBounds = new SeparatingAxisBounds();\n  const cachedSatBounds2 = new SeparatingAxisBounds();\n  const cachedAxis = new Vector3();\n  return function intersectsTriangle(other) {\n    if (this.needsUpdate) {\n      this.update();\n    }\n    if (!other.isSeparatingAxisTriangle) {\n      saTri2.copy(other);\n      saTri2.update();\n      other = saTri2;\n    } else if (other.needsUpdate) {\n      other.update();\n    }\n    const satBounds1 = this.satBounds;\n    const satAxes1 = this.satAxes;\n    arr2[0] = other.a;\n    arr2[1] = other.b;\n    arr2[2] = other.c;\n    for (let i = 0; i < 4; i++) {\n      const sb = satBounds1[i];\n      const sa = satAxes1[i];\n      cachedSatBounds.setFromPoints(sa, arr2);\n      if (sb.isSeparated(cachedSatBounds)) return false;\n    }\n    const satBounds2 = other.satBounds;\n    const satAxes2 = other.satAxes;\n    arr1[0] = this.a;\n    arr1[1] = this.b;\n    arr1[2] = this.c;\n    for (let i = 0; i < 4; i++) {\n      const sb = satBounds2[i];\n      const sa = satAxes2[i];\n      cachedSatBounds.setFromPoints(sa, arr1);\n      if (sb.isSeparated(cachedSatBounds)) return false;\n    }\n\n    // check crossed axes\n    for (let i = 0; i < 4; i++) {\n      const sa1 = satAxes1[i];\n      for (let i2 = 0; i2 < 4; i2++) {\n        const sa2 = satAxes2[i2];\n        cachedAxis.crossVectors(sa1, sa2);\n        cachedSatBounds.setFromPoints(cachedAxis, arr1);\n        cachedSatBounds2.setFromPoints(cachedAxis, arr2);\n        if (cachedSatBounds.isSeparated(cachedSatBounds2)) return false;\n      }\n    }\n    return true;\n  };\n}();\nSeparatingAxisTriangle.prototype.distanceToPoint = function () {\n  const target = new Vector3();\n  return function distanceToPoint(point) {\n    this.closestPointToPoint(point, target);\n    return point.distanceTo(target);\n  };\n}();\nSeparatingAxisTriangle.prototype.distanceToTriangle = function () {\n  const point = new Vector3();\n  const point2 = new Vector3();\n  const cornerFields = ['a', 'b', 'c'];\n  const line1 = new Line3();\n  const line2 = new Line3();\n  return function distanceToTriangle(other, target1 = null, target2 = null) {\n    if (this.intersectsTriangle(other)) {\n      // TODO: This will not result in a point that lies on\n      // the intersection line of the triangles\n      if (target1 || target2) {\n        this.getMidpoint(point);\n        other.closestPointToPoint(point, point2);\n        this.closestPointToPoint(point2, point);\n        if (target1) target1.copy(point);\n        if (target2) target2.copy(point2);\n      }\n      return 0;\n    }\n    let closestDistanceSq = Infinity;\n\n    // check all point distances\n    for (let i = 0; i < 3; i++) {\n      let dist;\n      const field = cornerFields[i];\n      const otherVec = other[field];\n      this.closestPointToPoint(otherVec, point);\n      dist = otherVec.distanceToSquared(point);\n      if (dist < closestDistanceSq) {\n        closestDistanceSq = dist;\n        if (target1) target1.copy(point);\n        if (target2) target2.copy(otherVec);\n      }\n      const thisVec = this[field];\n      other.closestPointToPoint(thisVec, point);\n      dist = thisVec.distanceToSquared(point);\n      if (dist < closestDistanceSq) {\n        closestDistanceSq = dist;\n        if (target1) target1.copy(thisVec);\n        if (target2) target2.copy(point);\n      }\n    }\n    for (let i = 0; i < 3; i++) {\n      const f11 = cornerFields[i];\n      const f12 = cornerFields[(i + 1) % 3];\n      line1.set(this[f11], this[f12]);\n      for (let i2 = 0; i2 < 3; i2++) {\n        const f21 = cornerFields[i2];\n        const f22 = cornerFields[(i2 + 1) % 3];\n        line2.set(other[f21], other[f22]);\n        closestPointsSegmentToSegment(line1, line2, point, point2);\n        const dist = point.distanceToSquared(point2);\n        if (dist < closestDistanceSq) {\n          closestDistanceSq = dist;\n          if (target1) target1.copy(point);\n          if (target2) target2.copy(point2);\n        }\n      }\n    }\n    return Math.sqrt(closestDistanceSq);\n  };\n}();","map":{"version":3,"names":["Triangle","Vector3","Line3","Sphere","SeparatingAxisBounds","closestPointsSegmentToSegment","sphereIntersectTriangle","SeparatingAxisTriangle","constructor","args","isSeparatingAxisTriangle","satAxes","Array","fill","map","satBounds","points","a","b","c","sphere","needsUpdate","intersectsSphere","update","axis0","sab0","getNormal","setFromPoints","axis1","sab1","subVectors","axis2","sab2","axis3","sab3","prototype","closestPointToSegment","point1","point2","edge","distanceToSegment","segment","target1","target2","start","end","distSq","closestDistanceSq","Infinity","i","nexti","copy","distanceToSquared","closestPointToPoint","Math","sqrt","intersectsTriangle","saTri2","arr1","arr2","cachedSatBounds","cachedSatBounds2","cachedAxis","other","satBounds1","satAxes1","sb","sa","isSeparated","satBounds2","satAxes2","sa1","i2","sa2","crossVectors","distanceToPoint","target","point","distanceTo","distanceToTriangle","cornerFields","line1","line2","getMidpoint","dist","field","otherVec","thisVec","f11","f12","set","f21","f22"],"sources":["C:/Users/Work/node_modules/three-mesh-bvh/src/Utils/SeparatingAxisTriangle.js"],"sourcesContent":["import { Triangle, Vector3, Line3, Sphere } from 'three';\r\nimport { SeparatingAxisBounds } from './SeparatingAxisBounds.js';\r\nimport { closestPointsSegmentToSegment, sphereIntersectTriangle } from './MathUtilities.js';\r\n\r\nexport class SeparatingAxisTriangle extends Triangle {\r\n\r\n\tconstructor( ...args ) {\r\n\r\n\t\tsuper( ...args );\r\n\r\n\t\tthis.isSeparatingAxisTriangle = true;\r\n\t\tthis.satAxes = new Array( 4 ).fill().map( () => new Vector3() );\r\n\t\tthis.satBounds = new Array( 4 ).fill().map( () => new SeparatingAxisBounds() );\r\n\t\tthis.points = [ this.a, this.b, this.c ];\r\n\t\tthis.sphere = new Sphere();\r\n\t\tthis.needsUpdate = false;\r\n\r\n\t}\r\n\r\n\tintersectsSphere( sphere ) {\r\n\r\n\t\treturn sphereIntersectTriangle( sphere, this );\r\n\r\n\t}\r\n\r\n\tupdate() {\r\n\r\n\t\tconst a = this.a;\r\n\t\tconst b = this.b;\r\n\t\tconst c = this.c;\r\n\t\tconst points = this.points;\r\n\r\n\t\tconst satAxes = this.satAxes;\r\n\t\tconst satBounds = this.satBounds;\r\n\r\n\t\tconst axis0 = satAxes[ 0 ];\r\n\t\tconst sab0 = satBounds[ 0 ];\r\n\t\tthis.getNormal( axis0 );\r\n\t\tsab0.setFromPoints( axis0, points );\r\n\r\n\t\tconst axis1 = satAxes[ 1 ];\r\n\t\tconst sab1 = satBounds[ 1 ];\r\n\t\taxis1.subVectors( a, b );\r\n\t\tsab1.setFromPoints( axis1, points );\r\n\r\n\t\tconst axis2 = satAxes[ 2 ];\r\n\t\tconst sab2 = satBounds[ 2 ];\r\n\t\taxis2.subVectors( b, c );\r\n\t\tsab2.setFromPoints( axis2, points );\r\n\r\n\t\tconst axis3 = satAxes[ 3 ];\r\n\t\tconst sab3 = satBounds[ 3 ];\r\n\t\taxis3.subVectors( c, a );\r\n\t\tsab3.setFromPoints( axis3, points );\r\n\r\n\t\tthis.sphere.setFromPoints( this.points );\r\n\t\tthis.needsUpdate = false;\r\n\r\n\t}\r\n\r\n}\r\n\r\nSeparatingAxisTriangle.prototype.closestPointToSegment = ( function () {\r\n\r\n\tconst point1 = new Vector3();\r\n\tconst point2 = new Vector3();\r\n\tconst edge = new Line3();\r\n\r\n\treturn function distanceToSegment( segment, target1 = null, target2 = null ) {\r\n\r\n\t\tconst { start, end } = segment;\r\n\t\tconst points = this.points;\r\n\t\tlet distSq;\r\n\t\tlet closestDistanceSq = Infinity;\r\n\r\n\t\t// check the triangle edges\r\n\t\tfor ( let i = 0; i < 3; i ++ ) {\r\n\r\n\t\t\tconst nexti = ( i + 1 ) % 3;\r\n\t\t\tedge.start.copy( points[ i ] );\r\n\t\t\tedge.end.copy( points[ nexti ] );\r\n\r\n\t\t\tclosestPointsSegmentToSegment( edge, segment, point1, point2 );\r\n\r\n\t\t\tdistSq = point1.distanceToSquared( point2 );\r\n\t\t\tif ( distSq < closestDistanceSq ) {\r\n\r\n\t\t\t\tclosestDistanceSq = distSq;\r\n\t\t\t\tif ( target1 ) target1.copy( point1 );\r\n\t\t\t\tif ( target2 ) target2.copy( point2 );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\t// check end points\r\n\t\tthis.closestPointToPoint( start, point1 );\r\n\t\tdistSq = start.distanceToSquared( point1 );\r\n\t\tif ( distSq < closestDistanceSq ) {\r\n\r\n\t\t\tclosestDistanceSq = distSq;\r\n\t\t\tif ( target1 ) target1.copy( point1 );\r\n\t\t\tif ( target2 ) target2.copy( start );\r\n\r\n\t\t}\r\n\r\n\t\tthis.closestPointToPoint( end, point1 );\r\n\t\tdistSq = end.distanceToSquared( point1 );\r\n\t\tif ( distSq < closestDistanceSq ) {\r\n\r\n\t\t\tclosestDistanceSq = distSq;\r\n\t\t\tif ( target1 ) target1.copy( point1 );\r\n\t\t\tif ( target2 ) target2.copy( end );\r\n\r\n\t\t}\r\n\r\n\t\treturn Math.sqrt( closestDistanceSq );\r\n\r\n\t};\r\n\r\n} )();\r\n\r\nSeparatingAxisTriangle.prototype.intersectsTriangle = ( function () {\r\n\r\n\tconst saTri2 = new SeparatingAxisTriangle();\r\n\tconst arr1 = new Array( 3 );\r\n\tconst arr2 = new Array( 3 );\r\n\tconst cachedSatBounds = new SeparatingAxisBounds();\r\n\tconst cachedSatBounds2 = new SeparatingAxisBounds();\r\n\tconst cachedAxis = new Vector3();\r\n\treturn function intersectsTriangle( other ) {\r\n\r\n\t\tif ( this.needsUpdate ) {\r\n\r\n\t\t\tthis.update();\r\n\r\n\t\t}\r\n\r\n\t\tif ( ! other.isSeparatingAxisTriangle ) {\r\n\r\n\t\t\tsaTri2.copy( other );\r\n\t\t\tsaTri2.update();\r\n\t\t\tother = saTri2;\r\n\r\n\t\t} else if ( other.needsUpdate ) {\r\n\r\n\t\t\tother.update();\r\n\r\n\t\t}\r\n\r\n\t\tconst satBounds1 = this.satBounds;\r\n\t\tconst satAxes1 = this.satAxes;\r\n\t\tarr2[ 0 ] = other.a;\r\n\t\tarr2[ 1 ] = other.b;\r\n\t\tarr2[ 2 ] = other.c;\r\n\t\tfor ( let i = 0; i < 4; i ++ ) {\r\n\r\n\t\t\tconst sb = satBounds1[ i ];\r\n\t\t\tconst sa = satAxes1[ i ];\r\n\t\t\tcachedSatBounds.setFromPoints( sa, arr2 );\r\n\t\t\tif ( sb.isSeparated( cachedSatBounds ) ) return false;\r\n\r\n\t\t}\r\n\r\n\t\tconst satBounds2 = other.satBounds;\r\n\t\tconst satAxes2 = other.satAxes;\r\n\t\tarr1[ 0 ] = this.a;\r\n\t\tarr1[ 1 ] = this.b;\r\n\t\tarr1[ 2 ] = this.c;\r\n\t\tfor ( let i = 0; i < 4; i ++ ) {\r\n\r\n\t\t\tconst sb = satBounds2[ i ];\r\n\t\t\tconst sa = satAxes2[ i ];\r\n\t\t\tcachedSatBounds.setFromPoints( sa, arr1 );\r\n\t\t\tif ( sb.isSeparated( cachedSatBounds ) ) return false;\r\n\r\n\t\t}\r\n\r\n\t\t// check crossed axes\r\n\t\tfor ( let i = 0; i < 4; i ++ ) {\r\n\r\n\t\t\tconst sa1 = satAxes1[ i ];\r\n\t\t\tfor ( let i2 = 0; i2 < 4; i2 ++ ) {\r\n\r\n\t\t\t\tconst sa2 = satAxes2[ i2 ];\r\n\t\t\t\tcachedAxis.crossVectors( sa1, sa2 );\r\n\t\t\t\tcachedSatBounds.setFromPoints( cachedAxis, arr1 );\r\n\t\t\t\tcachedSatBounds2.setFromPoints( cachedAxis, arr2 );\r\n\t\t\t\tif ( cachedSatBounds.isSeparated( cachedSatBounds2 ) ) return false;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn true;\r\n\r\n\t};\r\n\r\n} )();\r\n\r\n\r\nSeparatingAxisTriangle.prototype.distanceToPoint = ( function () {\r\n\r\n\tconst target = new Vector3();\r\n\treturn function distanceToPoint( point ) {\r\n\r\n\t\tthis.closestPointToPoint( point, target );\r\n\t\treturn point.distanceTo( target );\r\n\r\n\t};\r\n\r\n} )();\r\n\r\n\r\nSeparatingAxisTriangle.prototype.distanceToTriangle = ( function () {\r\n\r\n\tconst point = new Vector3();\r\n\tconst point2 = new Vector3();\r\n\tconst cornerFields = [ 'a', 'b', 'c' ];\r\n\tconst line1 = new Line3();\r\n\tconst line2 = new Line3();\r\n\r\n\treturn function distanceToTriangle( other, target1 = null, target2 = null ) {\r\n\r\n\t\tif ( this.intersectsTriangle( other ) ) {\r\n\r\n\t\t\t// TODO: This will not result in a point that lies on\r\n\t\t\t// the intersection line of the triangles\r\n\t\t\tif ( target1 || target2 ) {\r\n\r\n\t\t\t\tthis.getMidpoint( point );\r\n\t\t\t\tother.closestPointToPoint( point, point2 );\r\n\t\t\t\tthis.closestPointToPoint( point2, point );\r\n\r\n\t\t\t\tif ( target1 ) target1.copy( point );\r\n\t\t\t\tif ( target2 ) target2.copy( point2 );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn 0;\r\n\r\n\t\t}\r\n\r\n\t\tlet closestDistanceSq = Infinity;\r\n\r\n\t\t// check all point distances\r\n\t\tfor ( let i = 0; i < 3; i ++ ) {\r\n\r\n\t\t\tlet dist;\r\n\t\t\tconst field = cornerFields[ i ];\r\n\t\t\tconst otherVec = other[ field ];\r\n\t\t\tthis.closestPointToPoint( otherVec, point );\r\n\r\n\t\t\tdist = otherVec.distanceToSquared( point );\r\n\r\n\t\t\tif ( dist < closestDistanceSq ) {\r\n\r\n\t\t\t\tclosestDistanceSq = dist;\r\n\t\t\t\tif ( target1 ) target1.copy( point );\r\n\t\t\t\tif ( target2 ) target2.copy( otherVec );\r\n\r\n\t\t\t}\r\n\r\n\r\n\t\t\tconst thisVec = this[ field ];\r\n\t\t\tother.closestPointToPoint( thisVec, point );\r\n\r\n\t\t\tdist = thisVec.distanceToSquared( point );\r\n\r\n\t\t\tif ( dist < closestDistanceSq ) {\r\n\r\n\t\t\t\tclosestDistanceSq = dist;\r\n\t\t\t\tif ( target1 ) target1.copy( thisVec );\r\n\t\t\t\tif ( target2 ) target2.copy( point );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tfor ( let i = 0; i < 3; i ++ ) {\r\n\r\n\t\t\tconst f11 = cornerFields[ i ];\r\n\t\t\tconst f12 = cornerFields[ ( i + 1 ) % 3 ];\r\n\t\t\tline1.set( this[ f11 ], this[ f12 ] );\r\n\t\t\tfor ( let i2 = 0; i2 < 3; i2 ++ ) {\r\n\r\n\t\t\t\tconst f21 = cornerFields[ i2 ];\r\n\t\t\t\tconst f22 = cornerFields[ ( i2 + 1 ) % 3 ];\r\n\t\t\t\tline2.set( other[ f21 ], other[ f22 ] );\r\n\r\n\t\t\t\tclosestPointsSegmentToSegment( line1, line2, point, point2 );\r\n\r\n\t\t\t\tconst dist = point.distanceToSquared( point2 );\r\n\t\t\t\tif ( dist < closestDistanceSq ) {\r\n\r\n\t\t\t\t\tclosestDistanceSq = dist;\r\n\t\t\t\t\tif ( target1 ) target1.copy( point );\r\n\t\t\t\t\tif ( target2 ) target2.copy( point2 );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn Math.sqrt( closestDistanceSq );\r\n\r\n\t};\r\n\r\n} )();\r\n\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}