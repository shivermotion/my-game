{"ast":null,"code":"import { Mesh, Color, Plane, Vector3, Matrix4, Vector4, PerspectiveCamera, WebGLRenderTarget, MathUtils, ShaderMaterial, UniformsUtils, LinearFilter, RGBFormat } from 'three';\nclass Reflector extends Mesh {\n  constructor(geometry, options = {}) {\n    super(geometry);\n    this.type = 'Reflector';\n    const scope = this;\n    const color = options.color !== undefined ? new Color(options.color) : new Color(0x7f7f7f);\n    const textureWidth = options.textureWidth || 512;\n    const textureHeight = options.textureHeight || 512;\n    const clipBias = options.clipBias || 0;\n    const shader = options.shader || Reflector.ReflectorShader; //\n\n    const reflectorPlane = new Plane();\n    const normal = new Vector3();\n    const reflectorWorldPosition = new Vector3();\n    const cameraWorldPosition = new Vector3();\n    const rotationMatrix = new Matrix4();\n    const lookAtPosition = new Vector3(0, 0, -1);\n    const clipPlane = new Vector4();\n    const view = new Vector3();\n    const target = new Vector3();\n    const q = new Vector4();\n    const textureMatrix = new Matrix4();\n    const virtualCamera = new PerspectiveCamera();\n    const parameters = {\n      minFilter: LinearFilter,\n      magFilter: LinearFilter,\n      format: RGBFormat\n    };\n    const renderTarget = new WebGLRenderTarget(textureWidth, textureHeight, parameters);\n    if (!MathUtils.isPowerOfTwo(textureWidth) || !MathUtils.isPowerOfTwo(textureHeight)) {\n      renderTarget.texture.generateMipmaps = false;\n    }\n    const material = new ShaderMaterial({\n      uniforms: UniformsUtils.clone(shader.uniforms),\n      fragmentShader: shader.fragmentShader,\n      vertexShader: shader.vertexShader\n    });\n    material.uniforms['tDiffuse'].value = renderTarget.texture;\n    material.uniforms['color'].value = color;\n    material.uniforms['textureMatrix'].value = textureMatrix;\n    this.material = material;\n    this.onBeforeRender = function (renderer, scene, camera) {\n      reflectorWorldPosition.setFromMatrixPosition(scope.matrixWorld);\n      cameraWorldPosition.setFromMatrixPosition(camera.matrixWorld);\n      rotationMatrix.extractRotation(scope.matrixWorld);\n      normal.set(0, 0, 1);\n      normal.applyMatrix4(rotationMatrix);\n      view.subVectors(reflectorWorldPosition, cameraWorldPosition); // Avoid rendering when reflector is facing away\n\n      if (view.dot(normal) > 0) return;\n      view.reflect(normal).negate();\n      view.add(reflectorWorldPosition);\n      rotationMatrix.extractRotation(camera.matrixWorld);\n      lookAtPosition.set(0, 0, -1);\n      lookAtPosition.applyMatrix4(rotationMatrix);\n      lookAtPosition.add(cameraWorldPosition);\n      target.subVectors(reflectorWorldPosition, lookAtPosition);\n      target.reflect(normal).negate();\n      target.add(reflectorWorldPosition);\n      virtualCamera.position.copy(view);\n      virtualCamera.up.set(0, 1, 0);\n      virtualCamera.up.applyMatrix4(rotationMatrix);\n      virtualCamera.up.reflect(normal);\n      virtualCamera.lookAt(target);\n      virtualCamera.far = camera.far; // Used in WebGLBackground\n\n      virtualCamera.updateMatrixWorld();\n      virtualCamera.projectionMatrix.copy(camera.projectionMatrix); // Update the texture matrix\n\n      textureMatrix.set(0.5, 0.0, 0.0, 0.5, 0.0, 0.5, 0.0, 0.5, 0.0, 0.0, 0.5, 0.5, 0.0, 0.0, 0.0, 1.0);\n      textureMatrix.multiply(virtualCamera.projectionMatrix);\n      textureMatrix.multiply(virtualCamera.matrixWorldInverse);\n      textureMatrix.multiply(scope.matrixWorld); // Now update projection matrix with new clip plane, implementing code from: http://www.terathon.com/code/oblique.html\n      // Paper explaining this technique: http://www.terathon.com/lengyel/Lengyel-Oblique.pdf\n\n      reflectorPlane.setFromNormalAndCoplanarPoint(normal, reflectorWorldPosition);\n      reflectorPlane.applyMatrix4(virtualCamera.matrixWorldInverse);\n      clipPlane.set(reflectorPlane.normal.x, reflectorPlane.normal.y, reflectorPlane.normal.z, reflectorPlane.constant);\n      const projectionMatrix = virtualCamera.projectionMatrix;\n      q.x = (Math.sign(clipPlane.x) + projectionMatrix.elements[8]) / projectionMatrix.elements[0];\n      q.y = (Math.sign(clipPlane.y) + projectionMatrix.elements[9]) / projectionMatrix.elements[5];\n      q.z = -1.0;\n      q.w = (1.0 + projectionMatrix.elements[10]) / projectionMatrix.elements[14]; // Calculate the scaled plane vector\n\n      clipPlane.multiplyScalar(2.0 / clipPlane.dot(q)); // Replacing the third row of the projection matrix\n\n      projectionMatrix.elements[2] = clipPlane.x;\n      projectionMatrix.elements[6] = clipPlane.y;\n      projectionMatrix.elements[10] = clipPlane.z + 1.0 - clipBias;\n      projectionMatrix.elements[14] = clipPlane.w; // Render\n\n      renderTarget.texture.encoding = renderer.outputEncoding;\n      scope.visible = false;\n      const currentRenderTarget = renderer.getRenderTarget();\n      const currentXrEnabled = renderer.xr.enabled;\n      const currentShadowAutoUpdate = renderer.shadowMap.autoUpdate;\n      renderer.xr.enabled = false; // Avoid camera modification\n\n      renderer.shadowMap.autoUpdate = false; // Avoid re-computing shadows\n\n      renderer.setRenderTarget(renderTarget);\n      renderer.state.buffers.depth.setMask(true); // make sure the depth buffer is writable so it can be properly cleared, see #18897\n\n      if (renderer.autoClear === false) renderer.clear();\n      renderer.render(scene, virtualCamera);\n      renderer.xr.enabled = currentXrEnabled;\n      renderer.shadowMap.autoUpdate = currentShadowAutoUpdate;\n      renderer.setRenderTarget(currentRenderTarget); // Restore viewport\n\n      const viewport = camera.viewport;\n      if (viewport !== undefined) {\n        renderer.state.viewport(viewport);\n      }\n      scope.visible = true;\n    };\n    this.getRenderTarget = function () {\n      return renderTarget;\n    };\n  }\n}\nReflector.prototype.isReflector = true;\nReflector.ReflectorShader = {\n  uniforms: {\n    color: {\n      value: null\n    },\n    tDiffuse: {\n      value: null\n    },\n    textureMatrix: {\n      value: null\n    }\n  },\n  vertexShader: /* glsl */\n  `\n\t\tuniform mat4 textureMatrix;\n\t\tvarying vec4 vUv;\n\n\t\tvoid main() {\n\n\t\t\tvUv = textureMatrix * vec4( position, 1.0 );\n\n\t\t\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n\n\t\t}`,\n  fragmentShader: /* glsl */\n  `\n\t\tuniform vec3 color;\n\t\tuniform sampler2D tDiffuse;\n\t\tvarying vec4 vUv;\n\n\t\tfloat blendOverlay( float base, float blend ) {\n\n\t\t\treturn( base < 0.5 ? ( 2.0 * base * blend ) : ( 1.0 - 2.0 * ( 1.0 - base ) * ( 1.0 - blend ) ) );\n\n\t\t}\n\n\t\tvec3 blendOverlay( vec3 base, vec3 blend ) {\n\n\t\t\treturn vec3( blendOverlay( base.r, blend.r ), blendOverlay( base.g, blend.g ), blendOverlay( base.b, blend.b ) );\n\n\t\t}\n\n\t\tvoid main() {\n\n\t\t\tvec4 base = texture2DProj( tDiffuse, vUv );\n\t\t\tgl_FragColor = vec4( blendOverlay( base.rgb, color ), 1.0 );\n\n\t\t}`\n};\nexport { Reflector };","map":{"version":3,"names":["Mesh","Color","Plane","Vector3","Matrix4","Vector4","PerspectiveCamera","WebGLRenderTarget","MathUtils","ShaderMaterial","UniformsUtils","LinearFilter","RGBFormat","Reflector","constructor","geometry","options","type","scope","color","undefined","textureWidth","textureHeight","clipBias","shader","ReflectorShader","reflectorPlane","normal","reflectorWorldPosition","cameraWorldPosition","rotationMatrix","lookAtPosition","clipPlane","view","target","q","textureMatrix","virtualCamera","parameters","minFilter","magFilter","format","renderTarget","isPowerOfTwo","texture","generateMipmaps","material","uniforms","clone","fragmentShader","vertexShader","value","onBeforeRender","renderer","scene","camera","setFromMatrixPosition","matrixWorld","extractRotation","set","applyMatrix4","subVectors","dot","reflect","negate","add","position","copy","up","lookAt","far","updateMatrixWorld","projectionMatrix","multiply","matrixWorldInverse","setFromNormalAndCoplanarPoint","x","y","z","constant","Math","sign","elements","w","multiplyScalar","encoding","outputEncoding","visible","currentRenderTarget","getRenderTarget","currentXrEnabled","xr","enabled","currentShadowAutoUpdate","shadowMap","autoUpdate","setRenderTarget","state","buffers","depth","setMask","autoClear","clear","render","viewport","prototype","isReflector","tDiffuse"],"sources":["C:/Users/Work/node_modules/three-stdlib/objects/Reflector.js"],"sourcesContent":["import { Mesh, Color, Plane, Vector3, Matrix4, Vector4, PerspectiveCamera, WebGLRenderTarget, MathUtils, ShaderMaterial, UniformsUtils, LinearFilter, RGBFormat } from 'three';\n\nclass Reflector extends Mesh {\n  constructor(geometry, options = {}) {\n    super(geometry);\n    this.type = 'Reflector';\n    const scope = this;\n    const color = options.color !== undefined ? new Color(options.color) : new Color(0x7f7f7f);\n    const textureWidth = options.textureWidth || 512;\n    const textureHeight = options.textureHeight || 512;\n    const clipBias = options.clipBias || 0;\n    const shader = options.shader || Reflector.ReflectorShader; //\n\n    const reflectorPlane = new Plane();\n    const normal = new Vector3();\n    const reflectorWorldPosition = new Vector3();\n    const cameraWorldPosition = new Vector3();\n    const rotationMatrix = new Matrix4();\n    const lookAtPosition = new Vector3(0, 0, -1);\n    const clipPlane = new Vector4();\n    const view = new Vector3();\n    const target = new Vector3();\n    const q = new Vector4();\n    const textureMatrix = new Matrix4();\n    const virtualCamera = new PerspectiveCamera();\n    const parameters = {\n      minFilter: LinearFilter,\n      magFilter: LinearFilter,\n      format: RGBFormat\n    };\n    const renderTarget = new WebGLRenderTarget(textureWidth, textureHeight, parameters);\n\n    if (!MathUtils.isPowerOfTwo(textureWidth) || !MathUtils.isPowerOfTwo(textureHeight)) {\n      renderTarget.texture.generateMipmaps = false;\n    }\n\n    const material = new ShaderMaterial({\n      uniforms: UniformsUtils.clone(shader.uniforms),\n      fragmentShader: shader.fragmentShader,\n      vertexShader: shader.vertexShader\n    });\n    material.uniforms['tDiffuse'].value = renderTarget.texture;\n    material.uniforms['color'].value = color;\n    material.uniforms['textureMatrix'].value = textureMatrix;\n    this.material = material;\n\n    this.onBeforeRender = function (renderer, scene, camera) {\n      reflectorWorldPosition.setFromMatrixPosition(scope.matrixWorld);\n      cameraWorldPosition.setFromMatrixPosition(camera.matrixWorld);\n      rotationMatrix.extractRotation(scope.matrixWorld);\n      normal.set(0, 0, 1);\n      normal.applyMatrix4(rotationMatrix);\n      view.subVectors(reflectorWorldPosition, cameraWorldPosition); // Avoid rendering when reflector is facing away\n\n      if (view.dot(normal) > 0) return;\n      view.reflect(normal).negate();\n      view.add(reflectorWorldPosition);\n      rotationMatrix.extractRotation(camera.matrixWorld);\n      lookAtPosition.set(0, 0, -1);\n      lookAtPosition.applyMatrix4(rotationMatrix);\n      lookAtPosition.add(cameraWorldPosition);\n      target.subVectors(reflectorWorldPosition, lookAtPosition);\n      target.reflect(normal).negate();\n      target.add(reflectorWorldPosition);\n      virtualCamera.position.copy(view);\n      virtualCamera.up.set(0, 1, 0);\n      virtualCamera.up.applyMatrix4(rotationMatrix);\n      virtualCamera.up.reflect(normal);\n      virtualCamera.lookAt(target);\n      virtualCamera.far = camera.far; // Used in WebGLBackground\n\n      virtualCamera.updateMatrixWorld();\n      virtualCamera.projectionMatrix.copy(camera.projectionMatrix); // Update the texture matrix\n\n      textureMatrix.set(0.5, 0.0, 0.0, 0.5, 0.0, 0.5, 0.0, 0.5, 0.0, 0.0, 0.5, 0.5, 0.0, 0.0, 0.0, 1.0);\n      textureMatrix.multiply(virtualCamera.projectionMatrix);\n      textureMatrix.multiply(virtualCamera.matrixWorldInverse);\n      textureMatrix.multiply(scope.matrixWorld); // Now update projection matrix with new clip plane, implementing code from: http://www.terathon.com/code/oblique.html\n      // Paper explaining this technique: http://www.terathon.com/lengyel/Lengyel-Oblique.pdf\n\n      reflectorPlane.setFromNormalAndCoplanarPoint(normal, reflectorWorldPosition);\n      reflectorPlane.applyMatrix4(virtualCamera.matrixWorldInverse);\n      clipPlane.set(reflectorPlane.normal.x, reflectorPlane.normal.y, reflectorPlane.normal.z, reflectorPlane.constant);\n      const projectionMatrix = virtualCamera.projectionMatrix;\n      q.x = (Math.sign(clipPlane.x) + projectionMatrix.elements[8]) / projectionMatrix.elements[0];\n      q.y = (Math.sign(clipPlane.y) + projectionMatrix.elements[9]) / projectionMatrix.elements[5];\n      q.z = -1.0;\n      q.w = (1.0 + projectionMatrix.elements[10]) / projectionMatrix.elements[14]; // Calculate the scaled plane vector\n\n      clipPlane.multiplyScalar(2.0 / clipPlane.dot(q)); // Replacing the third row of the projection matrix\n\n      projectionMatrix.elements[2] = clipPlane.x;\n      projectionMatrix.elements[6] = clipPlane.y;\n      projectionMatrix.elements[10] = clipPlane.z + 1.0 - clipBias;\n      projectionMatrix.elements[14] = clipPlane.w; // Render\n\n      renderTarget.texture.encoding = renderer.outputEncoding;\n      scope.visible = false;\n      const currentRenderTarget = renderer.getRenderTarget();\n      const currentXrEnabled = renderer.xr.enabled;\n      const currentShadowAutoUpdate = renderer.shadowMap.autoUpdate;\n      renderer.xr.enabled = false; // Avoid camera modification\n\n      renderer.shadowMap.autoUpdate = false; // Avoid re-computing shadows\n\n      renderer.setRenderTarget(renderTarget);\n      renderer.state.buffers.depth.setMask(true); // make sure the depth buffer is writable so it can be properly cleared, see #18897\n\n      if (renderer.autoClear === false) renderer.clear();\n      renderer.render(scene, virtualCamera);\n      renderer.xr.enabled = currentXrEnabled;\n      renderer.shadowMap.autoUpdate = currentShadowAutoUpdate;\n      renderer.setRenderTarget(currentRenderTarget); // Restore viewport\n\n      const viewport = camera.viewport;\n\n      if (viewport !== undefined) {\n        renderer.state.viewport(viewport);\n      }\n\n      scope.visible = true;\n    };\n\n    this.getRenderTarget = function () {\n      return renderTarget;\n    };\n  }\n\n}\n\nReflector.prototype.isReflector = true;\nReflector.ReflectorShader = {\n  uniforms: {\n    color: {\n      value: null\n    },\n    tDiffuse: {\n      value: null\n    },\n    textureMatrix: {\n      value: null\n    }\n  },\n  vertexShader:\n  /* glsl */\n  `\n\t\tuniform mat4 textureMatrix;\n\t\tvarying vec4 vUv;\n\n\t\tvoid main() {\n\n\t\t\tvUv = textureMatrix * vec4( position, 1.0 );\n\n\t\t\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n\n\t\t}`,\n  fragmentShader:\n  /* glsl */\n  `\n\t\tuniform vec3 color;\n\t\tuniform sampler2D tDiffuse;\n\t\tvarying vec4 vUv;\n\n\t\tfloat blendOverlay( float base, float blend ) {\n\n\t\t\treturn( base < 0.5 ? ( 2.0 * base * blend ) : ( 1.0 - 2.0 * ( 1.0 - base ) * ( 1.0 - blend ) ) );\n\n\t\t}\n\n\t\tvec3 blendOverlay( vec3 base, vec3 blend ) {\n\n\t\t\treturn vec3( blendOverlay( base.r, blend.r ), blendOverlay( base.g, blend.g ), blendOverlay( base.b, blend.b ) );\n\n\t\t}\n\n\t\tvoid main() {\n\n\t\t\tvec4 base = texture2DProj( tDiffuse, vUv );\n\t\t\tgl_FragColor = vec4( blendOverlay( base.rgb, color ), 1.0 );\n\n\t\t}`\n};\n\nexport { Reflector };\n"],"mappings":"AAAA,SAASA,IAAI,EAAEC,KAAK,EAAEC,KAAK,EAAEC,OAAO,EAAEC,OAAO,EAAEC,OAAO,EAAEC,iBAAiB,EAAEC,iBAAiB,EAAEC,SAAS,EAAEC,cAAc,EAAEC,aAAa,EAAEC,YAAY,EAAEC,SAAS,QAAQ,OAAO;AAE9K,MAAMC,SAAS,SAASb,IAAI,CAAC;EAC3Bc,WAAWA,CAACC,QAAQ,EAAEC,OAAO,GAAG,CAAC,CAAC,EAAE;IAClC,KAAK,CAACD,QAAQ,CAAC;IACf,IAAI,CAACE,IAAI,GAAG,WAAW;IACvB,MAAMC,KAAK,GAAG,IAAI;IAClB,MAAMC,KAAK,GAAGH,OAAO,CAACG,KAAK,KAAKC,SAAS,GAAG,IAAInB,KAAK,CAACe,OAAO,CAACG,KAAK,CAAC,GAAG,IAAIlB,KAAK,CAAC,QAAQ,CAAC;IAC1F,MAAMoB,YAAY,GAAGL,OAAO,CAACK,YAAY,IAAI,GAAG;IAChD,MAAMC,aAAa,GAAGN,OAAO,CAACM,aAAa,IAAI,GAAG;IAClD,MAAMC,QAAQ,GAAGP,OAAO,CAACO,QAAQ,IAAI,CAAC;IACtC,MAAMC,MAAM,GAAGR,OAAO,CAACQ,MAAM,IAAIX,SAAS,CAACY,eAAe,CAAC,CAAC;;IAE5D,MAAMC,cAAc,GAAG,IAAIxB,KAAK,CAAC,CAAC;IAClC,MAAMyB,MAAM,GAAG,IAAIxB,OAAO,CAAC,CAAC;IAC5B,MAAMyB,sBAAsB,GAAG,IAAIzB,OAAO,CAAC,CAAC;IAC5C,MAAM0B,mBAAmB,GAAG,IAAI1B,OAAO,CAAC,CAAC;IACzC,MAAM2B,cAAc,GAAG,IAAI1B,OAAO,CAAC,CAAC;IACpC,MAAM2B,cAAc,GAAG,IAAI5B,OAAO,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;IAC5C,MAAM6B,SAAS,GAAG,IAAI3B,OAAO,CAAC,CAAC;IAC/B,MAAM4B,IAAI,GAAG,IAAI9B,OAAO,CAAC,CAAC;IAC1B,MAAM+B,MAAM,GAAG,IAAI/B,OAAO,CAAC,CAAC;IAC5B,MAAMgC,CAAC,GAAG,IAAI9B,OAAO,CAAC,CAAC;IACvB,MAAM+B,aAAa,GAAG,IAAIhC,OAAO,CAAC,CAAC;IACnC,MAAMiC,aAAa,GAAG,IAAI/B,iBAAiB,CAAC,CAAC;IAC7C,MAAMgC,UAAU,GAAG;MACjBC,SAAS,EAAE5B,YAAY;MACvB6B,SAAS,EAAE7B,YAAY;MACvB8B,MAAM,EAAE7B;IACV,CAAC;IACD,MAAM8B,YAAY,GAAG,IAAInC,iBAAiB,CAACc,YAAY,EAAEC,aAAa,EAAEgB,UAAU,CAAC;IAEnF,IAAI,CAAC9B,SAAS,CAACmC,YAAY,CAACtB,YAAY,CAAC,IAAI,CAACb,SAAS,CAACmC,YAAY,CAACrB,aAAa,CAAC,EAAE;MACnFoB,YAAY,CAACE,OAAO,CAACC,eAAe,GAAG,KAAK;IAC9C;IAEA,MAAMC,QAAQ,GAAG,IAAIrC,cAAc,CAAC;MAClCsC,QAAQ,EAAErC,aAAa,CAACsC,KAAK,CAACxB,MAAM,CAACuB,QAAQ,CAAC;MAC9CE,cAAc,EAAEzB,MAAM,CAACyB,cAAc;MACrCC,YAAY,EAAE1B,MAAM,CAAC0B;IACvB,CAAC,CAAC;IACFJ,QAAQ,CAACC,QAAQ,CAAC,UAAU,CAAC,CAACI,KAAK,GAAGT,YAAY,CAACE,OAAO;IAC1DE,QAAQ,CAACC,QAAQ,CAAC,OAAO,CAAC,CAACI,KAAK,GAAGhC,KAAK;IACxC2B,QAAQ,CAACC,QAAQ,CAAC,eAAe,CAAC,CAACI,KAAK,GAAGf,aAAa;IACxD,IAAI,CAACU,QAAQ,GAAGA,QAAQ;IAExB,IAAI,CAACM,cAAc,GAAG,UAAUC,QAAQ,EAAEC,KAAK,EAAEC,MAAM,EAAE;MACvD3B,sBAAsB,CAAC4B,qBAAqB,CAACtC,KAAK,CAACuC,WAAW,CAAC;MAC/D5B,mBAAmB,CAAC2B,qBAAqB,CAACD,MAAM,CAACE,WAAW,CAAC;MAC7D3B,cAAc,CAAC4B,eAAe,CAACxC,KAAK,CAACuC,WAAW,CAAC;MACjD9B,MAAM,CAACgC,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;MACnBhC,MAAM,CAACiC,YAAY,CAAC9B,cAAc,CAAC;MACnCG,IAAI,CAAC4B,UAAU,CAACjC,sBAAsB,EAAEC,mBAAmB,CAAC,CAAC,CAAC;;MAE9D,IAAII,IAAI,CAAC6B,GAAG,CAACnC,MAAM,CAAC,GAAG,CAAC,EAAE;MAC1BM,IAAI,CAAC8B,OAAO,CAACpC,MAAM,CAAC,CAACqC,MAAM,CAAC,CAAC;MAC7B/B,IAAI,CAACgC,GAAG,CAACrC,sBAAsB,CAAC;MAChCE,cAAc,CAAC4B,eAAe,CAACH,MAAM,CAACE,WAAW,CAAC;MAClD1B,cAAc,CAAC4B,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;MAC5B5B,cAAc,CAAC6B,YAAY,CAAC9B,cAAc,CAAC;MAC3CC,cAAc,CAACkC,GAAG,CAACpC,mBAAmB,CAAC;MACvCK,MAAM,CAAC2B,UAAU,CAACjC,sBAAsB,EAAEG,cAAc,CAAC;MACzDG,MAAM,CAAC6B,OAAO,CAACpC,MAAM,CAAC,CAACqC,MAAM,CAAC,CAAC;MAC/B9B,MAAM,CAAC+B,GAAG,CAACrC,sBAAsB,CAAC;MAClCS,aAAa,CAAC6B,QAAQ,CAACC,IAAI,CAAClC,IAAI,CAAC;MACjCI,aAAa,CAAC+B,EAAE,CAACT,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;MAC7BtB,aAAa,CAAC+B,EAAE,CAACR,YAAY,CAAC9B,cAAc,CAAC;MAC7CO,aAAa,CAAC+B,EAAE,CAACL,OAAO,CAACpC,MAAM,CAAC;MAChCU,aAAa,CAACgC,MAAM,CAACnC,MAAM,CAAC;MAC5BG,aAAa,CAACiC,GAAG,GAAGf,MAAM,CAACe,GAAG,CAAC,CAAC;;MAEhCjC,aAAa,CAACkC,iBAAiB,CAAC,CAAC;MACjClC,aAAa,CAACmC,gBAAgB,CAACL,IAAI,CAACZ,MAAM,CAACiB,gBAAgB,CAAC,CAAC,CAAC;;MAE9DpC,aAAa,CAACuB,GAAG,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC;MACjGvB,aAAa,CAACqC,QAAQ,CAACpC,aAAa,CAACmC,gBAAgB,CAAC;MACtDpC,aAAa,CAACqC,QAAQ,CAACpC,aAAa,CAACqC,kBAAkB,CAAC;MACxDtC,aAAa,CAACqC,QAAQ,CAACvD,KAAK,CAACuC,WAAW,CAAC,CAAC,CAAC;MAC3C;;MAEA/B,cAAc,CAACiD,6BAA6B,CAAChD,MAAM,EAAEC,sBAAsB,CAAC;MAC5EF,cAAc,CAACkC,YAAY,CAACvB,aAAa,CAACqC,kBAAkB,CAAC;MAC7D1C,SAAS,CAAC2B,GAAG,CAACjC,cAAc,CAACC,MAAM,CAACiD,CAAC,EAAElD,cAAc,CAACC,MAAM,CAACkD,CAAC,EAAEnD,cAAc,CAACC,MAAM,CAACmD,CAAC,EAAEpD,cAAc,CAACqD,QAAQ,CAAC;MACjH,MAAMP,gBAAgB,GAAGnC,aAAa,CAACmC,gBAAgB;MACvDrC,CAAC,CAACyC,CAAC,GAAG,CAACI,IAAI,CAACC,IAAI,CAACjD,SAAS,CAAC4C,CAAC,CAAC,GAAGJ,gBAAgB,CAACU,QAAQ,CAAC,CAAC,CAAC,IAAIV,gBAAgB,CAACU,QAAQ,CAAC,CAAC,CAAC;MAC5F/C,CAAC,CAAC0C,CAAC,GAAG,CAACG,IAAI,CAACC,IAAI,CAACjD,SAAS,CAAC6C,CAAC,CAAC,GAAGL,gBAAgB,CAACU,QAAQ,CAAC,CAAC,CAAC,IAAIV,gBAAgB,CAACU,QAAQ,CAAC,CAAC,CAAC;MAC5F/C,CAAC,CAAC2C,CAAC,GAAG,CAAC,GAAG;MACV3C,CAAC,CAACgD,CAAC,GAAG,CAAC,GAAG,GAAGX,gBAAgB,CAACU,QAAQ,CAAC,EAAE,CAAC,IAAIV,gBAAgB,CAACU,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;;MAE7ElD,SAAS,CAACoD,cAAc,CAAC,GAAG,GAAGpD,SAAS,CAAC8B,GAAG,CAAC3B,CAAC,CAAC,CAAC,CAAC,CAAC;;MAElDqC,gBAAgB,CAACU,QAAQ,CAAC,CAAC,CAAC,GAAGlD,SAAS,CAAC4C,CAAC;MAC1CJ,gBAAgB,CAACU,QAAQ,CAAC,CAAC,CAAC,GAAGlD,SAAS,CAAC6C,CAAC;MAC1CL,gBAAgB,CAACU,QAAQ,CAAC,EAAE,CAAC,GAAGlD,SAAS,CAAC8C,CAAC,GAAG,GAAG,GAAGvD,QAAQ;MAC5DiD,gBAAgB,CAACU,QAAQ,CAAC,EAAE,CAAC,GAAGlD,SAAS,CAACmD,CAAC,CAAC,CAAC;;MAE7CzC,YAAY,CAACE,OAAO,CAACyC,QAAQ,GAAGhC,QAAQ,CAACiC,cAAc;MACvDpE,KAAK,CAACqE,OAAO,GAAG,KAAK;MACrB,MAAMC,mBAAmB,GAAGnC,QAAQ,CAACoC,eAAe,CAAC,CAAC;MACtD,MAAMC,gBAAgB,GAAGrC,QAAQ,CAACsC,EAAE,CAACC,OAAO;MAC5C,MAAMC,uBAAuB,GAAGxC,QAAQ,CAACyC,SAAS,CAACC,UAAU;MAC7D1C,QAAQ,CAACsC,EAAE,CAACC,OAAO,GAAG,KAAK,CAAC,CAAC;;MAE7BvC,QAAQ,CAACyC,SAAS,CAACC,UAAU,GAAG,KAAK,CAAC,CAAC;;MAEvC1C,QAAQ,CAAC2C,eAAe,CAACtD,YAAY,CAAC;MACtCW,QAAQ,CAAC4C,KAAK,CAACC,OAAO,CAACC,KAAK,CAACC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC;;MAE5C,IAAI/C,QAAQ,CAACgD,SAAS,KAAK,KAAK,EAAEhD,QAAQ,CAACiD,KAAK,CAAC,CAAC;MAClDjD,QAAQ,CAACkD,MAAM,CAACjD,KAAK,EAAEjB,aAAa,CAAC;MACrCgB,QAAQ,CAACsC,EAAE,CAACC,OAAO,GAAGF,gBAAgB;MACtCrC,QAAQ,CAACyC,SAAS,CAACC,UAAU,GAAGF,uBAAuB;MACvDxC,QAAQ,CAAC2C,eAAe,CAACR,mBAAmB,CAAC,CAAC,CAAC;;MAE/C,MAAMgB,QAAQ,GAAGjD,MAAM,CAACiD,QAAQ;MAEhC,IAAIA,QAAQ,KAAKpF,SAAS,EAAE;QAC1BiC,QAAQ,CAAC4C,KAAK,CAACO,QAAQ,CAACA,QAAQ,CAAC;MACnC;MAEAtF,KAAK,CAACqE,OAAO,GAAG,IAAI;IACtB,CAAC;IAED,IAAI,CAACE,eAAe,GAAG,YAAY;MACjC,OAAO/C,YAAY;IACrB,CAAC;EACH;AAEF;AAEA7B,SAAS,CAAC4F,SAAS,CAACC,WAAW,GAAG,IAAI;AACtC7F,SAAS,CAACY,eAAe,GAAG;EAC1BsB,QAAQ,EAAE;IACR5B,KAAK,EAAE;MACLgC,KAAK,EAAE;IACT,CAAC;IACDwD,QAAQ,EAAE;MACRxD,KAAK,EAAE;IACT,CAAC;IACDf,aAAa,EAAE;MACbe,KAAK,EAAE;IACT;EACF,CAAC;EACDD,YAAY,EACZ;EACC;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;EACFD,cAAc,EACd;EACC;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AAED,SAASpC,SAAS"},"metadata":{},"sourceType":"module","externalDependencies":[]}