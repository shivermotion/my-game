{"ast":null,"code":"import { Loader, UnsignedByteType, CubeTexture, HalfFloatType, LinearEncoding, RGBFormat, LinearFilter, FloatType, RGBEEncoding, RGBAFormat, NearestFilter, FileLoader, DataTexture } from 'three';\nimport { RGBELoader } from './RGBELoader.js';\nclass HDRCubeTextureLoader extends Loader {\n  constructor(manager) {\n    super(manager);\n    this.hdrLoader = new RGBELoader();\n    this.type = UnsignedByteType;\n  }\n  load(urls, onLoad, onProgress, onError) {\n    if (!Array.isArray(urls)) {\n      console.warn('THREE.HDRCubeTextureLoader signature has changed. Use .setDataType() instead.');\n      this.setDataType(urls);\n      urls = onLoad;\n      onLoad = onProgress;\n      onProgress = onError;\n      onError = arguments[4];\n    }\n    const texture = new CubeTexture();\n    texture.type = this.type;\n    switch (texture.type) {\n      case UnsignedByteType:\n        texture.encoding = RGBEEncoding;\n        texture.format = RGBAFormat;\n        texture.minFilter = NearestFilter;\n        texture.magFilter = NearestFilter;\n        texture.generateMipmaps = false;\n        break;\n      case FloatType:\n        texture.encoding = LinearEncoding;\n        texture.format = RGBFormat;\n        texture.minFilter = LinearFilter;\n        texture.magFilter = LinearFilter;\n        texture.generateMipmaps = false;\n        break;\n      case HalfFloatType:\n        texture.encoding = LinearEncoding;\n        texture.format = RGBFormat;\n        texture.minFilter = LinearFilter;\n        texture.magFilter = LinearFilter;\n        texture.generateMipmaps = false;\n        break;\n    }\n    const scope = this;\n    let loaded = 0;\n    function loadHDRData(i, onLoad, onProgress, onError) {\n      new FileLoader(scope.manager).setPath(scope.path).setResponseType('arraybuffer').setWithCredentials(scope.withCredentials).load(urls[i], function (buffer) {\n        loaded++;\n        const texData = scope.hdrLoader.parse(buffer);\n        if (!texData) return;\n        if (texData.data !== undefined) {\n          const dataTexture = new DataTexture(texData.data, texData.width, texData.height);\n          dataTexture.type = texture.type;\n          dataTexture.encoding = texture.encoding;\n          dataTexture.format = texture.format;\n          dataTexture.minFilter = texture.minFilter;\n          dataTexture.magFilter = texture.magFilter;\n          dataTexture.generateMipmaps = texture.generateMipmaps;\n          texture.images[i] = dataTexture;\n        }\n        if (loaded === 6) {\n          texture.needsUpdate = true;\n          if (onLoad) onLoad(texture);\n        }\n      }, onProgress, onError);\n    }\n    for (let i = 0; i < urls.length; i++) {\n      loadHDRData(i, onLoad, onProgress, onError);\n    }\n    return texture;\n  }\n  setDataType(value) {\n    this.type = value;\n    this.hdrLoader.setDataType(value);\n    return this;\n  }\n}\nexport { HDRCubeTextureLoader };","map":{"version":3,"names":["Loader","UnsignedByteType","CubeTexture","HalfFloatType","LinearEncoding","RGBFormat","LinearFilter","FloatType","RGBEEncoding","RGBAFormat","NearestFilter","FileLoader","DataTexture","RGBELoader","HDRCubeTextureLoader","constructor","manager","hdrLoader","type","load","urls","onLoad","onProgress","onError","Array","isArray","console","warn","setDataType","arguments","texture","encoding","format","minFilter","magFilter","generateMipmaps","scope","loaded","loadHDRData","i","setPath","path","setResponseType","setWithCredentials","withCredentials","buffer","texData","parse","data","undefined","dataTexture","width","height","images","needsUpdate","length","value"],"sources":["C:/Users/Work/node_modules/three-stdlib/loaders/HDRCubeTextureLoader.js"],"sourcesContent":["import { Loader, UnsignedByteType, CubeTexture, HalfFloatType, LinearEncoding, RGBFormat, LinearFilter, FloatType, RGBEEncoding, RGBAFormat, NearestFilter, FileLoader, DataTexture } from 'three';\nimport { RGBELoader } from './RGBELoader.js';\n\nclass HDRCubeTextureLoader extends Loader {\n  constructor(manager) {\n    super(manager);\n    this.hdrLoader = new RGBELoader();\n    this.type = UnsignedByteType;\n  }\n\n  load(urls, onLoad, onProgress, onError) {\n    if (!Array.isArray(urls)) {\n      console.warn('THREE.HDRCubeTextureLoader signature has changed. Use .setDataType() instead.');\n      this.setDataType(urls);\n      urls = onLoad;\n      onLoad = onProgress;\n      onProgress = onError;\n      onError = arguments[4];\n    }\n\n    const texture = new CubeTexture();\n    texture.type = this.type;\n\n    switch (texture.type) {\n      case UnsignedByteType:\n        texture.encoding = RGBEEncoding;\n        texture.format = RGBAFormat;\n        texture.minFilter = NearestFilter;\n        texture.magFilter = NearestFilter;\n        texture.generateMipmaps = false;\n        break;\n\n      case FloatType:\n        texture.encoding = LinearEncoding;\n        texture.format = RGBFormat;\n        texture.minFilter = LinearFilter;\n        texture.magFilter = LinearFilter;\n        texture.generateMipmaps = false;\n        break;\n\n      case HalfFloatType:\n        texture.encoding = LinearEncoding;\n        texture.format = RGBFormat;\n        texture.minFilter = LinearFilter;\n        texture.magFilter = LinearFilter;\n        texture.generateMipmaps = false;\n        break;\n    }\n\n    const scope = this;\n    let loaded = 0;\n\n    function loadHDRData(i, onLoad, onProgress, onError) {\n      new FileLoader(scope.manager).setPath(scope.path).setResponseType('arraybuffer').setWithCredentials(scope.withCredentials).load(urls[i], function (buffer) {\n        loaded++;\n        const texData = scope.hdrLoader.parse(buffer);\n        if (!texData) return;\n\n        if (texData.data !== undefined) {\n          const dataTexture = new DataTexture(texData.data, texData.width, texData.height);\n          dataTexture.type = texture.type;\n          dataTexture.encoding = texture.encoding;\n          dataTexture.format = texture.format;\n          dataTexture.minFilter = texture.minFilter;\n          dataTexture.magFilter = texture.magFilter;\n          dataTexture.generateMipmaps = texture.generateMipmaps;\n          texture.images[i] = dataTexture;\n        }\n\n        if (loaded === 6) {\n          texture.needsUpdate = true;\n          if (onLoad) onLoad(texture);\n        }\n      }, onProgress, onError);\n    }\n\n    for (let i = 0; i < urls.length; i++) {\n      loadHDRData(i, onLoad, onProgress, onError);\n    }\n\n    return texture;\n  }\n\n  setDataType(value) {\n    this.type = value;\n    this.hdrLoader.setDataType(value);\n    return this;\n  }\n\n}\n\nexport { HDRCubeTextureLoader };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}