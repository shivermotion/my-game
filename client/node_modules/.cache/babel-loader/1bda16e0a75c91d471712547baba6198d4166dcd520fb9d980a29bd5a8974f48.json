{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.defaultGrammarValidatorErrorProvider = exports.defaultGrammarResolverErrorProvider = exports.defaultParserErrorProvider = void 0;\nvar tokens_public_1 = require(\"../scan/tokens_public\");\nvar utils = require(\"@chevrotain/utils\");\nvar utils_1 = require(\"@chevrotain/utils\");\nvar gast_public_1 = require(\"./grammar/gast/gast_public\");\nvar gast_1 = require(\"./grammar/gast/gast\");\nexports.defaultParserErrorProvider = {\n  buildMismatchTokenMessage: function (_a) {\n    var expected = _a.expected,\n      actual = _a.actual,\n      previous = _a.previous,\n      ruleName = _a.ruleName;\n    var hasLabel = tokens_public_1.hasTokenLabel(expected);\n    var expectedMsg = hasLabel ? \"--> \" + tokens_public_1.tokenLabel(expected) + \" <--\" : \"token of type --> \" + expected.name + \" <--\";\n    var msg = \"Expecting \" + expectedMsg + \" but found --> '\" + actual.image + \"' <--\";\n    return msg;\n  },\n  buildNotAllInputParsedMessage: function (_a) {\n    var firstRedundant = _a.firstRedundant,\n      ruleName = _a.ruleName;\n    return \"Redundant input, expecting EOF but found: \" + firstRedundant.image;\n  },\n  buildNoViableAltMessage: function (_a) {\n    var expectedPathsPerAlt = _a.expectedPathsPerAlt,\n      actual = _a.actual,\n      previous = _a.previous,\n      customUserDescription = _a.customUserDescription,\n      ruleName = _a.ruleName;\n    var errPrefix = \"Expecting: \";\n    // TODO: issue: No Viable Alternative Error may have incomplete details. #502\n    var actualText = utils_1.first(actual).image;\n    var errSuffix = \"\\nbut found: '\" + actualText + \"'\";\n    if (customUserDescription) {\n      return errPrefix + customUserDescription + errSuffix;\n    } else {\n      var allLookAheadPaths = utils_1.reduce(expectedPathsPerAlt, function (result, currAltPaths) {\n        return result.concat(currAltPaths);\n      }, []);\n      var nextValidTokenSequences = utils_1.map(allLookAheadPaths, function (currPath) {\n        return \"[\" + utils_1.map(currPath, function (currTokenType) {\n          return tokens_public_1.tokenLabel(currTokenType);\n        }).join(\", \") + \"]\";\n      });\n      var nextValidSequenceItems = utils_1.map(nextValidTokenSequences, function (itemMsg, idx) {\n        return \"  \" + (idx + 1) + \". \" + itemMsg;\n      });\n      var calculatedDescription = \"one of these possible Token sequences:\\n\" + nextValidSequenceItems.join(\"\\n\");\n      return errPrefix + calculatedDescription + errSuffix;\n    }\n  },\n  buildEarlyExitMessage: function (_a) {\n    var expectedIterationPaths = _a.expectedIterationPaths,\n      actual = _a.actual,\n      customUserDescription = _a.customUserDescription,\n      ruleName = _a.ruleName;\n    var errPrefix = \"Expecting: \";\n    // TODO: issue: No Viable Alternative Error may have incomplete details. #502\n    var actualText = utils_1.first(actual).image;\n    var errSuffix = \"\\nbut found: '\" + actualText + \"'\";\n    if (customUserDescription) {\n      return errPrefix + customUserDescription + errSuffix;\n    } else {\n      var nextValidTokenSequences = utils_1.map(expectedIterationPaths, function (currPath) {\n        return \"[\" + utils_1.map(currPath, function (currTokenType) {\n          return tokens_public_1.tokenLabel(currTokenType);\n        }).join(\",\") + \"]\";\n      });\n      var calculatedDescription = \"expecting at least one iteration which starts with one of these possible Token sequences::\\n  \" + (\"<\" + nextValidTokenSequences.join(\" ,\") + \">\");\n      return errPrefix + calculatedDescription + errSuffix;\n    }\n  }\n};\nObject.freeze(exports.defaultParserErrorProvider);\nexports.defaultGrammarResolverErrorProvider = {\n  buildRuleNotFoundError: function (topLevelRule, undefinedRule) {\n    var msg = \"Invalid grammar, reference to a rule which is not defined: ->\" + undefinedRule.nonTerminalName + \"<-\\n\" + \"inside top level rule: ->\" + topLevelRule.name + \"<-\";\n    return msg;\n  }\n};\nexports.defaultGrammarValidatorErrorProvider = {\n  buildDuplicateFoundError: function (topLevelRule, duplicateProds) {\n    function getExtraProductionArgument(prod) {\n      if (prod instanceof gast_public_1.Terminal) {\n        return prod.terminalType.name;\n      } else if (prod instanceof gast_public_1.NonTerminal) {\n        return prod.nonTerminalName;\n      } else {\n        return \"\";\n      }\n    }\n    var topLevelName = topLevelRule.name;\n    var duplicateProd = utils_1.first(duplicateProds);\n    var index = duplicateProd.idx;\n    var dslName = gast_1.getProductionDslName(duplicateProd);\n    var extraArgument = getExtraProductionArgument(duplicateProd);\n    var hasExplicitIndex = index > 0;\n    var msg = \"->\" + dslName + (hasExplicitIndex ? index : \"\") + \"<- \" + (extraArgument ? \"with argument: ->\" + extraArgument + \"<-\" : \"\") + \"\\n                  appears more than once (\" + duplicateProds.length + \" times) in the top level rule: ->\" + topLevelName + \"<-.                  \\n                  For further details see: https://chevrotain.io/docs/FAQ.html#NUMERICAL_SUFFIXES \\n                  \";\n    // white space trimming time! better to trim afterwards as it allows to use WELL formatted multi line template strings...\n    msg = msg.replace(/[ \\t]+/g, \" \");\n    msg = msg.replace(/\\s\\s+/g, \"\\n\");\n    return msg;\n  },\n  buildNamespaceConflictError: function (rule) {\n    var errMsg = \"Namespace conflict found in grammar.\\n\" + (\"The grammar has both a Terminal(Token) and a Non-Terminal(Rule) named: <\" + rule.name + \">.\\n\") + \"To resolve this make sure each Terminal and Non-Terminal names are unique\\n\" + \"This is easy to accomplish by using the convention that Terminal names start with an uppercase letter\\n\" + \"and Non-Terminal names start with a lower case letter.\";\n    return errMsg;\n  },\n  buildAlternationPrefixAmbiguityError: function (options) {\n    var pathMsg = utils_1.map(options.prefixPath, function (currTok) {\n      return tokens_public_1.tokenLabel(currTok);\n    }).join(\", \");\n    var occurrence = options.alternation.idx === 0 ? \"\" : options.alternation.idx;\n    var errMsg = \"Ambiguous alternatives: <\" + options.ambiguityIndices.join(\" ,\") + \"> due to common lookahead prefix\\n\" + (\"in <OR\" + occurrence + \"> inside <\" + options.topLevelRule.name + \"> Rule,\\n\") + (\"<\" + pathMsg + \"> may appears as a prefix path in all these alternatives.\\n\") + \"See: https://chevrotain.io/docs/guide/resolving_grammar_errors.html#COMMON_PREFIX\\n\" + \"For Further details.\";\n    return errMsg;\n  },\n  buildAlternationAmbiguityError: function (options) {\n    var pathMsg = utils_1.map(options.prefixPath, function (currtok) {\n      return tokens_public_1.tokenLabel(currtok);\n    }).join(\", \");\n    var occurrence = options.alternation.idx === 0 ? \"\" : options.alternation.idx;\n    var currMessage = \"Ambiguous Alternatives Detected: <\" + options.ambiguityIndices.join(\" ,\") + \"> in <OR\" + occurrence + \">\" + (\" inside <\" + options.topLevelRule.name + \"> Rule,\\n\") + (\"<\" + pathMsg + \"> may appears as a prefix path in all these alternatives.\\n\");\n    currMessage = currMessage + \"See: https://chevrotain.io/docs/guide/resolving_grammar_errors.html#AMBIGUOUS_ALTERNATIVES\\n\" + \"For Further details.\";\n    return currMessage;\n  },\n  buildEmptyRepetitionError: function (options) {\n    var dslName = gast_1.getProductionDslName(options.repetition);\n    if (options.repetition.idx !== 0) {\n      dslName += options.repetition.idx;\n    }\n    var errMsg = \"The repetition <\" + dslName + \"> within Rule <\" + options.topLevelRule.name + \"> can never consume any tokens.\\n\" + \"This could lead to an infinite loop.\";\n    return errMsg;\n  },\n  // TODO: remove - `errors_public` from nyc.config.js exclude\n  //       once this method is fully removed from this file\n  buildTokenNameError: function (options) {\n    /* istanbul ignore next */\n    return \"deprecated\";\n  },\n  buildEmptyAlternationError: function (options) {\n    var errMsg = \"Ambiguous empty alternative: <\" + (options.emptyChoiceIdx + 1) + \">\" + (\" in <OR\" + options.alternation.idx + \"> inside <\" + options.topLevelRule.name + \"> Rule.\\n\") + \"Only the last alternative may be an empty alternative.\";\n    return errMsg;\n  },\n  buildTooManyAlternativesError: function (options) {\n    var errMsg = \"An Alternation cannot have more than 256 alternatives:\\n\" + (\"<OR\" + options.alternation.idx + \"> inside <\" + options.topLevelRule.name + \"> Rule.\\n has \" + (options.alternation.definition.length + 1) + \" alternatives.\");\n    return errMsg;\n  },\n  buildLeftRecursionError: function (options) {\n    var ruleName = options.topLevelRule.name;\n    var pathNames = utils.map(options.leftRecursionPath, function (currRule) {\n      return currRule.name;\n    });\n    var leftRecursivePath = ruleName + \" --> \" + pathNames.concat([ruleName]).join(\" --> \");\n    var errMsg = \"Left Recursion found in grammar.\\n\" + (\"rule: <\" + ruleName + \"> can be invoked from itself (directly or indirectly)\\n\") + (\"without consuming any Tokens. The grammar path that causes this is: \\n \" + leftRecursivePath + \"\\n\") + \" To fix this refactor your grammar to remove the left recursion.\\n\" + \"see: https://en.wikipedia.org/wiki/LL_parser#Left_Factoring.\";\n    return errMsg;\n  },\n  // TODO: remove - `errors_public` from nyc.config.js exclude\n  //       once this method is fully removed from this file\n  buildInvalidRuleNameError: function (options) {\n    /* istanbul ignore next */\n    return \"deprecated\";\n  },\n  buildDuplicateRuleNameError: function (options) {\n    var ruleName;\n    if (options.topLevelRule instanceof gast_public_1.Rule) {\n      ruleName = options.topLevelRule.name;\n    } else {\n      ruleName = options.topLevelRule;\n    }\n    var errMsg = \"Duplicate definition, rule: ->\" + ruleName + \"<- is already defined in the grammar: ->\" + options.grammarName + \"<-\";\n    return errMsg;\n  }\n};","map":{"version":3,"names":["tokens_public_1","require","utils","utils_1","gast_public_1","gast_1","exports","defaultParserErrorProvider","buildMismatchTokenMessage","_a","expected","actual","previous","ruleName","hasLabel","hasTokenLabel","expectedMsg","tokenLabel","name","msg","image","buildNotAllInputParsedMessage","firstRedundant","buildNoViableAltMessage","expectedPathsPerAlt","customUserDescription","errPrefix","actualText","first","errSuffix","allLookAheadPaths","reduce","result","currAltPaths","concat","nextValidTokenSequences","map","currPath","currTokenType","join","nextValidSequenceItems","itemMsg","idx","calculatedDescription","buildEarlyExitMessage","expectedIterationPaths","Object","freeze","defaultGrammarResolverErrorProvider","buildRuleNotFoundError","topLevelRule","undefinedRule","nonTerminalName","defaultGrammarValidatorErrorProvider","buildDuplicateFoundError","duplicateProds","getExtraProductionArgument","prod","Terminal","terminalType","NonTerminal","topLevelName","duplicateProd","index","dslName","getProductionDslName","extraArgument","hasExplicitIndex","length","replace","buildNamespaceConflictError","rule","errMsg","buildAlternationPrefixAmbiguityError","options","pathMsg","prefixPath","currTok","occurrence","alternation","ambiguityIndices","buildAlternationAmbiguityError","currtok","currMessage","buildEmptyRepetitionError","repetition","buildTokenNameError","buildEmptyAlternationError","emptyChoiceIdx","buildTooManyAlternativesError","definition","buildLeftRecursionError","pathNames","leftRecursionPath","currRule","leftRecursivePath","buildInvalidRuleNameError","buildDuplicateRuleNameError","Rule","grammarName"],"sources":["C:\\Users\\Work\\node_modules\\chevrotain\\src\\parse\\errors_public.ts"],"sourcesContent":["import { hasTokenLabel, tokenLabel } from \"../scan/tokens_public\"\nimport * as utils from \"@chevrotain/utils\"\nimport { first, map, reduce } from \"@chevrotain/utils\"\nimport {\n  Alternation,\n  NonTerminal,\n  Rule,\n  Terminal\n} from \"./grammar/gast/gast_public\"\nimport { getProductionDslName } from \"./grammar/gast/gast\"\nimport {\n  IParserErrorMessageProvider,\n  IProductionWithOccurrence,\n  TokenType\n} from \"@chevrotain/types\"\nimport {\n  IGrammarResolverErrorMessageProvider,\n  IGrammarValidatorErrorMessageProvider\n} from \"./grammar/types\"\n\nexport const defaultParserErrorProvider: IParserErrorMessageProvider = {\n  buildMismatchTokenMessage({ expected, actual, previous, ruleName }): string {\n    const hasLabel = hasTokenLabel(expected)\n    const expectedMsg = hasLabel\n      ? `--> ${tokenLabel(expected)} <--`\n      : `token of type --> ${expected.name} <--`\n\n    const msg = `Expecting ${expectedMsg} but found --> '${actual.image}' <--`\n\n    return msg\n  },\n\n  buildNotAllInputParsedMessage({ firstRedundant, ruleName }): string {\n    return \"Redundant input, expecting EOF but found: \" + firstRedundant.image\n  },\n\n  buildNoViableAltMessage({\n    expectedPathsPerAlt,\n    actual,\n    previous,\n    customUserDescription,\n    ruleName\n  }): string {\n    const errPrefix = \"Expecting: \"\n    // TODO: issue: No Viable Alternative Error may have incomplete details. #502\n    const actualText = first(actual).image\n    const errSuffix = \"\\nbut found: '\" + actualText + \"'\"\n\n    if (customUserDescription) {\n      return errPrefix + customUserDescription + errSuffix\n    } else {\n      const allLookAheadPaths = reduce(\n        expectedPathsPerAlt,\n        (result, currAltPaths) => result.concat(currAltPaths),\n        []\n      )\n      const nextValidTokenSequences = map(\n        allLookAheadPaths,\n        (currPath) =>\n          `[${map(currPath, (currTokenType) => tokenLabel(currTokenType)).join(\n            \", \"\n          )}]`\n      )\n      const nextValidSequenceItems = map(\n        nextValidTokenSequences,\n        (itemMsg, idx) => `  ${idx + 1}. ${itemMsg}`\n      )\n      const calculatedDescription = `one of these possible Token sequences:\\n${nextValidSequenceItems.join(\n        \"\\n\"\n      )}`\n\n      return errPrefix + calculatedDescription + errSuffix\n    }\n  },\n\n  buildEarlyExitMessage({\n    expectedIterationPaths,\n    actual,\n    customUserDescription,\n    ruleName\n  }): string {\n    const errPrefix = \"Expecting: \"\n    // TODO: issue: No Viable Alternative Error may have incomplete details. #502\n    const actualText = first(actual).image\n    const errSuffix = \"\\nbut found: '\" + actualText + \"'\"\n\n    if (customUserDescription) {\n      return errPrefix + customUserDescription + errSuffix\n    } else {\n      const nextValidTokenSequences = map(\n        expectedIterationPaths,\n        (currPath) =>\n          `[${map(currPath, (currTokenType) => tokenLabel(currTokenType)).join(\n            \",\"\n          )}]`\n      )\n      const calculatedDescription =\n        `expecting at least one iteration which starts with one of these possible Token sequences::\\n  ` +\n        `<${nextValidTokenSequences.join(\" ,\")}>`\n\n      return errPrefix + calculatedDescription + errSuffix\n    }\n  }\n}\n\nObject.freeze(defaultParserErrorProvider)\n\nexport const defaultGrammarResolverErrorProvider: IGrammarResolverErrorMessageProvider = {\n  buildRuleNotFoundError(\n    topLevelRule: Rule,\n    undefinedRule: NonTerminal\n  ): string {\n    const msg =\n      \"Invalid grammar, reference to a rule which is not defined: ->\" +\n      undefinedRule.nonTerminalName +\n      \"<-\\n\" +\n      \"inside top level rule: ->\" +\n      topLevelRule.name +\n      \"<-\"\n    return msg\n  }\n}\n\nexport const defaultGrammarValidatorErrorProvider: IGrammarValidatorErrorMessageProvider = {\n  buildDuplicateFoundError(\n    topLevelRule: Rule,\n    duplicateProds: IProductionWithOccurrence[]\n  ): string {\n    function getExtraProductionArgument(\n      prod: IProductionWithOccurrence\n    ): string {\n      if (prod instanceof Terminal) {\n        return prod.terminalType.name\n      } else if (prod instanceof NonTerminal) {\n        return prod.nonTerminalName\n      } else {\n        return \"\"\n      }\n    }\n\n    const topLevelName = topLevelRule.name\n    const duplicateProd = first(duplicateProds)\n    const index = duplicateProd.idx\n    const dslName = getProductionDslName(duplicateProd)\n    const extraArgument = getExtraProductionArgument(duplicateProd)\n\n    const hasExplicitIndex = index > 0\n    let msg = `->${dslName}${hasExplicitIndex ? index : \"\"}<- ${\n      extraArgument ? `with argument: ->${extraArgument}<-` : \"\"\n    }\n                  appears more than once (${\n                    duplicateProds.length\n                  } times) in the top level rule: ->${topLevelName}<-.                  \n                  For further details see: https://chevrotain.io/docs/FAQ.html#NUMERICAL_SUFFIXES \n                  `\n\n    // white space trimming time! better to trim afterwards as it allows to use WELL formatted multi line template strings...\n    msg = msg.replace(/[ \\t]+/g, \" \")\n    msg = msg.replace(/\\s\\s+/g, \"\\n\")\n\n    return msg\n  },\n\n  buildNamespaceConflictError(rule: Rule): string {\n    const errMsg =\n      `Namespace conflict found in grammar.\\n` +\n      `The grammar has both a Terminal(Token) and a Non-Terminal(Rule) named: <${rule.name}>.\\n` +\n      `To resolve this make sure each Terminal and Non-Terminal names are unique\\n` +\n      `This is easy to accomplish by using the convention that Terminal names start with an uppercase letter\\n` +\n      `and Non-Terminal names start with a lower case letter.`\n\n    return errMsg\n  },\n\n  buildAlternationPrefixAmbiguityError(options: {\n    topLevelRule: Rule\n    prefixPath: TokenType[]\n    ambiguityIndices: number[]\n    alternation: Alternation\n  }): string {\n    const pathMsg = map(options.prefixPath, (currTok) =>\n      tokenLabel(currTok)\n    ).join(\", \")\n    const occurrence =\n      options.alternation.idx === 0 ? \"\" : options.alternation.idx\n    const errMsg =\n      `Ambiguous alternatives: <${options.ambiguityIndices.join(\n        \" ,\"\n      )}> due to common lookahead prefix\\n` +\n      `in <OR${occurrence}> inside <${options.topLevelRule.name}> Rule,\\n` +\n      `<${pathMsg}> may appears as a prefix path in all these alternatives.\\n` +\n      `See: https://chevrotain.io/docs/guide/resolving_grammar_errors.html#COMMON_PREFIX\\n` +\n      `For Further details.`\n\n    return errMsg\n  },\n\n  buildAlternationAmbiguityError(options: {\n    topLevelRule: Rule\n    prefixPath: TokenType[]\n    ambiguityIndices: number[]\n    alternation: Alternation\n  }): string {\n    const pathMsg = map(options.prefixPath, (currtok) =>\n      tokenLabel(currtok)\n    ).join(\", \")\n    const occurrence =\n      options.alternation.idx === 0 ? \"\" : options.alternation.idx\n    let currMessage =\n      `Ambiguous Alternatives Detected: <${options.ambiguityIndices.join(\n        \" ,\"\n      )}> in <OR${occurrence}>` +\n      ` inside <${options.topLevelRule.name}> Rule,\\n` +\n      `<${pathMsg}> may appears as a prefix path in all these alternatives.\\n`\n\n    currMessage =\n      currMessage +\n      `See: https://chevrotain.io/docs/guide/resolving_grammar_errors.html#AMBIGUOUS_ALTERNATIVES\\n` +\n      `For Further details.`\n    return currMessage\n  },\n\n  buildEmptyRepetitionError(options: {\n    topLevelRule: Rule\n    repetition: IProductionWithOccurrence\n  }): string {\n    let dslName = getProductionDslName(options.repetition)\n    if (options.repetition.idx !== 0) {\n      dslName += options.repetition.idx\n    }\n\n    const errMsg =\n      `The repetition <${dslName}> within Rule <${options.topLevelRule.name}> can never consume any tokens.\\n` +\n      `This could lead to an infinite loop.`\n\n    return errMsg\n  },\n\n  // TODO: remove - `errors_public` from nyc.config.js exclude\n  //       once this method is fully removed from this file\n  buildTokenNameError(options: {\n    tokenType: TokenType\n    expectedPattern: RegExp\n  }): string {\n    /* istanbul ignore next */\n    return \"deprecated\"\n  },\n\n  buildEmptyAlternationError(options: {\n    topLevelRule: Rule\n    alternation: Alternation\n    emptyChoiceIdx: number\n  }): string {\n    const errMsg =\n      `Ambiguous empty alternative: <${options.emptyChoiceIdx + 1}>` +\n      ` in <OR${options.alternation.idx}> inside <${options.topLevelRule.name}> Rule.\\n` +\n      `Only the last alternative may be an empty alternative.`\n\n    return errMsg\n  },\n\n  buildTooManyAlternativesError(options: {\n    topLevelRule: Rule\n    alternation: Alternation\n  }): string {\n    const errMsg =\n      `An Alternation cannot have more than 256 alternatives:\\n` +\n      `<OR${options.alternation.idx}> inside <${\n        options.topLevelRule.name\n      }> Rule.\\n has ${options.alternation.definition.length + 1} alternatives.`\n\n    return errMsg\n  },\n\n  buildLeftRecursionError(options: {\n    topLevelRule: Rule\n    leftRecursionPath: Rule[]\n  }): string {\n    const ruleName = options.topLevelRule.name\n    const pathNames = utils.map(\n      options.leftRecursionPath,\n      (currRule) => currRule.name\n    )\n    const leftRecursivePath = `${ruleName} --> ${pathNames\n      .concat([ruleName])\n      .join(\" --> \")}`\n    const errMsg =\n      `Left Recursion found in grammar.\\n` +\n      `rule: <${ruleName}> can be invoked from itself (directly or indirectly)\\n` +\n      `without consuming any Tokens. The grammar path that causes this is: \\n ${leftRecursivePath}\\n` +\n      ` To fix this refactor your grammar to remove the left recursion.\\n` +\n      `see: https://en.wikipedia.org/wiki/LL_parser#Left_Factoring.`\n\n    return errMsg\n  },\n\n  // TODO: remove - `errors_public` from nyc.config.js exclude\n  //       once this method is fully removed from this file\n  buildInvalidRuleNameError(options: {\n    topLevelRule: Rule\n    expectedPattern: RegExp\n  }): string {\n    /* istanbul ignore next */\n    return \"deprecated\"\n  },\n\n  buildDuplicateRuleNameError(options: {\n    topLevelRule: Rule | string\n    grammarName: string\n  }): string {\n    let ruleName\n    if (options.topLevelRule instanceof Rule) {\n      ruleName = options.topLevelRule.name\n    } else {\n      ruleName = options.topLevelRule\n    }\n\n    const errMsg = `Duplicate definition, rule: ->${ruleName}<- is already defined in the grammar: ->${options.grammarName}<-`\n\n    return errMsg\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}