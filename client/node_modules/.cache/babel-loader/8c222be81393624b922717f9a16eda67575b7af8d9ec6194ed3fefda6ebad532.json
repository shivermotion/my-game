{"ast":null,"code":"import { MeshStandardMaterial } from 'three';\nclass MeshReflectorMaterial extends MeshStandardMaterial {\n  constructor(parameters = {}) {\n    super(parameters);\n    this._debug = {\n      value: 0\n    };\n    this._tDepth = {\n      value: null\n    };\n    this._distortionMap = {\n      value: null\n    };\n    this._tDiffuse = {\n      value: null\n    };\n    this._u_mipmap_0 = {\n      value: null\n    };\n    this._u_mipmap_1 = {\n      value: null\n    };\n    this._u_mipmap_2 = {\n      value: null\n    };\n    this._u_mipmap_3 = {\n      value: null\n    };\n    this._u_mipmap_4 = {\n      value: null\n    };\n    this._u_mipmap_5 = {\n      value: null\n    };\n    this._u_mipmap_6 = {\n      value: null\n    };\n    this._u_mipmap_7 = {\n      value: null\n    };\n    this._u_mipmap_res_0 = {\n      value: null\n    };\n    this._u_mipmap_res_1 = {\n      value: null\n    };\n    this._u_mipmap_res_2 = {\n      value: null\n    };\n    this._u_mipmap_res_3 = {\n      value: null\n    };\n    this._u_mipmap_res_4 = {\n      value: null\n    };\n    this._u_mipmap_res_5 = {\n      value: null\n    };\n    this._u_mipmap_res_6 = {\n      value: null\n    };\n    this._u_mipmap_res_7 = {\n      value: null\n    };\n    this._textureMatrix = {\n      value: null\n    };\n    this._mirror = {\n      value: 0.0\n    };\n    this._mixBlur = {\n      value: 0.0\n    };\n    this._blurStrength = {\n      value: 0.5\n    };\n    this._minDepthThreshold = {\n      value: 0.9\n    };\n    this._maxDepthThreshold = {\n      value: 1\n    };\n    this._depthScale = {\n      value: 0\n    };\n    this._depthToBlurRatioBias = {\n      value: 0.25\n    };\n    this._distortion = {\n      value: 1\n    };\n    this.setValues(parameters);\n  }\n  onBeforeCompile(shader) {\n    var _shader$defines;\n    if (!((_shader$defines = shader.defines) != null && _shader$defines.USE_UV)) {\n      shader.defines.USE_UV = '';\n    }\n    shader.uniforms.debug = this._debug;\n    shader.uniforms.tDiffuse = this._tDiffuse;\n    shader.uniforms.tDepth = this._tDepth;\n    shader.uniforms.distortionMap = this._distortionMap;\n    shader.uniforms.u_mipmap_0 = this._u_mipmap_0;\n    shader.uniforms.u_mipmap_1 = this._u_mipmap_1;\n    shader.uniforms.u_mipmap_2 = this._u_mipmap_2;\n    shader.uniforms.u_mipmap_3 = this._u_mipmap_3;\n    shader.uniforms.u_mipmap_4 = this._u_mipmap_4;\n    shader.uniforms.u_mipmap_5 = this._u_mipmap_5;\n    shader.uniforms.u_mipmap_6 = this._u_mipmap_6;\n    shader.uniforms.u_mipmap_7 = this._u_mipmap_7;\n    shader.uniforms.u_mipmap_res_0 = this._u_mipmap_res_0;\n    shader.uniforms.u_mipmap_res_1 = this._u_mipmap_res_1;\n    shader.uniforms.u_mipmap_res_2 = this._u_mipmap_res_2;\n    shader.uniforms.u_mipmap_res_3 = this._u_mipmap_res_3;\n    shader.uniforms.u_mipmap_res_4 = this._u_mipmap_res_4;\n    shader.uniforms.u_mipmap_res_5 = this._u_mipmap_res_5;\n    shader.uniforms.u_mipmap_res_6 = this._u_mipmap_res_6;\n    shader.uniforms.u_mipmap_res_7 = this._u_mipmap_res_7;\n    shader.uniforms.textureMatrix = this._textureMatrix;\n    shader.uniforms.mirror = this._mirror;\n    shader.uniforms.mixBlur = this._mixBlur;\n    shader.uniforms.mixStrength = this._blurStrength;\n    shader.uniforms.minDepthThreshold = this._minDepthThreshold;\n    shader.uniforms.maxDepthThreshold = this._maxDepthThreshold;\n    shader.uniforms.depthScale = this._depthScale;\n    shader.uniforms.depthToBlurRatioBias = this._depthToBlurRatioBias;\n    shader.uniforms.distortion = this._distortion;\n    shader.vertexShader = `\n        uniform mat4 textureMatrix;\n        varying vec4 my_vUv;     \n      ${shader.vertexShader}`;\n    shader.vertexShader = shader.vertexShader.replace('#include <project_vertex>', `#include <project_vertex>\n        my_vUv = textureMatrix * vec4( position, 1.0 );\n        gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );`);\n    shader.fragmentShader = `\n        uniform int debug;\n        uniform sampler2D tDiffuse;\n        uniform sampler2D tDepth;\n        uniform sampler2D distortionMap;\n        uniform sampler2D u_mipmap_0;\n        uniform sampler2D u_mipmap_1;\n        uniform sampler2D u_mipmap_2;\n        uniform sampler2D u_mipmap_3;\n        uniform sampler2D u_mipmap_4;\n        uniform sampler2D u_mipmap_5;\n        uniform sampler2D u_mipmap_6;\n        uniform sampler2D u_mipmap_7;\n        uniform vec2 u_mipmap_res_0;\n        uniform vec2 u_mipmap_res_1;\n        uniform vec2 u_mipmap_res_2;\n        uniform vec2 u_mipmap_res_3;\n        uniform vec2 u_mipmap_res_4;\n        uniform vec2 u_mipmap_res_5;\n        uniform vec2 u_mipmap_res_6;\n        uniform vec2 u_mipmap_res_7;\n        uniform float distortion;\n        uniform float cameraNear;\n\t\t\t  uniform float cameraFar;\n        uniform float mixBlur;\n        uniform float mirror;\n        uniform float mixStrength;\n        uniform float minDepthThreshold;\n        uniform float maxDepthThreshold;\n        uniform float depthScale;\n        uniform float depthToBlurRatioBias;\n        varying vec4 my_vUv;  \n        \n        // from http://www.java-gaming.org/index.php?topic=35123.0\n        vec4 cubic( float v ) {\n          vec4 n = vec4( 1.0, 2.0, 3.0, 4.0 ) - v;\n          vec4 s = n * n * n;\n          float x = s.x;\n          float y = s.y - 4.0 * s.x;\n          float z = s.z - 4.0 * s.y + 6.0 * s.x;\n          float w = 6.0 - x - y - z;\n          return vec4( x, y, z, w ) * ( 1.0 / 6.0 );\n        }\n        \n        vec4 textureBicubic( sampler2D sampler, vec2 texCoords, vec2 texSize ) {\n          vec2 invTexSize = 1.0 / texSize;\n          texCoords = texCoords * texSize - 0.5;\n          vec2 fxy = fract( texCoords );\n          texCoords -= fxy;\n\n          vec4 xcubic = cubic( fxy.x );\n          vec4 ycubic = cubic( fxy.y );\n          vec4 c = texCoords.xxyy + vec2 ( - 0.5, + 1.5 ).xyxy;\n          vec4 s = vec4( xcubic.xz + xcubic.yw, ycubic.xz + ycubic.yw );\n\n          vec4 offset = c + vec4( xcubic.yw, ycubic.yw ) / s;\n          offset *= invTexSize.xxyy;\n        \n          vec4 sample0 = texture2D( sampler, offset.xz);\n          vec4 sample1 = texture2D( sampler, offset.yz);\n          vec4 sample2 = texture2D( sampler, offset.xw);\n          vec4 sample3 = texture2D( sampler, offset.yw);\n        \n          float sx = s.x / ( s.x + s.y );\n          float sy = s.z / ( s.z + s.w );\n\n          return mix(\n            mix(\n              sample3,\n              sample2,\n              sx\n            ),\n            mix(\n              sample1,\n              sample0,\n              sx\n            ),\n            sy\n          );\n        }\n\n\n        ${shader.fragmentShader}`;\n    shader.fragmentShader = shader.fragmentShader.replace('#include <emissivemap_fragment>', `#include <emissivemap_fragment>\n    \n      float depthFactor = 1.0;\n      float distortionFactor = 0.0;\n      vec3 my_normal = vec3(0.0);\n      float reflectorRoughnessFactor = roughness;\n      vec3 coord = my_vUv.xyz / my_vUv.w;\n\n      #ifdef USE_DISTORTION\n        distortionFactor = texture2D(distortionMap, vUv).r * distortion;\n      #endif\n\n      #ifdef USE_NORMALMAP\n        vec4 normalColor = texture2D(normalMap, vUv * normalScale);\n        my_normal = normalize( vec3( normalColor.r * 2.0 - 1.0, normalColor.b ,  normalColor.g * 2.0 - 1.0 ) );\n      #endif\n\n      #ifdef USE_ROUGHNESSMAP\n        vec4 reflectorTexelRoughness = texture2D( roughnessMap, vUv );\n        reflectorRoughnessFactor *= reflectorTexelRoughness.g;\n      #endif\n\n      vec2 proj_vUv = coord.xy + coord.z * my_normal.xz * 0.01;\n      proj_vUv.x += distortionFactor;\n      proj_vUv.y += distortionFactor;\n      \n      float lod = 1.0 - min(1.0, mixBlur * reflectorRoughnessFactor);\n\n      #ifdef USE_DEPTH\n        vec4 depth = texture2D(tDepth, proj_vUv);\n        depthFactor = smoothstep(minDepthThreshold, maxDepthThreshold, 1.0-(depth.r * depth.a));\n        depthFactor *= depthScale;\n        depthFactor = max(0.0001, min(1.0, depthFactor + depthToBlurRatioBias));\n      #endif\n\n      vec4 baseColor = texture2D(tDiffuse, proj_vUv);\n      vec4 mixedColor;\n\n      float _lod = (1.0 - pow(1.0 - lod, 4.0)) * 8.0;\n      if (_lod < 1.) {\n        vec4 one = textureBicubic(u_mipmap_7, proj_vUv, u_mipmap_res_7);\n        vec4 two = textureBicubic(u_mipmap_6, proj_vUv, u_mipmap_res_6);\n        mixedColor = mix(one, two, _lod);\n      } else if (_lod < 2.) {\n        vec4 one = textureBicubic(u_mipmap_6, proj_vUv, u_mipmap_res_6);\n        vec4 two = textureBicubic(u_mipmap_5, proj_vUv, u_mipmap_res_5);\n        mixedColor = mix(one, two, _lod - 1.0);\n      } else if (_lod < 3.) {\n        vec4 one = textureBicubic(u_mipmap_5, proj_vUv, u_mipmap_res_5);\n        vec4 two = textureBicubic(u_mipmap_4, proj_vUv, u_mipmap_res_4);\n        mixedColor = mix(one, two, _lod - 2.0);\n      } else if (_lod < 4.) {\n        vec4 one = textureBicubic(u_mipmap_4, proj_vUv, u_mipmap_res_4);\n        vec4 two = textureBicubic(u_mipmap_3, proj_vUv, u_mipmap_res_3);\n        mixedColor = mix(one, two, _lod - 3.0);\n      } else if (_lod < 5.) {\n        vec4 one = textureBicubic(u_mipmap_3, proj_vUv, u_mipmap_res_3);\n        vec4 two = textureBicubic(u_mipmap_2, proj_vUv, u_mipmap_res_2);\n        mixedColor = mix(one, two, _lod - 4.0);\n      } else if (_lod < 6.) {\n        vec4 one = textureBicubic(u_mipmap_2, proj_vUv, u_mipmap_res_2);\n        vec4 two = textureBicubic(u_mipmap_1, proj_vUv, u_mipmap_res_1);\n        mixedColor = mix(one, two, _lod - 5.0);\n      } else if (_lod < 7.) {\n        vec4 one = textureBicubic(u_mipmap_1, proj_vUv, u_mipmap_res_1);\n        vec4 two = textureBicubic(u_mipmap_0, proj_vUv, u_mipmap_res_0);\n        mixedColor = mix(one, two, _lod - 6.0);\n      } else {\n        vec4 one = textureBicubic(u_mipmap_0, proj_vUv, u_mipmap_res_0);\n        mixedColor = mix(one, baseColor, _lod - 7.0);\n      }\n\n      mixedColor.rgb *= depthFactor;\n      diffuseColor.rgb = diffuseColor.rgb * ((1.0 - min(1.0, mirror)) + mixedColor.rgb * mixStrength);     \n      diffuseColor = sRGBToLinear(diffuseColor);\n\n      if (debug == 1) {\n        diffuseColor = sRGBToLinear(vec4(vec3(depthFactor), 1.0));\n      }\n      if (debug == 2) {\n        diffuseColor = sRGBToLinear(texture2D(tDiffuse, proj_vUv));\n      }\n      if (debug == 3) {\n        diffuseColor = sRGBToLinear(texture2D(distortionMap, vUv));\n      }\n      if (debug == 4) {\n        diffuseColor = sRGBToLinear(vec4(vec3(lod), 1.0));\n      }\n      `);\n  }\n  get tDiffuse() {\n    return this._tDiffuse.value;\n  }\n  set tDiffuse(v) {\n    this._tDiffuse.value = v;\n  }\n  get tDepth() {\n    return this._tDepth.value;\n  }\n  set tDepth(v) {\n    this._tDepth.value = v;\n  }\n  get distortionMap() {\n    return this._distortionMap.value;\n  }\n  set distortionMap(v) {\n    this._distortionMap.value = v;\n  }\n  get u_mipmap_0() {\n    return this._u_mipmap_0.value;\n  }\n  set u_mipmap_0(v) {\n    this._u_mipmap_0.value = v;\n  }\n  get u_mipmap_1() {\n    return this._u_mipmap_1.value;\n  }\n  set u_mipmap_1(v) {\n    this._u_mipmap_1.value = v;\n  }\n  get u_mipmap_2() {\n    return this._u_mipmap_2.value;\n  }\n  set u_mipmap_2(v) {\n    this._u_mipmap_2.value = v;\n  }\n  get u_mipmap_3() {\n    return this._u_mipmap_3.value;\n  }\n  set u_mipmap_3(v) {\n    this._u_mipmap_3.value = v;\n  }\n  get u_mipmap_4() {\n    return this._u_mipmap_4.value;\n  }\n  set u_mipmap_4(v) {\n    this._u_mipmap_4.value = v;\n  }\n  get u_mipmap_5() {\n    return this._u_mipmap_5.value;\n  }\n  set u_mipmap_5(v) {\n    this._u_mipmap_5.value = v;\n  }\n  get u_mipmap_6() {\n    return this._u_mipmap_6.value;\n  }\n  set u_mipmap_6(v) {\n    this._u_mipmap_6.value = v;\n  }\n  get u_mipmap_7() {\n    return this._u_mipmap_7.value;\n  }\n  set u_mipmap_7(v) {\n    this._u_mipmap_7.value = v;\n  }\n  get u_mipmap_res_0() {\n    return this._u_mipmap_res_0.value;\n  }\n  set u_mipmap_res_0(v) {\n    this._u_mipmap_res_0.value = v;\n  }\n  get u_mipmap_res_1() {\n    return this._u_mipmap_res_1.value;\n  }\n  set u_mipmap_res_1(v) {\n    this._u_mipmap_res_1.value = v;\n  }\n  get u_mipmap_res_2() {\n    return this._u_mipmap_res_2.value;\n  }\n  set u_mipmap_res_2(v) {\n    this._u_mipmap_res_2.value = v;\n  }\n  get u_mipmap_res_3() {\n    return this._u_mipmap_res_3.value;\n  }\n  set u_mipmap_res_3(v) {\n    this._u_mipmap_res_3.value = v;\n  }\n  get u_mipmap_res_4() {\n    return this._u_mipmap_res_4.value;\n  }\n  set u_mipmap_res_4(v) {\n    this._u_mipmap_res_4.value = v;\n  }\n  get u_mipmap_res_5() {\n    return this._u_mipmap_res_5.value;\n  }\n  set u_mipmap_res_5(v) {\n    this._u_mipmap_res_5.value = v;\n  }\n  get u_mipmap_res_6() {\n    return this._u_mipmap_res_6.value;\n  }\n  set u_mipmap_res_6(v) {\n    this._u_mipmap_res_6.value = v;\n  }\n  get u_mipmap_res_7() {\n    return this._u_mipmap_res_7.value;\n  }\n  set u_mipmap_res_7(v) {\n    this._u_mipmap_res_7.value = v;\n  }\n  get textureMatrix() {\n    return this._textureMatrix.value;\n  }\n  set textureMatrix(v) {\n    this._textureMatrix.value = v;\n  }\n  get mirror() {\n    return this._mirror.value;\n  }\n  set mirror(v) {\n    this._mirror.value = v;\n  }\n  get mixBlur() {\n    return this._mixBlur.value;\n  }\n  set mixBlur(v) {\n    this._mixBlur.value = v;\n  }\n  get mixStrength() {\n    return this._blurStrength.value;\n  }\n  set mixStrength(v) {\n    this._blurStrength.value = v;\n  }\n  get minDepthThreshold() {\n    return this._minDepthThreshold.value;\n  }\n  set minDepthThreshold(v) {\n    this._minDepthThreshold.value = v;\n  }\n  get maxDepthThreshold() {\n    return this._maxDepthThreshold.value;\n  }\n  set maxDepthThreshold(v) {\n    this._maxDepthThreshold.value = v;\n  }\n  get depthScale() {\n    return this._depthScale.value;\n  }\n  set depthScale(v) {\n    this._depthScale.value = v;\n  }\n  get debug() {\n    return this._debug.value;\n  }\n  set debug(v) {\n    this._debug.value = v;\n  }\n  get depthToBlurRatioBias() {\n    return this._depthToBlurRatioBias.value;\n  }\n  set depthToBlurRatioBias(v) {\n    this._depthToBlurRatioBias.value = v;\n  }\n  get distortion() {\n    return this._distortion.value;\n  }\n  set distortion(v) {\n    this._distortion.value = v;\n  }\n}\nexport { MeshReflectorMaterial };","map":{"version":3,"names":["MeshStandardMaterial","MeshReflectorMaterial","constructor","parameters","_debug","value","_tDepth","_distortionMap","_tDiffuse","_u_mipmap_0","_u_mipmap_1","_u_mipmap_2","_u_mipmap_3","_u_mipmap_4","_u_mipmap_5","_u_mipmap_6","_u_mipmap_7","_u_mipmap_res_0","_u_mipmap_res_1","_u_mipmap_res_2","_u_mipmap_res_3","_u_mipmap_res_4","_u_mipmap_res_5","_u_mipmap_res_6","_u_mipmap_res_7","_textureMatrix","_mirror","_mixBlur","_blurStrength","_minDepthThreshold","_maxDepthThreshold","_depthScale","_depthToBlurRatioBias","_distortion","setValues","onBeforeCompile","shader","_shader$defines","defines","USE_UV","uniforms","debug","tDiffuse","tDepth","distortionMap","u_mipmap_0","u_mipmap_1","u_mipmap_2","u_mipmap_3","u_mipmap_4","u_mipmap_5","u_mipmap_6","u_mipmap_7","u_mipmap_res_0","u_mipmap_res_1","u_mipmap_res_2","u_mipmap_res_3","u_mipmap_res_4","u_mipmap_res_5","u_mipmap_res_6","u_mipmap_res_7","textureMatrix","mirror","mixBlur","mixStrength","minDepthThreshold","maxDepthThreshold","depthScale","depthToBlurRatioBias","distortion","vertexShader","replace","fragmentShader","v"],"sources":["C:/Users/Work/node_modules/@react-three/drei/materials/MeshReflectorMaterial.js"],"sourcesContent":["import { MeshStandardMaterial } from 'three';\n\nclass MeshReflectorMaterial extends MeshStandardMaterial {\n  constructor(parameters = {}) {\n    super(parameters);\n    this._debug = {\n      value: 0\n    };\n    this._tDepth = {\n      value: null\n    };\n    this._distortionMap = {\n      value: null\n    };\n    this._tDiffuse = {\n      value: null\n    };\n    this._u_mipmap_0 = {\n      value: null\n    };\n    this._u_mipmap_1 = {\n      value: null\n    };\n    this._u_mipmap_2 = {\n      value: null\n    };\n    this._u_mipmap_3 = {\n      value: null\n    };\n    this._u_mipmap_4 = {\n      value: null\n    };\n    this._u_mipmap_5 = {\n      value: null\n    };\n    this._u_mipmap_6 = {\n      value: null\n    };\n    this._u_mipmap_7 = {\n      value: null\n    };\n    this._u_mipmap_res_0 = {\n      value: null\n    };\n    this._u_mipmap_res_1 = {\n      value: null\n    };\n    this._u_mipmap_res_2 = {\n      value: null\n    };\n    this._u_mipmap_res_3 = {\n      value: null\n    };\n    this._u_mipmap_res_4 = {\n      value: null\n    };\n    this._u_mipmap_res_5 = {\n      value: null\n    };\n    this._u_mipmap_res_6 = {\n      value: null\n    };\n    this._u_mipmap_res_7 = {\n      value: null\n    };\n    this._textureMatrix = {\n      value: null\n    };\n    this._mirror = {\n      value: 0.0\n    };\n    this._mixBlur = {\n      value: 0.0\n    };\n    this._blurStrength = {\n      value: 0.5\n    };\n    this._minDepthThreshold = {\n      value: 0.9\n    };\n    this._maxDepthThreshold = {\n      value: 1\n    };\n    this._depthScale = {\n      value: 0\n    };\n    this._depthToBlurRatioBias = {\n      value: 0.25\n    };\n    this._distortion = {\n      value: 1\n    };\n    this.setValues(parameters);\n  }\n\n  onBeforeCompile(shader) {\n    var _shader$defines;\n\n    if (!((_shader$defines = shader.defines) != null && _shader$defines.USE_UV)) {\n      shader.defines.USE_UV = '';\n    }\n\n    shader.uniforms.debug = this._debug;\n    shader.uniforms.tDiffuse = this._tDiffuse;\n    shader.uniforms.tDepth = this._tDepth;\n    shader.uniforms.distortionMap = this._distortionMap;\n    shader.uniforms.u_mipmap_0 = this._u_mipmap_0;\n    shader.uniforms.u_mipmap_1 = this._u_mipmap_1;\n    shader.uniforms.u_mipmap_2 = this._u_mipmap_2;\n    shader.uniforms.u_mipmap_3 = this._u_mipmap_3;\n    shader.uniforms.u_mipmap_4 = this._u_mipmap_4;\n    shader.uniforms.u_mipmap_5 = this._u_mipmap_5;\n    shader.uniforms.u_mipmap_6 = this._u_mipmap_6;\n    shader.uniforms.u_mipmap_7 = this._u_mipmap_7;\n    shader.uniforms.u_mipmap_res_0 = this._u_mipmap_res_0;\n    shader.uniforms.u_mipmap_res_1 = this._u_mipmap_res_1;\n    shader.uniforms.u_mipmap_res_2 = this._u_mipmap_res_2;\n    shader.uniforms.u_mipmap_res_3 = this._u_mipmap_res_3;\n    shader.uniforms.u_mipmap_res_4 = this._u_mipmap_res_4;\n    shader.uniforms.u_mipmap_res_5 = this._u_mipmap_res_5;\n    shader.uniforms.u_mipmap_res_6 = this._u_mipmap_res_6;\n    shader.uniforms.u_mipmap_res_7 = this._u_mipmap_res_7;\n    shader.uniforms.textureMatrix = this._textureMatrix;\n    shader.uniforms.mirror = this._mirror;\n    shader.uniforms.mixBlur = this._mixBlur;\n    shader.uniforms.mixStrength = this._blurStrength;\n    shader.uniforms.minDepthThreshold = this._minDepthThreshold;\n    shader.uniforms.maxDepthThreshold = this._maxDepthThreshold;\n    shader.uniforms.depthScale = this._depthScale;\n    shader.uniforms.depthToBlurRatioBias = this._depthToBlurRatioBias;\n    shader.uniforms.distortion = this._distortion;\n    shader.vertexShader = `\n        uniform mat4 textureMatrix;\n        varying vec4 my_vUv;     \n      ${shader.vertexShader}`;\n    shader.vertexShader = shader.vertexShader.replace('#include <project_vertex>', `#include <project_vertex>\n        my_vUv = textureMatrix * vec4( position, 1.0 );\n        gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );`);\n    shader.fragmentShader = `\n        uniform int debug;\n        uniform sampler2D tDiffuse;\n        uniform sampler2D tDepth;\n        uniform sampler2D distortionMap;\n        uniform sampler2D u_mipmap_0;\n        uniform sampler2D u_mipmap_1;\n        uniform sampler2D u_mipmap_2;\n        uniform sampler2D u_mipmap_3;\n        uniform sampler2D u_mipmap_4;\n        uniform sampler2D u_mipmap_5;\n        uniform sampler2D u_mipmap_6;\n        uniform sampler2D u_mipmap_7;\n        uniform vec2 u_mipmap_res_0;\n        uniform vec2 u_mipmap_res_1;\n        uniform vec2 u_mipmap_res_2;\n        uniform vec2 u_mipmap_res_3;\n        uniform vec2 u_mipmap_res_4;\n        uniform vec2 u_mipmap_res_5;\n        uniform vec2 u_mipmap_res_6;\n        uniform vec2 u_mipmap_res_7;\n        uniform float distortion;\n        uniform float cameraNear;\n\t\t\t  uniform float cameraFar;\n        uniform float mixBlur;\n        uniform float mirror;\n        uniform float mixStrength;\n        uniform float minDepthThreshold;\n        uniform float maxDepthThreshold;\n        uniform float depthScale;\n        uniform float depthToBlurRatioBias;\n        varying vec4 my_vUv;  \n        \n        // from http://www.java-gaming.org/index.php?topic=35123.0\n        vec4 cubic( float v ) {\n          vec4 n = vec4( 1.0, 2.0, 3.0, 4.0 ) - v;\n          vec4 s = n * n * n;\n          float x = s.x;\n          float y = s.y - 4.0 * s.x;\n          float z = s.z - 4.0 * s.y + 6.0 * s.x;\n          float w = 6.0 - x - y - z;\n          return vec4( x, y, z, w ) * ( 1.0 / 6.0 );\n        }\n        \n        vec4 textureBicubic( sampler2D sampler, vec2 texCoords, vec2 texSize ) {\n          vec2 invTexSize = 1.0 / texSize;\n          texCoords = texCoords * texSize - 0.5;\n          vec2 fxy = fract( texCoords );\n          texCoords -= fxy;\n\n          vec4 xcubic = cubic( fxy.x );\n          vec4 ycubic = cubic( fxy.y );\n          vec4 c = texCoords.xxyy + vec2 ( - 0.5, + 1.5 ).xyxy;\n          vec4 s = vec4( xcubic.xz + xcubic.yw, ycubic.xz + ycubic.yw );\n\n          vec4 offset = c + vec4( xcubic.yw, ycubic.yw ) / s;\n          offset *= invTexSize.xxyy;\n        \n          vec4 sample0 = texture2D( sampler, offset.xz);\n          vec4 sample1 = texture2D( sampler, offset.yz);\n          vec4 sample2 = texture2D( sampler, offset.xw);\n          vec4 sample3 = texture2D( sampler, offset.yw);\n        \n          float sx = s.x / ( s.x + s.y );\n          float sy = s.z / ( s.z + s.w );\n\n          return mix(\n            mix(\n              sample3,\n              sample2,\n              sx\n            ),\n            mix(\n              sample1,\n              sample0,\n              sx\n            ),\n            sy\n          );\n        }\n\n\n        ${shader.fragmentShader}`;\n    shader.fragmentShader = shader.fragmentShader.replace('#include <emissivemap_fragment>', `#include <emissivemap_fragment>\n    \n      float depthFactor = 1.0;\n      float distortionFactor = 0.0;\n      vec3 my_normal = vec3(0.0);\n      float reflectorRoughnessFactor = roughness;\n      vec3 coord = my_vUv.xyz / my_vUv.w;\n\n      #ifdef USE_DISTORTION\n        distortionFactor = texture2D(distortionMap, vUv).r * distortion;\n      #endif\n\n      #ifdef USE_NORMALMAP\n        vec4 normalColor = texture2D(normalMap, vUv * normalScale);\n        my_normal = normalize( vec3( normalColor.r * 2.0 - 1.0, normalColor.b ,  normalColor.g * 2.0 - 1.0 ) );\n      #endif\n\n      #ifdef USE_ROUGHNESSMAP\n        vec4 reflectorTexelRoughness = texture2D( roughnessMap, vUv );\n        reflectorRoughnessFactor *= reflectorTexelRoughness.g;\n      #endif\n\n      vec2 proj_vUv = coord.xy + coord.z * my_normal.xz * 0.01;\n      proj_vUv.x += distortionFactor;\n      proj_vUv.y += distortionFactor;\n      \n      float lod = 1.0 - min(1.0, mixBlur * reflectorRoughnessFactor);\n\n      #ifdef USE_DEPTH\n        vec4 depth = texture2D(tDepth, proj_vUv);\n        depthFactor = smoothstep(minDepthThreshold, maxDepthThreshold, 1.0-(depth.r * depth.a));\n        depthFactor *= depthScale;\n        depthFactor = max(0.0001, min(1.0, depthFactor + depthToBlurRatioBias));\n      #endif\n\n      vec4 baseColor = texture2D(tDiffuse, proj_vUv);\n      vec4 mixedColor;\n\n      float _lod = (1.0 - pow(1.0 - lod, 4.0)) * 8.0;\n      if (_lod < 1.) {\n        vec4 one = textureBicubic(u_mipmap_7, proj_vUv, u_mipmap_res_7);\n        vec4 two = textureBicubic(u_mipmap_6, proj_vUv, u_mipmap_res_6);\n        mixedColor = mix(one, two, _lod);\n      } else if (_lod < 2.) {\n        vec4 one = textureBicubic(u_mipmap_6, proj_vUv, u_mipmap_res_6);\n        vec4 two = textureBicubic(u_mipmap_5, proj_vUv, u_mipmap_res_5);\n        mixedColor = mix(one, two, _lod - 1.0);\n      } else if (_lod < 3.) {\n        vec4 one = textureBicubic(u_mipmap_5, proj_vUv, u_mipmap_res_5);\n        vec4 two = textureBicubic(u_mipmap_4, proj_vUv, u_mipmap_res_4);\n        mixedColor = mix(one, two, _lod - 2.0);\n      } else if (_lod < 4.) {\n        vec4 one = textureBicubic(u_mipmap_4, proj_vUv, u_mipmap_res_4);\n        vec4 two = textureBicubic(u_mipmap_3, proj_vUv, u_mipmap_res_3);\n        mixedColor = mix(one, two, _lod - 3.0);\n      } else if (_lod < 5.) {\n        vec4 one = textureBicubic(u_mipmap_3, proj_vUv, u_mipmap_res_3);\n        vec4 two = textureBicubic(u_mipmap_2, proj_vUv, u_mipmap_res_2);\n        mixedColor = mix(one, two, _lod - 4.0);\n      } else if (_lod < 6.) {\n        vec4 one = textureBicubic(u_mipmap_2, proj_vUv, u_mipmap_res_2);\n        vec4 two = textureBicubic(u_mipmap_1, proj_vUv, u_mipmap_res_1);\n        mixedColor = mix(one, two, _lod - 5.0);\n      } else if (_lod < 7.) {\n        vec4 one = textureBicubic(u_mipmap_1, proj_vUv, u_mipmap_res_1);\n        vec4 two = textureBicubic(u_mipmap_0, proj_vUv, u_mipmap_res_0);\n        mixedColor = mix(one, two, _lod - 6.0);\n      } else {\n        vec4 one = textureBicubic(u_mipmap_0, proj_vUv, u_mipmap_res_0);\n        mixedColor = mix(one, baseColor, _lod - 7.0);\n      }\n\n      mixedColor.rgb *= depthFactor;\n      diffuseColor.rgb = diffuseColor.rgb * ((1.0 - min(1.0, mirror)) + mixedColor.rgb * mixStrength);     \n      diffuseColor = sRGBToLinear(diffuseColor);\n\n      if (debug == 1) {\n        diffuseColor = sRGBToLinear(vec4(vec3(depthFactor), 1.0));\n      }\n      if (debug == 2) {\n        diffuseColor = sRGBToLinear(texture2D(tDiffuse, proj_vUv));\n      }\n      if (debug == 3) {\n        diffuseColor = sRGBToLinear(texture2D(distortionMap, vUv));\n      }\n      if (debug == 4) {\n        diffuseColor = sRGBToLinear(vec4(vec3(lod), 1.0));\n      }\n      `);\n  }\n\n  get tDiffuse() {\n    return this._tDiffuse.value;\n  }\n\n  set tDiffuse(v) {\n    this._tDiffuse.value = v;\n  }\n\n  get tDepth() {\n    return this._tDepth.value;\n  }\n\n  set tDepth(v) {\n    this._tDepth.value = v;\n  }\n\n  get distortionMap() {\n    return this._distortionMap.value;\n  }\n\n  set distortionMap(v) {\n    this._distortionMap.value = v;\n  }\n\n  get u_mipmap_0() {\n    return this._u_mipmap_0.value;\n  }\n\n  set u_mipmap_0(v) {\n    this._u_mipmap_0.value = v;\n  }\n\n  get u_mipmap_1() {\n    return this._u_mipmap_1.value;\n  }\n\n  set u_mipmap_1(v) {\n    this._u_mipmap_1.value = v;\n  }\n\n  get u_mipmap_2() {\n    return this._u_mipmap_2.value;\n  }\n\n  set u_mipmap_2(v) {\n    this._u_mipmap_2.value = v;\n  }\n\n  get u_mipmap_3() {\n    return this._u_mipmap_3.value;\n  }\n\n  set u_mipmap_3(v) {\n    this._u_mipmap_3.value = v;\n  }\n\n  get u_mipmap_4() {\n    return this._u_mipmap_4.value;\n  }\n\n  set u_mipmap_4(v) {\n    this._u_mipmap_4.value = v;\n  }\n\n  get u_mipmap_5() {\n    return this._u_mipmap_5.value;\n  }\n\n  set u_mipmap_5(v) {\n    this._u_mipmap_5.value = v;\n  }\n\n  get u_mipmap_6() {\n    return this._u_mipmap_6.value;\n  }\n\n  set u_mipmap_6(v) {\n    this._u_mipmap_6.value = v;\n  }\n\n  get u_mipmap_7() {\n    return this._u_mipmap_7.value;\n  }\n\n  set u_mipmap_7(v) {\n    this._u_mipmap_7.value = v;\n  }\n\n  get u_mipmap_res_0() {\n    return this._u_mipmap_res_0.value;\n  }\n\n  set u_mipmap_res_0(v) {\n    this._u_mipmap_res_0.value = v;\n  }\n\n  get u_mipmap_res_1() {\n    return this._u_mipmap_res_1.value;\n  }\n\n  set u_mipmap_res_1(v) {\n    this._u_mipmap_res_1.value = v;\n  }\n\n  get u_mipmap_res_2() {\n    return this._u_mipmap_res_2.value;\n  }\n\n  set u_mipmap_res_2(v) {\n    this._u_mipmap_res_2.value = v;\n  }\n\n  get u_mipmap_res_3() {\n    return this._u_mipmap_res_3.value;\n  }\n\n  set u_mipmap_res_3(v) {\n    this._u_mipmap_res_3.value = v;\n  }\n\n  get u_mipmap_res_4() {\n    return this._u_mipmap_res_4.value;\n  }\n\n  set u_mipmap_res_4(v) {\n    this._u_mipmap_res_4.value = v;\n  }\n\n  get u_mipmap_res_5() {\n    return this._u_mipmap_res_5.value;\n  }\n\n  set u_mipmap_res_5(v) {\n    this._u_mipmap_res_5.value = v;\n  }\n\n  get u_mipmap_res_6() {\n    return this._u_mipmap_res_6.value;\n  }\n\n  set u_mipmap_res_6(v) {\n    this._u_mipmap_res_6.value = v;\n  }\n\n  get u_mipmap_res_7() {\n    return this._u_mipmap_res_7.value;\n  }\n\n  set u_mipmap_res_7(v) {\n    this._u_mipmap_res_7.value = v;\n  }\n\n  get textureMatrix() {\n    return this._textureMatrix.value;\n  }\n\n  set textureMatrix(v) {\n    this._textureMatrix.value = v;\n  }\n\n  get mirror() {\n    return this._mirror.value;\n  }\n\n  set mirror(v) {\n    this._mirror.value = v;\n  }\n\n  get mixBlur() {\n    return this._mixBlur.value;\n  }\n\n  set mixBlur(v) {\n    this._mixBlur.value = v;\n  }\n\n  get mixStrength() {\n    return this._blurStrength.value;\n  }\n\n  set mixStrength(v) {\n    this._blurStrength.value = v;\n  }\n\n  get minDepthThreshold() {\n    return this._minDepthThreshold.value;\n  }\n\n  set minDepthThreshold(v) {\n    this._minDepthThreshold.value = v;\n  }\n\n  get maxDepthThreshold() {\n    return this._maxDepthThreshold.value;\n  }\n\n  set maxDepthThreshold(v) {\n    this._maxDepthThreshold.value = v;\n  }\n\n  get depthScale() {\n    return this._depthScale.value;\n  }\n\n  set depthScale(v) {\n    this._depthScale.value = v;\n  }\n\n  get debug() {\n    return this._debug.value;\n  }\n\n  set debug(v) {\n    this._debug.value = v;\n  }\n\n  get depthToBlurRatioBias() {\n    return this._depthToBlurRatioBias.value;\n  }\n\n  set depthToBlurRatioBias(v) {\n    this._depthToBlurRatioBias.value = v;\n  }\n\n  get distortion() {\n    return this._distortion.value;\n  }\n\n  set distortion(v) {\n    this._distortion.value = v;\n  }\n\n}\n\nexport { MeshReflectorMaterial };\n"],"mappings":"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C7CG,MAAM,CAACkC,YAAY,GAAI;AAC3B;AACA;AACA,QAAQlC,MAAM,CAACkC,YAAa,EAAC;IACzBlC,MAAM,CAACkC,YAAY,GAAGlC,MAAM,CAACkC,YAAY,CAACC,OAAO,CAAC,2BAA2B,EAAG;AACpF;AACA,kFAAkF,CAAC;IAC/EnC,MAAM,CAACoC,cAAc,GAAI;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAUpC,MAAM,CAACoC,cAAe,EAAC;IAC7BpC,MAAM,CAACoC,cAAc,GAAGpC,MAAM,CAACoC,cAAc,CAACD,OAAO,CAAC,iCAAiC,EAAG;AAC9F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,CAAC;EACN;EAEA,IAAI7B,QAAQA,CAAA,EA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"},"metadata":{},"sourceType":"module","externalDependencies":[]}