{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.RestWalker = void 0;\nvar utils_1 = require(\"@chevrotain/utils\");\nvar gast_public_1 = require(\"./gast/gast_public\");\n/**\n *  A Grammar Walker that computes the \"remaining\" grammar \"after\" a productions in the grammar.\n */\nvar RestWalker = /** @class */function () {\n  function RestWalker() {}\n  RestWalker.prototype.walk = function (prod, prevRest) {\n    var _this = this;\n    if (prevRest === void 0) {\n      prevRest = [];\n    }\n    utils_1.forEach(prod.definition, function (subProd, index) {\n      var currRest = utils_1.drop(prod.definition, index + 1);\n      /* istanbul ignore else */\n      if (subProd instanceof gast_public_1.NonTerminal) {\n        _this.walkProdRef(subProd, currRest, prevRest);\n      } else if (subProd instanceof gast_public_1.Terminal) {\n        _this.walkTerminal(subProd, currRest, prevRest);\n      } else if (subProd instanceof gast_public_1.Alternative) {\n        _this.walkFlat(subProd, currRest, prevRest);\n      } else if (subProd instanceof gast_public_1.Option) {\n        _this.walkOption(subProd, currRest, prevRest);\n      } else if (subProd instanceof gast_public_1.RepetitionMandatory) {\n        _this.walkAtLeastOne(subProd, currRest, prevRest);\n      } else if (subProd instanceof gast_public_1.RepetitionMandatoryWithSeparator) {\n        _this.walkAtLeastOneSep(subProd, currRest, prevRest);\n      } else if (subProd instanceof gast_public_1.RepetitionWithSeparator) {\n        _this.walkManySep(subProd, currRest, prevRest);\n      } else if (subProd instanceof gast_public_1.Repetition) {\n        _this.walkMany(subProd, currRest, prevRest);\n      } else if (subProd instanceof gast_public_1.Alternation) {\n        _this.walkOr(subProd, currRest, prevRest);\n      } else {\n        throw Error(\"non exhaustive match\");\n      }\n    });\n  };\n  RestWalker.prototype.walkTerminal = function (terminal, currRest, prevRest) {};\n  RestWalker.prototype.walkProdRef = function (refProd, currRest, prevRest) {};\n  RestWalker.prototype.walkFlat = function (flatProd, currRest, prevRest) {\n    // ABCDEF => after the D the rest is EF\n    var fullOrRest = currRest.concat(prevRest);\n    this.walk(flatProd, fullOrRest);\n  };\n  RestWalker.prototype.walkOption = function (optionProd, currRest, prevRest) {\n    // ABC(DE)?F => after the (DE)? the rest is F\n    var fullOrRest = currRest.concat(prevRest);\n    this.walk(optionProd, fullOrRest);\n  };\n  RestWalker.prototype.walkAtLeastOne = function (atLeastOneProd, currRest, prevRest) {\n    // ABC(DE)+F => after the (DE)+ the rest is (DE)?F\n    var fullAtLeastOneRest = [new gast_public_1.Option({\n      definition: atLeastOneProd.definition\n    })].concat(currRest, prevRest);\n    this.walk(atLeastOneProd, fullAtLeastOneRest);\n  };\n  RestWalker.prototype.walkAtLeastOneSep = function (atLeastOneSepProd, currRest, prevRest) {\n    // ABC DE(,DE)* F => after the (,DE)+ the rest is (,DE)?F\n    var fullAtLeastOneSepRest = restForRepetitionWithSeparator(atLeastOneSepProd, currRest, prevRest);\n    this.walk(atLeastOneSepProd, fullAtLeastOneSepRest);\n  };\n  RestWalker.prototype.walkMany = function (manyProd, currRest, prevRest) {\n    // ABC(DE)*F => after the (DE)* the rest is (DE)?F\n    var fullManyRest = [new gast_public_1.Option({\n      definition: manyProd.definition\n    })].concat(currRest, prevRest);\n    this.walk(manyProd, fullManyRest);\n  };\n  RestWalker.prototype.walkManySep = function (manySepProd, currRest, prevRest) {\n    // ABC (DE(,DE)*)? F => after the (,DE)* the rest is (,DE)?F\n    var fullManySepRest = restForRepetitionWithSeparator(manySepProd, currRest, prevRest);\n    this.walk(manySepProd, fullManySepRest);\n  };\n  RestWalker.prototype.walkOr = function (orProd, currRest, prevRest) {\n    var _this = this;\n    // ABC(D|E|F)G => when finding the (D|E|F) the rest is G\n    var fullOrRest = currRest.concat(prevRest);\n    // walk all different alternatives\n    utils_1.forEach(orProd.definition, function (alt) {\n      // wrapping each alternative in a single definition wrapper\n      // to avoid errors in computing the rest of that alternative in the invocation to computeInProdFollows\n      // (otherwise for OR([alt1,alt2]) alt2 will be considered in 'rest' of alt1\n      var prodWrapper = new gast_public_1.Alternative({\n        definition: [alt]\n      });\n      _this.walk(prodWrapper, fullOrRest);\n    });\n  };\n  return RestWalker;\n}();\nexports.RestWalker = RestWalker;\nfunction restForRepetitionWithSeparator(repSepProd, currRest, prevRest) {\n  var repSepRest = [new gast_public_1.Option({\n    definition: [new gast_public_1.Terminal({\n      terminalType: repSepProd.separator\n    })].concat(repSepProd.definition)\n  })];\n  var fullRepSepRest = repSepRest.concat(currRest, prevRest);\n  return fullRepSepRest;\n}","map":{"version":3,"names":["utils_1","require","gast_public_1","RestWalker","prototype","walk","prod","prevRest","_this","forEach","definition","subProd","index","currRest","drop","NonTerminal","walkProdRef","Terminal","walkTerminal","Alternative","walkFlat","Option","walkOption","RepetitionMandatory","walkAtLeastOne","RepetitionMandatoryWithSeparator","walkAtLeastOneSep","RepetitionWithSeparator","walkManySep","Repetition","walkMany","Alternation","walkOr","Error","terminal","refProd","flatProd","fullOrRest","concat","optionProd","atLeastOneProd","fullAtLeastOneRest","atLeastOneSepProd","fullAtLeastOneSepRest","restForRepetitionWithSeparator","manyProd","fullManyRest","manySepProd","fullManySepRest","orProd","alt","prodWrapper","exports","repSepProd","repSepRest","terminalType","separator","fullRepSepRest"],"sources":["C:\\Users\\Work\\node_modules\\chevrotain\\src\\parse\\grammar\\rest.ts"],"sourcesContent":["import { drop, forEach } from \"@chevrotain/utils\"\nimport {\n  AbstractProduction,\n  Alternation,\n  Alternative,\n  NonTerminal,\n  Option,\n  Repetition,\n  RepetitionMandatory,\n  RepetitionMandatoryWithSeparator,\n  RepetitionWithSeparator,\n  Terminal\n} from \"./gast/gast_public\"\nimport { IProduction } from \"@chevrotain/types\"\n\n/**\n *  A Grammar Walker that computes the \"remaining\" grammar \"after\" a productions in the grammar.\n */\nexport abstract class RestWalker {\n  walk(prod: AbstractProduction, prevRest: any[] = []): void {\n    forEach(prod.definition, (subProd: IProduction, index) => {\n      const currRest = drop(prod.definition, index + 1)\n      /* istanbul ignore else */\n      if (subProd instanceof NonTerminal) {\n        this.walkProdRef(subProd, currRest, prevRest)\n      } else if (subProd instanceof Terminal) {\n        this.walkTerminal(subProd, currRest, prevRest)\n      } else if (subProd instanceof Alternative) {\n        this.walkFlat(subProd, currRest, prevRest)\n      } else if (subProd instanceof Option) {\n        this.walkOption(subProd, currRest, prevRest)\n      } else if (subProd instanceof RepetitionMandatory) {\n        this.walkAtLeastOne(subProd, currRest, prevRest)\n      } else if (subProd instanceof RepetitionMandatoryWithSeparator) {\n        this.walkAtLeastOneSep(subProd, currRest, prevRest)\n      } else if (subProd instanceof RepetitionWithSeparator) {\n        this.walkManySep(subProd, currRest, prevRest)\n      } else if (subProd instanceof Repetition) {\n        this.walkMany(subProd, currRest, prevRest)\n      } else if (subProd instanceof Alternation) {\n        this.walkOr(subProd, currRest, prevRest)\n      } else {\n        throw Error(\"non exhaustive match\")\n      }\n    })\n  }\n\n  walkTerminal(\n    terminal: Terminal,\n    currRest: IProduction[],\n    prevRest: IProduction[]\n  ): void {}\n\n  walkProdRef(\n    refProd: NonTerminal,\n    currRest: IProduction[],\n    prevRest: IProduction[]\n  ): void {}\n\n  walkFlat(\n    flatProd: Alternative,\n    currRest: IProduction[],\n    prevRest: IProduction[]\n  ): void {\n    // ABCDEF => after the D the rest is EF\n    const fullOrRest = currRest.concat(prevRest)\n    this.walk(flatProd, <any>fullOrRest)\n  }\n\n  walkOption(\n    optionProd: Option,\n    currRest: IProduction[],\n    prevRest: IProduction[]\n  ): void {\n    // ABC(DE)?F => after the (DE)? the rest is F\n    const fullOrRest = currRest.concat(prevRest)\n    this.walk(optionProd, <any>fullOrRest)\n  }\n\n  walkAtLeastOne(\n    atLeastOneProd: RepetitionMandatory,\n    currRest: IProduction[],\n    prevRest: IProduction[]\n  ): void {\n    // ABC(DE)+F => after the (DE)+ the rest is (DE)?F\n    const fullAtLeastOneRest: IProduction[] = [\n      new Option({ definition: atLeastOneProd.definition })\n    ].concat(<any>currRest, <any>prevRest)\n    this.walk(atLeastOneProd, fullAtLeastOneRest)\n  }\n\n  walkAtLeastOneSep(\n    atLeastOneSepProd: RepetitionMandatoryWithSeparator,\n    currRest: IProduction[],\n    prevRest: IProduction[]\n  ): void {\n    // ABC DE(,DE)* F => after the (,DE)+ the rest is (,DE)?F\n    const fullAtLeastOneSepRest = restForRepetitionWithSeparator(\n      atLeastOneSepProd,\n      currRest,\n      prevRest\n    )\n    this.walk(atLeastOneSepProd, fullAtLeastOneSepRest)\n  }\n\n  walkMany(\n    manyProd: Repetition,\n    currRest: IProduction[],\n    prevRest: IProduction[]\n  ): void {\n    // ABC(DE)*F => after the (DE)* the rest is (DE)?F\n    const fullManyRest: IProduction[] = [\n      new Option({ definition: manyProd.definition })\n    ].concat(<any>currRest, <any>prevRest)\n    this.walk(manyProd, fullManyRest)\n  }\n\n  walkManySep(\n    manySepProd: RepetitionWithSeparator,\n    currRest: IProduction[],\n    prevRest: IProduction[]\n  ): void {\n    // ABC (DE(,DE)*)? F => after the (,DE)* the rest is (,DE)?F\n    const fullManySepRest = restForRepetitionWithSeparator(\n      manySepProd,\n      currRest,\n      prevRest\n    )\n    this.walk(manySepProd, fullManySepRest)\n  }\n\n  walkOr(\n    orProd: Alternation,\n    currRest: IProduction[],\n    prevRest: IProduction[]\n  ): void {\n    // ABC(D|E|F)G => when finding the (D|E|F) the rest is G\n    const fullOrRest = currRest.concat(prevRest)\n    // walk all different alternatives\n    forEach(orProd.definition, (alt) => {\n      // wrapping each alternative in a single definition wrapper\n      // to avoid errors in computing the rest of that alternative in the invocation to computeInProdFollows\n      // (otherwise for OR([alt1,alt2]) alt2 will be considered in 'rest' of alt1\n      const prodWrapper = new Alternative({ definition: [alt] })\n      this.walk(prodWrapper, <any>fullOrRest)\n    })\n  }\n}\n\nfunction restForRepetitionWithSeparator(repSepProd, currRest, prevRest) {\n  const repSepRest = [\n    new Option({\n      definition: [new Terminal({ terminalType: repSepProd.separator })].concat(\n        repSepProd.definition\n      )\n    })\n  ]\n  const fullRepSepRest: IProduction[] = repSepRest.concat(\n    <any>currRest,\n    <any>prevRest\n  )\n  return fullRepSepRest\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}