{"ast":null,"code":"import { Loader, FileLoader, Matrix3, Vector2, Vector3, ShapeUtils, Box2, Shape, Path, BufferGeometry, Float32BufferAttribute, ShapePath } from 'three';\nclass SVGLoader extends Loader {\n  constructor(manager) {\n    super(manager); // Default dots per inch\n\n    this.defaultDPI = 90; // Accepted units: 'mm', 'cm', 'in', 'pt', 'pc', 'px'\n\n    this.defaultUnit = 'px';\n  }\n  load(url, onLoad, onProgress, onError) {\n    const scope = this;\n    const loader = new FileLoader(scope.manager);\n    loader.setPath(scope.path);\n    loader.setRequestHeader(scope.requestHeader);\n    loader.setWithCredentials(scope.withCredentials);\n    loader.load(url, function (text) {\n      try {\n        onLoad(scope.parse(text));\n      } catch (e) {\n        if (onError) {\n          onError(e);\n        } else {\n          console.error(e);\n        }\n        scope.manager.itemError(url);\n      }\n    }, onProgress, onError);\n  }\n  parse(text) {\n    const scope = this;\n    function parseNode(node, style) {\n      if (node.nodeType !== 1) return;\n      const transform = getNodeTransform(node);\n      let traverseChildNodes = true;\n      let path = null;\n      switch (node.nodeName) {\n        case 'svg':\n          break;\n        case 'style':\n          parseCSSStylesheet(node);\n          break;\n        case 'g':\n          style = parseStyle(node, style);\n          break;\n        case 'path':\n          style = parseStyle(node, style);\n          if (node.hasAttribute('d')) path = parsePathNode(node);\n          break;\n        case 'rect':\n          style = parseStyle(node, style);\n          path = parseRectNode(node);\n          break;\n        case 'polygon':\n          style = parseStyle(node, style);\n          path = parsePolygonNode(node);\n          break;\n        case 'polyline':\n          style = parseStyle(node, style);\n          path = parsePolylineNode(node);\n          break;\n        case 'circle':\n          style = parseStyle(node, style);\n          path = parseCircleNode(node);\n          break;\n        case 'ellipse':\n          style = parseStyle(node, style);\n          path = parseEllipseNode(node);\n          break;\n        case 'line':\n          style = parseStyle(node, style);\n          path = parseLineNode(node);\n          break;\n        case 'defs':\n          traverseChildNodes = false;\n          break;\n        case 'use':\n          style = parseStyle(node, style);\n          const usedNodeId = node.href.baseVal.substring(1);\n          const usedNode = node.viewportElement.getElementById(usedNodeId);\n          if (usedNode) {\n            parseNode(usedNode, style);\n          } else {\n            console.warn(\"SVGLoader: 'use node' references non-existent node id: \" + usedNodeId);\n          }\n          break;\n      }\n      if (path) {\n        if (style.fill !== undefined && style.fill !== 'none') {\n          path.color.setStyle(style.fill);\n        }\n        transformPath(path, currentTransform);\n        paths.push(path);\n        path.userData = {\n          node: node,\n          style: style\n        };\n      }\n      if (traverseChildNodes) {\n        const nodes = node.childNodes;\n        for (let i = 0; i < nodes.length; i++) {\n          parseNode(nodes[i], style);\n        }\n      }\n      if (transform) {\n        transformStack.pop();\n        if (transformStack.length > 0) {\n          currentTransform.copy(transformStack[transformStack.length - 1]);\n        } else {\n          currentTransform.identity();\n        }\n      }\n    }\n    function parsePathNode(node) {\n      const path = new ShapePath();\n      const point = new Vector2();\n      const control = new Vector2();\n      const firstPoint = new Vector2();\n      let isFirstPoint = true;\n      let doSetFirstPoint = false;\n      const d = node.getAttribute('d'); // console.log( d );\n\n      const commands = d.match(/[a-df-z][^a-df-z]*/gi);\n      for (let i = 0, l = commands.length; i < l; i++) {\n        const command = commands[i];\n        const type = command.charAt(0);\n        const data = command.substr(1).trim();\n        if (isFirstPoint === true) {\n          doSetFirstPoint = true;\n          isFirstPoint = false;\n        }\n        let numbers;\n        switch (type) {\n          case 'M':\n            numbers = parseFloats(data);\n            for (let j = 0, jl = numbers.length; j < jl; j += 2) {\n              point.x = numbers[j + 0];\n              point.y = numbers[j + 1];\n              control.x = point.x;\n              control.y = point.y;\n              if (j === 0) {\n                path.moveTo(point.x, point.y);\n              } else {\n                path.lineTo(point.x, point.y);\n              }\n              if (j === 0 && doSetFirstPoint === true) firstPoint.copy(point);\n            }\n            break;\n          case 'H':\n            numbers = parseFloats(data);\n            for (let j = 0, jl = numbers.length; j < jl; j++) {\n              point.x = numbers[j];\n              control.x = point.x;\n              control.y = point.y;\n              path.lineTo(point.x, point.y);\n              if (j === 0 && doSetFirstPoint === true) firstPoint.copy(point);\n            }\n            break;\n          case 'V':\n            numbers = parseFloats(data);\n            for (let j = 0, jl = numbers.length; j < jl; j++) {\n              point.y = numbers[j];\n              control.x = point.x;\n              control.y = point.y;\n              path.lineTo(point.x, point.y);\n              if (j === 0 && doSetFirstPoint === true) firstPoint.copy(point);\n            }\n            break;\n          case 'L':\n            numbers = parseFloats(data);\n            for (let j = 0, jl = numbers.length; j < jl; j += 2) {\n              point.x = numbers[j + 0];\n              point.y = numbers[j + 1];\n              control.x = point.x;\n              control.y = point.y;\n              path.lineTo(point.x, point.y);\n              if (j === 0 && doSetFirstPoint === true) firstPoint.copy(point);\n            }\n            break;\n          case 'C':\n            numbers = parseFloats(data);\n            for (let j = 0, jl = numbers.length; j < jl; j += 6) {\n              path.bezierCurveTo(numbers[j + 0], numbers[j + 1], numbers[j + 2], numbers[j + 3], numbers[j + 4], numbers[j + 5]);\n              control.x = numbers[j + 2];\n              control.y = numbers[j + 3];\n              point.x = numbers[j + 4];\n              point.y = numbers[j + 5];\n              if (j === 0 && doSetFirstPoint === true) firstPoint.copy(point);\n            }\n            break;\n          case 'S':\n            numbers = parseFloats(data);\n            for (let j = 0, jl = numbers.length; j < jl; j += 4) {\n              path.bezierCurveTo(getReflection(point.x, control.x), getReflection(point.y, control.y), numbers[j + 0], numbers[j + 1], numbers[j + 2], numbers[j + 3]);\n              control.x = numbers[j + 0];\n              control.y = numbers[j + 1];\n              point.x = numbers[j + 2];\n              point.y = numbers[j + 3];\n              if (j === 0 && doSetFirstPoint === true) firstPoint.copy(point);\n            }\n            break;\n          case 'Q':\n            numbers = parseFloats(data);\n            for (let j = 0, jl = numbers.length; j < jl; j += 4) {\n              path.quadraticCurveTo(numbers[j + 0], numbers[j + 1], numbers[j + 2], numbers[j + 3]);\n              control.x = numbers[j + 0];\n              control.y = numbers[j + 1];\n              point.x = numbers[j + 2];\n              point.y = numbers[j + 3];\n              if (j === 0 && doSetFirstPoint === true) firstPoint.copy(point);\n            }\n            break;\n          case 'T':\n            numbers = parseFloats(data);\n            for (let j = 0, jl = numbers.length; j < jl; j += 2) {\n              const rx = getReflection(point.x, control.x);\n              const ry = getReflection(point.y, control.y);\n              path.quadraticCurveTo(rx, ry, numbers[j + 0], numbers[j + 1]);\n              control.x = rx;\n              control.y = ry;\n              point.x = numbers[j + 0];\n              point.y = numbers[j + 1];\n              if (j === 0 && doSetFirstPoint === true) firstPoint.copy(point);\n            }\n            break;\n          case 'A':\n            numbers = parseFloats(data, [3, 4], 7);\n            for (let j = 0, jl = numbers.length; j < jl; j += 7) {\n              // skip command if start point == end point\n              if (numbers[j + 5] == point.x && numbers[j + 6] == point.y) continue;\n              const start = point.clone();\n              point.x = numbers[j + 5];\n              point.y = numbers[j + 6];\n              control.x = point.x;\n              control.y = point.y;\n              parseArcCommand(path, numbers[j], numbers[j + 1], numbers[j + 2], numbers[j + 3], numbers[j + 4], start, point);\n              if (j === 0 && doSetFirstPoint === true) firstPoint.copy(point);\n            }\n            break;\n          case 'm':\n            numbers = parseFloats(data);\n            for (let j = 0, jl = numbers.length; j < jl; j += 2) {\n              point.x += numbers[j + 0];\n              point.y += numbers[j + 1];\n              control.x = point.x;\n              control.y = point.y;\n              if (j === 0) {\n                path.moveTo(point.x, point.y);\n              } else {\n                path.lineTo(point.x, point.y);\n              }\n              if (j === 0 && doSetFirstPoint === true) firstPoint.copy(point);\n            }\n            break;\n          case 'h':\n            numbers = parseFloats(data);\n            for (let j = 0, jl = numbers.length; j < jl; j++) {\n              point.x += numbers[j];\n              control.x = point.x;\n              control.y = point.y;\n              path.lineTo(point.x, point.y);\n              if (j === 0 && doSetFirstPoint === true) firstPoint.copy(point);\n            }\n            break;\n          case 'v':\n            numbers = parseFloats(data);\n            for (let j = 0, jl = numbers.length; j < jl; j++) {\n              point.y += numbers[j];\n              control.x = point.x;\n              control.y = point.y;\n              path.lineTo(point.x, point.y);\n              if (j === 0 && doSetFirstPoint === true) firstPoint.copy(point);\n            }\n            break;\n          case 'l':\n            numbers = parseFloats(data);\n            for (let j = 0, jl = numbers.length; j < jl; j += 2) {\n              point.x += numbers[j + 0];\n              point.y += numbers[j + 1];\n              control.x = point.x;\n              control.y = point.y;\n              path.lineTo(point.x, point.y);\n              if (j === 0 && doSetFirstPoint === true) firstPoint.copy(point);\n            }\n            break;\n          case 'c':\n            numbers = parseFloats(data);\n            for (let j = 0, jl = numbers.length; j < jl; j += 6) {\n              path.bezierCurveTo(point.x + numbers[j + 0], point.y + numbers[j + 1], point.x + numbers[j + 2], point.y + numbers[j + 3], point.x + numbers[j + 4], point.y + numbers[j + 5]);\n              control.x = point.x + numbers[j + 2];\n              control.y = point.y + numbers[j + 3];\n              point.x += numbers[j + 4];\n              point.y += numbers[j + 5];\n              if (j === 0 && doSetFirstPoint === true) firstPoint.copy(point);\n            }\n            break;\n          case 's':\n            numbers = parseFloats(data);\n            for (let j = 0, jl = numbers.length; j < jl; j += 4) {\n              path.bezierCurveTo(getReflection(point.x, control.x), getReflection(point.y, control.y), point.x + numbers[j + 0], point.y + numbers[j + 1], point.x + numbers[j + 2], point.y + numbers[j + 3]);\n              control.x = point.x + numbers[j + 0];\n              control.y = point.y + numbers[j + 1];\n              point.x += numbers[j + 2];\n              point.y += numbers[j + 3];\n              if (j === 0 && doSetFirstPoint === true) firstPoint.copy(point);\n            }\n            break;\n          case 'q':\n            numbers = parseFloats(data);\n            for (let j = 0, jl = numbers.length; j < jl; j += 4) {\n              path.quadraticCurveTo(point.x + numbers[j + 0], point.y + numbers[j + 1], point.x + numbers[j + 2], point.y + numbers[j + 3]);\n              control.x = point.x + numbers[j + 0];\n              control.y = point.y + numbers[j + 1];\n              point.x += numbers[j + 2];\n              point.y += numbers[j + 3];\n              if (j === 0 && doSetFirstPoint === true) firstPoint.copy(point);\n            }\n            break;\n          case 't':\n            numbers = parseFloats(data);\n            for (let j = 0, jl = numbers.length; j < jl; j += 2) {\n              const rx = getReflection(point.x, control.x);\n              const ry = getReflection(point.y, control.y);\n              path.quadraticCurveTo(rx, ry, point.x + numbers[j + 0], point.y + numbers[j + 1]);\n              control.x = rx;\n              control.y = ry;\n              point.x = point.x + numbers[j + 0];\n              point.y = point.y + numbers[j + 1];\n              if (j === 0 && doSetFirstPoint === true) firstPoint.copy(point);\n            }\n            break;\n          case 'a':\n            numbers = parseFloats(data, [3, 4], 7);\n            for (let j = 0, jl = numbers.length; j < jl; j += 7) {\n              // skip command if no displacement\n              if (numbers[j + 5] == 0 && numbers[j + 6] == 0) continue;\n              const start = point.clone();\n              point.x += numbers[j + 5];\n              point.y += numbers[j + 6];\n              control.x = point.x;\n              control.y = point.y;\n              parseArcCommand(path, numbers[j], numbers[j + 1], numbers[j + 2], numbers[j + 3], numbers[j + 4], start, point);\n              if (j === 0 && doSetFirstPoint === true) firstPoint.copy(point);\n            }\n            break;\n          case 'Z':\n          case 'z':\n            path.currentPath.autoClose = true;\n            if (path.currentPath.curves.length > 0) {\n              // Reset point to beginning of Path\n              point.copy(firstPoint);\n              path.currentPath.currentPoint.copy(point);\n              isFirstPoint = true;\n            }\n            break;\n          default:\n            console.warn(command);\n        } // console.log( type, parseFloats( data ), parseFloats( data ).length  )\n\n        doSetFirstPoint = false;\n      }\n      return path;\n    }\n    function parseCSSStylesheet(node) {\n      if (!node.sheet || !node.sheet.cssRules || !node.sheet.cssRules.length) return;\n      for (let i = 0; i < node.sheet.cssRules.length; i++) {\n        const stylesheet = node.sheet.cssRules[i];\n        if (stylesheet.type !== 1) continue;\n        const selectorList = stylesheet.selectorText.split(/,/gm).filter(Boolean).map(i => i.trim());\n        for (let j = 0; j < selectorList.length; j++) {\n          stylesheets[selectorList[j]] = Object.assign(stylesheets[selectorList[j]] || {}, stylesheet.style);\n        }\n      }\n    }\n    /**\n     * https://www.w3.org/TR/SVG/implnote.html#ArcImplementationNotes\n     * https://mortoray.com/2017/02/16/rendering-an-svg-elliptical-arc-as-bezier-curves/ Appendix: Endpoint to center arc conversion\n     * From\n     * rx ry x-axis-rotation large-arc-flag sweep-flag x y\n     * To\n     * aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation\n     */\n\n    function parseArcCommand(path, rx, ry, x_axis_rotation, large_arc_flag, sweep_flag, start, end) {\n      if (rx == 0 || ry == 0) {\n        // draw a line if either of the radii == 0\n        path.lineTo(end.x, end.y);\n        return;\n      }\n      x_axis_rotation = x_axis_rotation * Math.PI / 180; // Ensure radii are positive\n\n      rx = Math.abs(rx);\n      ry = Math.abs(ry); // Compute (x1', y1')\n\n      const dx2 = (start.x - end.x) / 2.0;\n      const dy2 = (start.y - end.y) / 2.0;\n      const x1p = Math.cos(x_axis_rotation) * dx2 + Math.sin(x_axis_rotation) * dy2;\n      const y1p = -Math.sin(x_axis_rotation) * dx2 + Math.cos(x_axis_rotation) * dy2; // Compute (cx', cy')\n\n      let rxs = rx * rx;\n      let rys = ry * ry;\n      const x1ps = x1p * x1p;\n      const y1ps = y1p * y1p; // Ensure radii are large enough\n\n      const cr = x1ps / rxs + y1ps / rys;\n      if (cr > 1) {\n        // scale up rx,ry equally so cr == 1\n        const s = Math.sqrt(cr);\n        rx = s * rx;\n        ry = s * ry;\n        rxs = rx * rx;\n        rys = ry * ry;\n      }\n      const dq = rxs * y1ps + rys * x1ps;\n      const pq = (rxs * rys - dq) / dq;\n      let q = Math.sqrt(Math.max(0, pq));\n      if (large_arc_flag === sweep_flag) q = -q;\n      const cxp = q * rx * y1p / ry;\n      const cyp = -q * ry * x1p / rx; // Step 3: Compute (cx, cy) from (cx', cy')\n\n      const cx = Math.cos(x_axis_rotation) * cxp - Math.sin(x_axis_rotation) * cyp + (start.x + end.x) / 2;\n      const cy = Math.sin(x_axis_rotation) * cxp + Math.cos(x_axis_rotation) * cyp + (start.y + end.y) / 2; // Step 4: Compute θ1 and Δθ\n\n      const theta = svgAngle(1, 0, (x1p - cxp) / rx, (y1p - cyp) / ry);\n      const delta = svgAngle((x1p - cxp) / rx, (y1p - cyp) / ry, (-x1p - cxp) / rx, (-y1p - cyp) / ry) % (Math.PI * 2);\n      path.currentPath.absellipse(cx, cy, rx, ry, theta, theta + delta, sweep_flag === 0, x_axis_rotation);\n    }\n    function svgAngle(ux, uy, vx, vy) {\n      const dot = ux * vx + uy * vy;\n      const len = Math.sqrt(ux * ux + uy * uy) * Math.sqrt(vx * vx + vy * vy);\n      let ang = Math.acos(Math.max(-1, Math.min(1, dot / len))); // floating point precision, slightly over values appear\n\n      if (ux * vy - uy * vx < 0) ang = -ang;\n      return ang;\n    }\n    /*\n     * According to https://www.w3.org/TR/SVG/shapes.html#RectElementRXAttribute\n     * rounded corner should be rendered to elliptical arc, but bezier curve does the job well enough\n     */\n\n    function parseRectNode(node) {\n      const x = parseFloatWithUnits(node.getAttribute('x') || 0);\n      const y = parseFloatWithUnits(node.getAttribute('y') || 0);\n      const rx = parseFloatWithUnits(node.getAttribute('rx') || 0);\n      const ry = parseFloatWithUnits(node.getAttribute('ry') || 0);\n      const w = parseFloatWithUnits(node.getAttribute('width'));\n      const h = parseFloatWithUnits(node.getAttribute('height'));\n      const path = new ShapePath();\n      path.moveTo(x + 2 * rx, y);\n      path.lineTo(x + w - 2 * rx, y);\n      if (rx !== 0 || ry !== 0) path.bezierCurveTo(x + w, y, x + w, y, x + w, y + 2 * ry);\n      path.lineTo(x + w, y + h - 2 * ry);\n      if (rx !== 0 || ry !== 0) path.bezierCurveTo(x + w, y + h, x + w, y + h, x + w - 2 * rx, y + h);\n      path.lineTo(x + 2 * rx, y + h);\n      if (rx !== 0 || ry !== 0) {\n        path.bezierCurveTo(x, y + h, x, y + h, x, y + h - 2 * ry);\n      }\n      path.lineTo(x, y + 2 * ry);\n      if (rx !== 0 || ry !== 0) {\n        path.bezierCurveTo(x, y, x, y, x + 2 * rx, y);\n      }\n      return path;\n    }\n    function parsePolygonNode(node) {\n      function iterator(match, a, b) {\n        const x = parseFloatWithUnits(a);\n        const y = parseFloatWithUnits(b);\n        if (index === 0) {\n          path.moveTo(x, y);\n        } else {\n          path.lineTo(x, y);\n        }\n        index++;\n      }\n      const regex = /(-?[\\d\\.?]+)[,|\\s](-?[\\d\\.?]+)/g;\n      const path = new ShapePath();\n      let index = 0;\n      node.getAttribute('points').replace(regex, iterator);\n      path.currentPath.autoClose = true;\n      return path;\n    }\n    function parsePolylineNode(node) {\n      function iterator(match, a, b) {\n        const x = parseFloatWithUnits(a);\n        const y = parseFloatWithUnits(b);\n        if (index === 0) {\n          path.moveTo(x, y);\n        } else {\n          path.lineTo(x, y);\n        }\n        index++;\n      }\n      const regex = /(-?[\\d\\.?]+)[,|\\s](-?[\\d\\.?]+)/g;\n      const path = new ShapePath();\n      let index = 0;\n      node.getAttribute('points').replace(regex, iterator);\n      path.currentPath.autoClose = false;\n      return path;\n    }\n    function parseCircleNode(node) {\n      const x = parseFloatWithUnits(node.getAttribute('cx') || 0);\n      const y = parseFloatWithUnits(node.getAttribute('cy') || 0);\n      const r = parseFloatWithUnits(node.getAttribute('r') || 0);\n      const subpath = new Path();\n      subpath.absarc(x, y, r, 0, Math.PI * 2);\n      const path = new ShapePath();\n      path.subPaths.push(subpath);\n      return path;\n    }\n    function parseEllipseNode(node) {\n      const x = parseFloatWithUnits(node.getAttribute('cx') || 0);\n      const y = parseFloatWithUnits(node.getAttribute('cy') || 0);\n      const rx = parseFloatWithUnits(node.getAttribute('rx') || 0);\n      const ry = parseFloatWithUnits(node.getAttribute('ry') || 0);\n      const subpath = new Path();\n      subpath.absellipse(x, y, rx, ry, 0, Math.PI * 2);\n      const path = new ShapePath();\n      path.subPaths.push(subpath);\n      return path;\n    }\n    function parseLineNode(node) {\n      const x1 = parseFloatWithUnits(node.getAttribute('x1') || 0);\n      const y1 = parseFloatWithUnits(node.getAttribute('y1') || 0);\n      const x2 = parseFloatWithUnits(node.getAttribute('x2') || 0);\n      const y2 = parseFloatWithUnits(node.getAttribute('y2') || 0);\n      const path = new ShapePath();\n      path.moveTo(x1, y1);\n      path.lineTo(x2, y2);\n      path.currentPath.autoClose = false;\n      return path;\n    } //\n\n    function parseStyle(node, style) {\n      style = Object.assign({}, style); // clone style\n\n      let stylesheetStyles = {};\n      if (node.hasAttribute('class')) {\n        const classSelectors = node.getAttribute('class').split(/\\s/).filter(Boolean).map(i => i.trim());\n        for (let i = 0; i < classSelectors.length; i++) {\n          stylesheetStyles = Object.assign(stylesheetStyles, stylesheets['.' + classSelectors[i]]);\n        }\n      }\n      if (node.hasAttribute('id')) {\n        stylesheetStyles = Object.assign(stylesheetStyles, stylesheets['#' + node.getAttribute('id')]);\n      }\n      function addStyle(svgName, jsName, adjustFunction) {\n        if (adjustFunction === undefined) {\n          adjustFunction = function copy(v) {\n            if (v.startsWith('url')) console.warn('SVGLoader: url access in attributes is not implemented.');\n            return v;\n          };\n        }\n        if (node.hasAttribute(svgName)) style[jsName] = adjustFunction(node.getAttribute(svgName));\n        if (stylesheetStyles[svgName]) style[jsName] = adjustFunction(stylesheetStyles[svgName]);\n        if (node.style && node.style[svgName] !== '') style[jsName] = adjustFunction(node.style[svgName]);\n      }\n      function clamp(v) {\n        return Math.max(0, Math.min(1, parseFloatWithUnits(v)));\n      }\n      function positive(v) {\n        return Math.max(0, parseFloatWithUnits(v));\n      }\n      addStyle('fill', 'fill');\n      addStyle('fill-opacity', 'fillOpacity', clamp);\n      addStyle('opacity', 'opacity', clamp);\n      addStyle('stroke', 'stroke');\n      addStyle('stroke-opacity', 'strokeOpacity', clamp);\n      addStyle('stroke-width', 'strokeWidth', positive);\n      addStyle('stroke-linejoin', 'strokeLineJoin');\n      addStyle('stroke-linecap', 'strokeLineCap');\n      addStyle('stroke-miterlimit', 'strokeMiterLimit', positive);\n      addStyle('visibility', 'visibility');\n      return style;\n    } // http://www.w3.org/TR/SVG11/implnote.html#PathElementImplementationNotes\n\n    function getReflection(a, b) {\n      return a - (b - a);\n    } // from https://github.com/ppvg/svg-numbers (MIT License)\n\n    function parseFloats(input, flags, stride) {\n      if (typeof input !== 'string') {\n        throw new TypeError('Invalid input: ' + typeof input);\n      } // Character groups\n\n      const RE = {\n        SEPARATOR: /[ \\t\\r\\n\\,.\\-+]/,\n        WHITESPACE: /[ \\t\\r\\n]/,\n        DIGIT: /[\\d]/,\n        SIGN: /[-+]/,\n        POINT: /\\./,\n        COMMA: /,/,\n        EXP: /e/i,\n        FLAGS: /[01]/\n      }; // States\n\n      const SEP = 0;\n      const INT = 1;\n      const FLOAT = 2;\n      const EXP = 3;\n      let state = SEP;\n      let seenComma = true;\n      let number = '',\n        exponent = '';\n      const result = [];\n      function throwSyntaxError(current, i, partial) {\n        const error = new SyntaxError('Unexpected character \"' + current + '\" at index ' + i + '.');\n        error.partial = partial;\n        throw error;\n      }\n      function newNumber() {\n        if (number !== '') {\n          if (exponent === '') result.push(Number(number));else result.push(Number(number) * Math.pow(10, Number(exponent)));\n        }\n        number = '';\n        exponent = '';\n      }\n      let current;\n      const length = input.length;\n      for (let i = 0; i < length; i++) {\n        current = input[i]; // check for flags\n\n        if (Array.isArray(flags) && flags.includes(result.length % stride) && RE.FLAGS.test(current)) {\n          state = INT;\n          number = current;\n          newNumber();\n          continue;\n        } // parse until next number\n\n        if (state === SEP) {\n          // eat whitespace\n          if (RE.WHITESPACE.test(current)) {\n            continue;\n          } // start new number\n\n          if (RE.DIGIT.test(current) || RE.SIGN.test(current)) {\n            state = INT;\n            number = current;\n            continue;\n          }\n          if (RE.POINT.test(current)) {\n            state = FLOAT;\n            number = current;\n            continue;\n          } // throw on double commas (e.g. \"1, , 2\")\n\n          if (RE.COMMA.test(current)) {\n            if (seenComma) {\n              throwSyntaxError(current, i, result);\n            }\n            seenComma = true;\n          }\n        } // parse integer part\n\n        if (state === INT) {\n          if (RE.DIGIT.test(current)) {\n            number += current;\n            continue;\n          }\n          if (RE.POINT.test(current)) {\n            number += current;\n            state = FLOAT;\n            continue;\n          }\n          if (RE.EXP.test(current)) {\n            state = EXP;\n            continue;\n          } // throw on double signs (\"-+1\"), but not on sign as separator (\"-1-2\")\n\n          if (RE.SIGN.test(current) && number.length === 1 && RE.SIGN.test(number[0])) {\n            throwSyntaxError(current, i, result);\n          }\n        } // parse decimal part\n\n        if (state === FLOAT) {\n          if (RE.DIGIT.test(current)) {\n            number += current;\n            continue;\n          }\n          if (RE.EXP.test(current)) {\n            state = EXP;\n            continue;\n          } // throw on double decimal points (e.g. \"1..2\")\n\n          if (RE.POINT.test(current) && number[number.length - 1] === '.') {\n            throwSyntaxError(current, i, result);\n          }\n        } // parse exponent part\n\n        if (state === EXP) {\n          if (RE.DIGIT.test(current)) {\n            exponent += current;\n            continue;\n          }\n          if (RE.SIGN.test(current)) {\n            if (exponent === '') {\n              exponent += current;\n              continue;\n            }\n            if (exponent.length === 1 && RE.SIGN.test(exponent)) {\n              throwSyntaxError(current, i, result);\n            }\n          }\n        } // end of number\n\n        if (RE.WHITESPACE.test(current)) {\n          newNumber();\n          state = SEP;\n          seenComma = false;\n        } else if (RE.COMMA.test(current)) {\n          newNumber();\n          state = SEP;\n          seenComma = true;\n        } else if (RE.SIGN.test(current)) {\n          newNumber();\n          state = INT;\n          number = current;\n        } else if (RE.POINT.test(current)) {\n          newNumber();\n          state = FLOAT;\n          number = current;\n        } else {\n          throwSyntaxError(current, i, result);\n        }\n      } // add the last number found (if any)\n\n      newNumber();\n      return result;\n    } // Units\n\n    const units = ['mm', 'cm', 'in', 'pt', 'pc', 'px']; // Conversion: [ fromUnit ][ toUnit ] (-1 means dpi dependent)\n\n    const unitConversion = {\n      mm: {\n        mm: 1,\n        cm: 0.1,\n        in: 1 / 25.4,\n        pt: 72 / 25.4,\n        pc: 6 / 25.4,\n        px: -1\n      },\n      cm: {\n        mm: 10,\n        cm: 1,\n        in: 1 / 2.54,\n        pt: 72 / 2.54,\n        pc: 6 / 2.54,\n        px: -1\n      },\n      in: {\n        mm: 25.4,\n        cm: 2.54,\n        in: 1,\n        pt: 72,\n        pc: 6,\n        px: -1\n      },\n      pt: {\n        mm: 25.4 / 72,\n        cm: 2.54 / 72,\n        in: 1 / 72,\n        pt: 1,\n        pc: 6 / 72,\n        px: -1\n      },\n      pc: {\n        mm: 25.4 / 6,\n        cm: 2.54 / 6,\n        in: 1 / 6,\n        pt: 72 / 6,\n        pc: 1,\n        px: -1\n      },\n      px: {\n        px: 1\n      }\n    };\n    function parseFloatWithUnits(string) {\n      let theUnit = 'px';\n      if (typeof string === 'string' || string instanceof String) {\n        for (let i = 0, n = units.length; i < n; i++) {\n          const u = units[i];\n          if (string.endsWith(u)) {\n            theUnit = u;\n            string = string.substring(0, string.length - u.length);\n            break;\n          }\n        }\n      }\n      let scale = undefined;\n      if (theUnit === 'px' && scope.defaultUnit !== 'px') {\n        // Conversion scale from  pixels to inches, then to default units\n        scale = unitConversion['in'][scope.defaultUnit] / scope.defaultDPI;\n      } else {\n        scale = unitConversion[theUnit][scope.defaultUnit];\n        if (scale < 0) {\n          // Conversion scale to pixels\n          scale = unitConversion[theUnit]['in'] * scope.defaultDPI;\n        }\n      }\n      return scale * parseFloat(string);\n    } // Transforms\n\n    function getNodeTransform(node) {\n      if (!(node.hasAttribute('transform') || node.nodeName === 'use' && (node.hasAttribute('x') || node.hasAttribute('y')))) {\n        return null;\n      }\n      const transform = parseNodeTransform(node);\n      if (transformStack.length > 0) {\n        transform.premultiply(transformStack[transformStack.length - 1]);\n      }\n      currentTransform.copy(transform);\n      transformStack.push(transform);\n      return transform;\n    }\n    function parseNodeTransform(node) {\n      const transform = new Matrix3();\n      const currentTransform = tempTransform0;\n      if (node.nodeName === 'use' && (node.hasAttribute('x') || node.hasAttribute('y'))) {\n        const tx = parseFloatWithUnits(node.getAttribute('x'));\n        const ty = parseFloatWithUnits(node.getAttribute('y'));\n        transform.translate(tx, ty);\n      }\n      if (node.hasAttribute('transform')) {\n        const transformsTexts = node.getAttribute('transform').split(')');\n        for (let tIndex = transformsTexts.length - 1; tIndex >= 0; tIndex--) {\n          const transformText = transformsTexts[tIndex].trim();\n          if (transformText === '') continue;\n          const openParPos = transformText.indexOf('(');\n          const closeParPos = transformText.length;\n          if (openParPos > 0 && openParPos < closeParPos) {\n            const transformType = transformText.substr(0, openParPos);\n            const array = parseFloats(transformText.substr(openParPos + 1, closeParPos - openParPos - 1));\n            currentTransform.identity();\n            switch (transformType) {\n              case 'translate':\n                if (array.length >= 1) {\n                  const tx = array[0];\n                  let ty = tx;\n                  if (array.length >= 2) {\n                    ty = array[1];\n                  }\n                  currentTransform.translate(tx, ty);\n                }\n                break;\n              case 'rotate':\n                if (array.length >= 1) {\n                  let angle = 0;\n                  let cx = 0;\n                  let cy = 0; // Angle\n\n                  angle = -array[0] * Math.PI / 180;\n                  if (array.length >= 3) {\n                    // Center x, y\n                    cx = array[1];\n                    cy = array[2];\n                  } // Rotate around center (cx, cy)\n\n                  tempTransform1.identity().translate(-cx, -cy);\n                  tempTransform2.identity().rotate(angle);\n                  tempTransform3.multiplyMatrices(tempTransform2, tempTransform1);\n                  tempTransform1.identity().translate(cx, cy);\n                  currentTransform.multiplyMatrices(tempTransform1, tempTransform3);\n                }\n                break;\n              case 'scale':\n                if (array.length >= 1) {\n                  const scaleX = array[0];\n                  let scaleY = scaleX;\n                  if (array.length >= 2) {\n                    scaleY = array[1];\n                  }\n                  currentTransform.scale(scaleX, scaleY);\n                }\n                break;\n              case 'skewX':\n                if (array.length === 1) {\n                  currentTransform.set(1, Math.tan(array[0] * Math.PI / 180), 0, 0, 1, 0, 0, 0, 1);\n                }\n                break;\n              case 'skewY':\n                if (array.length === 1) {\n                  currentTransform.set(1, 0, 0, Math.tan(array[0] * Math.PI / 180), 1, 0, 0, 0, 1);\n                }\n                break;\n              case 'matrix':\n                if (array.length === 6) {\n                  currentTransform.set(array[0], array[2], array[4], array[1], array[3], array[5], 0, 0, 1);\n                }\n                break;\n            }\n          }\n          transform.premultiply(currentTransform);\n        }\n      }\n      return transform;\n    }\n    function transformPath(path, m) {\n      function transfVec2(v2) {\n        tempV3.set(v2.x, v2.y, 1).applyMatrix3(m);\n        v2.set(tempV3.x, tempV3.y);\n      }\n      const isRotated = isTransformRotated(m);\n      const subPaths = path.subPaths;\n      for (let i = 0, n = subPaths.length; i < n; i++) {\n        const subPath = subPaths[i];\n        const curves = subPath.curves;\n        for (let j = 0; j < curves.length; j++) {\n          const curve = curves[j];\n          if (curve.isLineCurve) {\n            transfVec2(curve.v1);\n            transfVec2(curve.v2);\n          } else if (curve.isCubicBezierCurve) {\n            transfVec2(curve.v0);\n            transfVec2(curve.v1);\n            transfVec2(curve.v2);\n            transfVec2(curve.v3);\n          } else if (curve.isQuadraticBezierCurve) {\n            transfVec2(curve.v0);\n            transfVec2(curve.v1);\n            transfVec2(curve.v2);\n          } else if (curve.isEllipseCurve) {\n            if (isRotated) {\n              console.warn('SVGLoader: Elliptic arc or ellipse rotation or skewing is not implemented.');\n            }\n            tempV2.set(curve.aX, curve.aY);\n            transfVec2(tempV2);\n            curve.aX = tempV2.x;\n            curve.aY = tempV2.y;\n            curve.xRadius *= getTransformScaleX(m);\n            curve.yRadius *= getTransformScaleY(m);\n          }\n        }\n      }\n    }\n    function isTransformRotated(m) {\n      return m.elements[1] !== 0 || m.elements[3] !== 0;\n    }\n    function getTransformScaleX(m) {\n      const te = m.elements;\n      return Math.sqrt(te[0] * te[0] + te[1] * te[1]);\n    }\n    function getTransformScaleY(m) {\n      const te = m.elements;\n      return Math.sqrt(te[3] * te[3] + te[4] * te[4]);\n    } //\n\n    const paths = [];\n    const stylesheets = {};\n    const transformStack = [];\n    const tempTransform0 = new Matrix3();\n    const tempTransform1 = new Matrix3();\n    const tempTransform2 = new Matrix3();\n    const tempTransform3 = new Matrix3();\n    const tempV2 = new Vector2();\n    const tempV3 = new Vector3();\n    const currentTransform = new Matrix3();\n    const xml = new DOMParser().parseFromString(text, 'image/svg+xml'); // application/xml\n\n    parseNode(xml.documentElement, {\n      fill: '#000',\n      fillOpacity: 1,\n      strokeOpacity: 1,\n      strokeWidth: 1,\n      strokeLineJoin: 'miter',\n      strokeLineCap: 'butt',\n      strokeMiterLimit: 4\n    });\n    const data = {\n      paths: paths,\n      xml: xml.documentElement\n    }; // console.log( paths );\n\n    return data;\n  }\n  static createShapes(shapePath) {\n    // Param shapePath: a shapepath as returned by the parse function of this class\n    // Returns Shape object\n    const BIGNUMBER = 999999999;\n    const IntersectionLocationType = {\n      ORIGIN: 0,\n      DESTINATION: 1,\n      BETWEEN: 2,\n      LEFT: 3,\n      RIGHT: 4,\n      BEHIND: 5,\n      BEYOND: 6\n    };\n    const classifyResult = {\n      loc: IntersectionLocationType.ORIGIN,\n      t: 0\n    };\n    function findEdgeIntersection(a0, a1, b0, b1) {\n      const x1 = a0.x;\n      const x2 = a1.x;\n      const x3 = b0.x;\n      const x4 = b1.x;\n      const y1 = a0.y;\n      const y2 = a1.y;\n      const y3 = b0.y;\n      const y4 = b1.y;\n      const nom1 = (x4 - x3) * (y1 - y3) - (y4 - y3) * (x1 - x3);\n      const nom2 = (x2 - x1) * (y1 - y3) - (y2 - y1) * (x1 - x3);\n      const denom = (y4 - y3) * (x2 - x1) - (x4 - x3) * (y2 - y1);\n      const t1 = nom1 / denom;\n      const t2 = nom2 / denom;\n      if (denom === 0 && nom1 !== 0 || t1 <= 0 || t1 >= 1 || t2 < 0 || t2 > 1) {\n        //1. lines are parallel or edges don't intersect\n        return null;\n      } else if (nom1 === 0 && denom === 0) {\n        //2. lines are colinear\n        //check if endpoints of edge2 (b0-b1) lies on edge1 (a0-a1)\n        for (let i = 0; i < 2; i++) {\n          classifyPoint(i === 0 ? b0 : b1, a0, a1); //find position of this endpoints relatively to edge1\n\n          if (classifyResult.loc == IntersectionLocationType.ORIGIN) {\n            const point = i === 0 ? b0 : b1;\n            return {\n              x: point.x,\n              y: point.y,\n              t: classifyResult.t\n            };\n          } else if (classifyResult.loc == IntersectionLocationType.BETWEEN) {\n            const x = +(x1 + classifyResult.t * (x2 - x1)).toPrecision(10);\n            const y = +(y1 + classifyResult.t * (y2 - y1)).toPrecision(10);\n            return {\n              x: x,\n              y: y,\n              t: classifyResult.t\n            };\n          }\n        }\n        return null;\n      } else {\n        //3. edges intersect\n        for (let i = 0; i < 2; i++) {\n          classifyPoint(i === 0 ? b0 : b1, a0, a1);\n          if (classifyResult.loc == IntersectionLocationType.ORIGIN) {\n            const point = i === 0 ? b0 : b1;\n            return {\n              x: point.x,\n              y: point.y,\n              t: classifyResult.t\n            };\n          }\n        }\n        const x = +(x1 + t1 * (x2 - x1)).toPrecision(10);\n        const y = +(y1 + t1 * (y2 - y1)).toPrecision(10);\n        return {\n          x: x,\n          y: y,\n          t: t1\n        };\n      }\n    }\n    function classifyPoint(p, edgeStart, edgeEnd) {\n      const ax = edgeEnd.x - edgeStart.x;\n      const ay = edgeEnd.y - edgeStart.y;\n      const bx = p.x - edgeStart.x;\n      const by = p.y - edgeStart.y;\n      const sa = ax * by - bx * ay;\n      if (p.x === edgeStart.x && p.y === edgeStart.y) {\n        classifyResult.loc = IntersectionLocationType.ORIGIN;\n        classifyResult.t = 0;\n        return;\n      }\n      if (p.x === edgeEnd.x && p.y === edgeEnd.y) {\n        classifyResult.loc = IntersectionLocationType.DESTINATION;\n        classifyResult.t = 1;\n        return;\n      }\n      if (sa < -Number.EPSILON) {\n        classifyResult.loc = IntersectionLocationType.LEFT;\n        return;\n      }\n      if (sa > Number.EPSILON) {\n        classifyResult.loc = IntersectionLocationType.RIGHT;\n        return;\n      }\n      if (ax * bx < 0 || ay * by < 0) {\n        classifyResult.loc = IntersectionLocationType.BEHIND;\n        return;\n      }\n      if (Math.sqrt(ax * ax + ay * ay) < Math.sqrt(bx * bx + by * by)) {\n        classifyResult.loc = IntersectionLocationType.BEYOND;\n        return;\n      }\n      let t;\n      if (ax !== 0) {\n        t = bx / ax;\n      } else {\n        t = by / ay;\n      }\n      classifyResult.loc = IntersectionLocationType.BETWEEN;\n      classifyResult.t = t;\n    }\n    function getIntersections(path1, path2) {\n      const intersectionsRaw = [];\n      const intersections = [];\n      for (let index = 1; index < path1.length; index++) {\n        const path1EdgeStart = path1[index - 1];\n        const path1EdgeEnd = path1[index];\n        for (let index2 = 1; index2 < path2.length; index2++) {\n          const path2EdgeStart = path2[index2 - 1];\n          const path2EdgeEnd = path2[index2];\n          const intersection = findEdgeIntersection(path1EdgeStart, path1EdgeEnd, path2EdgeStart, path2EdgeEnd);\n          if (intersection !== null && intersectionsRaw.find(i => i.t <= intersection.t + Number.EPSILON && i.t >= intersection.t - Number.EPSILON) === undefined) {\n            intersectionsRaw.push(intersection);\n            intersections.push(new Vector2(intersection.x, intersection.y));\n          }\n        }\n      }\n      return intersections;\n    }\n    function getScanlineIntersections(scanline, boundingBox, paths) {\n      const center = new Vector2();\n      boundingBox.getCenter(center);\n      const allIntersections = [];\n      paths.forEach(path => {\n        // check if the center of the bounding box is in the bounding box of the paths.\n        // this is a pruning method to limit the search of intersections in paths that can't envelop of the current path.\n        // if a path envelops another path. The center of that oter path, has to be inside the bounding box of the enveloping path.\n        if (path.boundingBox.containsPoint(center)) {\n          const intersections = getIntersections(scanline, path.points);\n          intersections.forEach(p => {\n            allIntersections.push({\n              identifier: path.identifier,\n              isCW: path.isCW,\n              point: p\n            });\n          });\n        }\n      });\n      allIntersections.sort((i1, i2) => {\n        return i1.point.x - i2.point.x;\n      });\n      return allIntersections;\n    }\n    function isHoleTo(simplePath, allPaths, scanlineMinX, scanlineMaxX, _fillRule) {\n      if (_fillRule === null || _fillRule === undefined || _fillRule === '') {\n        _fillRule = 'nonzero';\n      }\n      const centerBoundingBox = new Vector2();\n      simplePath.boundingBox.getCenter(centerBoundingBox);\n      const scanline = [new Vector2(scanlineMinX, centerBoundingBox.y), new Vector2(scanlineMaxX, centerBoundingBox.y)];\n      const scanlineIntersections = getScanlineIntersections(scanline, simplePath.boundingBox, allPaths);\n      scanlineIntersections.sort((i1, i2) => {\n        return i1.point.x - i2.point.x;\n      });\n      const baseIntersections = [];\n      const otherIntersections = [];\n      scanlineIntersections.forEach(i => {\n        if (i.identifier === simplePath.identifier) {\n          baseIntersections.push(i);\n        } else {\n          otherIntersections.push(i);\n        }\n      });\n      const firstXOfPath = baseIntersections[0].point.x; // build up the path hierarchy\n\n      const stack = [];\n      let i = 0;\n      while (i < otherIntersections.length && otherIntersections[i].point.x < firstXOfPath) {\n        if (stack.length > 0 && stack[stack.length - 1] === otherIntersections[i].identifier) {\n          stack.pop();\n        } else {\n          stack.push(otherIntersections[i].identifier);\n        }\n        i++;\n      }\n      stack.push(simplePath.identifier);\n      if (_fillRule === 'evenodd') {\n        const isHole = stack.length % 2 === 0 ? true : false;\n        const isHoleFor = stack[stack.length - 2];\n        return {\n          identifier: simplePath.identifier,\n          isHole: isHole,\n          for: isHoleFor\n        };\n      } else if (_fillRule === 'nonzero') {\n        // check if path is a hole by counting the amount of paths with alternating rotations it has to cross.\n        let isHole = true;\n        let isHoleFor = null;\n        let lastCWValue = null;\n        for (let i = 0; i < stack.length; i++) {\n          const identifier = stack[i];\n          if (isHole) {\n            lastCWValue = allPaths[identifier].isCW;\n            isHole = false;\n            isHoleFor = identifier;\n          } else if (lastCWValue !== allPaths[identifier].isCW) {\n            lastCWValue = allPaths[identifier].isCW;\n            isHole = true;\n          }\n        }\n        return {\n          identifier: simplePath.identifier,\n          isHole: isHole,\n          for: isHoleFor\n        };\n      } else {\n        console.warn('fill-rule: \"' + _fillRule + '\" is currently not implemented.');\n      }\n    } // check for self intersecting paths\n    // TODO\n    // check intersecting paths\n    // TODO\n    // prepare paths for hole detection\n\n    let identifier = 0;\n    let scanlineMinX = BIGNUMBER;\n    let scanlineMaxX = -BIGNUMBER;\n    let simplePaths = shapePath.subPaths.map(p => {\n      const points = p.getPoints();\n      let maxY = -BIGNUMBER;\n      let minY = BIGNUMBER;\n      let maxX = -BIGNUMBER;\n      let minX = BIGNUMBER; //points.forEach(p => p.y *= -1);\n\n      for (let i = 0; i < points.length; i++) {\n        const p = points[i];\n        if (p.y > maxY) {\n          maxY = p.y;\n        }\n        if (p.y < minY) {\n          minY = p.y;\n        }\n        if (p.x > maxX) {\n          maxX = p.x;\n        }\n        if (p.x < minX) {\n          minX = p.x;\n        }\n      } //\n\n      if (scanlineMaxX <= maxX) {\n        scanlineMaxX = maxX + 1;\n      }\n      if (scanlineMinX >= minX) {\n        scanlineMinX = minX - 1;\n      }\n      return {\n        points: points,\n        isCW: ShapeUtils.isClockWise(points),\n        identifier: identifier++,\n        boundingBox: new Box2(new Vector2(minX, minY), new Vector2(maxX, maxY))\n      };\n    });\n    simplePaths = simplePaths.filter(sp => sp.points.length > 0); // check if path is solid or a hole\n\n    const isAHole = simplePaths.map(p => isHoleTo(p, simplePaths, scanlineMinX, scanlineMaxX, shapePath.userData.style.fillRule));\n    const shapesToReturn = [];\n    simplePaths.forEach(p => {\n      const amIAHole = isAHole[p.identifier];\n      if (!amIAHole.isHole) {\n        const shape = new Shape(p.points);\n        const holes = isAHole.filter(h => h.isHole && h.for === p.identifier);\n        holes.forEach(h => {\n          const path = simplePaths[h.identifier];\n          shape.holes.push(new Path(path.points));\n        });\n        shapesToReturn.push(shape);\n      }\n    });\n    return shapesToReturn;\n  }\n  static getStrokeStyle(width, color, lineJoin, lineCap, miterLimit) {\n    // Param width: Stroke width\n    // Param color: As returned by THREE.Color.getStyle()\n    // Param lineJoin: One of \"round\", \"bevel\", \"miter\" or \"miter-limit\"\n    // Param lineCap: One of \"round\", \"square\" or \"butt\"\n    // Param miterLimit: Maximum join length, in multiples of the \"width\" parameter (join is truncated if it exceeds that distance)\n    // Returns style object\n    width = width !== undefined ? width : 1;\n    color = color !== undefined ? color : '#000';\n    lineJoin = lineJoin !== undefined ? lineJoin : 'miter';\n    lineCap = lineCap !== undefined ? lineCap : 'butt';\n    miterLimit = miterLimit !== undefined ? miterLimit : 4;\n    return {\n      strokeColor: color,\n      strokeWidth: width,\n      strokeLineJoin: lineJoin,\n      strokeLineCap: lineCap,\n      strokeMiterLimit: miterLimit\n    };\n  }\n  static pointsToStroke(points, style, arcDivisions, minDistance) {\n    // Generates a stroke with some witdh around the given path.\n    // The path can be open or closed (last point equals to first point)\n    // Param points: Array of Vector2D (the path). Minimum 2 points.\n    // Param style: Object with SVG properties as returned by SVGLoader.getStrokeStyle(), or SVGLoader.parse() in the path.userData.style object\n    // Params arcDivisions: Arc divisions for round joins and endcaps. (Optional)\n    // Param minDistance: Points closer to this distance will be merged. (Optional)\n    // Returns BufferGeometry with stroke triangles (In plane z = 0). UV coordinates are generated ('u' along path. 'v' across it, from left to right)\n    const vertices = [];\n    const normals = [];\n    const uvs = [];\n    if (SVGLoader.pointsToStrokeWithBuffers(points, style, arcDivisions, minDistance, vertices, normals, uvs) === 0) {\n      return null;\n    }\n    const geometry = new BufferGeometry();\n    geometry.setAttribute('position', new Float32BufferAttribute(vertices, 3));\n    geometry.setAttribute('normal', new Float32BufferAttribute(normals, 3));\n    geometry.setAttribute('uv', new Float32BufferAttribute(uvs, 2));\n    return geometry;\n  }\n  static pointsToStrokeWithBuffers(points, style, arcDivisions, minDistance, vertices, normals, uvs, vertexOffset) {\n    // This function can be called to update existing arrays or buffers.\n    // Accepts same parameters as pointsToStroke, plus the buffers and optional offset.\n    // Param vertexOffset: Offset vertices to start writing in the buffers (3 elements/vertex for vertices and normals, and 2 elements/vertex for uvs)\n    // Returns number of written vertices / normals / uvs pairs\n    // if 'vertices' parameter is undefined no triangles will be generated, but the returned vertices count will still be valid (useful to preallocate the buffers)\n    // 'normals' and 'uvs' buffers are optional\n    const tempV2_1 = new Vector2();\n    const tempV2_2 = new Vector2();\n    const tempV2_3 = new Vector2();\n    const tempV2_4 = new Vector2();\n    const tempV2_5 = new Vector2();\n    const tempV2_6 = new Vector2();\n    const tempV2_7 = new Vector2();\n    const lastPointL = new Vector2();\n    const lastPointR = new Vector2();\n    const point0L = new Vector2();\n    const point0R = new Vector2();\n    const currentPointL = new Vector2();\n    const currentPointR = new Vector2();\n    const nextPointL = new Vector2();\n    const nextPointR = new Vector2();\n    const innerPoint = new Vector2();\n    const outerPoint = new Vector2();\n    arcDivisions = arcDivisions !== undefined ? arcDivisions : 12;\n    minDistance = minDistance !== undefined ? minDistance : 0.001;\n    vertexOffset = vertexOffset !== undefined ? vertexOffset : 0; // First ensure there are no duplicated points\n\n    points = removeDuplicatedPoints(points);\n    const numPoints = points.length;\n    if (numPoints < 2) return 0;\n    const isClosed = points[0].equals(points[numPoints - 1]);\n    let currentPoint;\n    let previousPoint = points[0];\n    let nextPoint;\n    const strokeWidth2 = style.strokeWidth / 2;\n    const deltaU = 1 / (numPoints - 1);\n    let u0 = 0,\n      u1;\n    let innerSideModified;\n    let joinIsOnLeftSide;\n    let isMiter;\n    let initialJoinIsOnLeftSide = false;\n    let numVertices = 0;\n    let currentCoordinate = vertexOffset * 3;\n    let currentCoordinateUV = vertexOffset * 2; // Get initial left and right stroke points\n\n    getNormal(points[0], points[1], tempV2_1).multiplyScalar(strokeWidth2);\n    lastPointL.copy(points[0]).sub(tempV2_1);\n    lastPointR.copy(points[0]).add(tempV2_1);\n    point0L.copy(lastPointL);\n    point0R.copy(lastPointR);\n    for (let iPoint = 1; iPoint < numPoints; iPoint++) {\n      currentPoint = points[iPoint]; // Get next point\n\n      if (iPoint === numPoints - 1) {\n        if (isClosed) {\n          // Skip duplicated initial point\n          nextPoint = points[1];\n        } else {\n          nextPoint = undefined;\n        }\n      } else {\n        nextPoint = points[iPoint + 1];\n      } // Normal of previous segment in tempV2_1\n\n      const normal1 = tempV2_1;\n      getNormal(previousPoint, currentPoint, normal1);\n      tempV2_3.copy(normal1).multiplyScalar(strokeWidth2);\n      currentPointL.copy(currentPoint).sub(tempV2_3);\n      currentPointR.copy(currentPoint).add(tempV2_3);\n      u1 = u0 + deltaU;\n      innerSideModified = false;\n      if (nextPoint !== undefined) {\n        // Normal of next segment in tempV2_2\n        getNormal(currentPoint, nextPoint, tempV2_2);\n        tempV2_3.copy(tempV2_2).multiplyScalar(strokeWidth2);\n        nextPointL.copy(currentPoint).sub(tempV2_3);\n        nextPointR.copy(currentPoint).add(tempV2_3);\n        joinIsOnLeftSide = true;\n        tempV2_3.subVectors(nextPoint, previousPoint);\n        if (normal1.dot(tempV2_3) < 0) {\n          joinIsOnLeftSide = false;\n        }\n        if (iPoint === 1) initialJoinIsOnLeftSide = joinIsOnLeftSide;\n        tempV2_3.subVectors(nextPoint, currentPoint);\n        tempV2_3.normalize();\n        const dot = Math.abs(normal1.dot(tempV2_3)); // If path is straight, don't create join\n\n        if (dot !== 0) {\n          // Compute inner and outer segment intersections\n          const miterSide = strokeWidth2 / dot;\n          tempV2_3.multiplyScalar(-miterSide);\n          tempV2_4.subVectors(currentPoint, previousPoint);\n          tempV2_5.copy(tempV2_4).setLength(miterSide).add(tempV2_3);\n          innerPoint.copy(tempV2_5).negate();\n          const miterLength2 = tempV2_5.length();\n          const segmentLengthPrev = tempV2_4.length();\n          tempV2_4.divideScalar(segmentLengthPrev);\n          tempV2_6.subVectors(nextPoint, currentPoint);\n          const segmentLengthNext = tempV2_6.length();\n          tempV2_6.divideScalar(segmentLengthNext); // Check that previous and next segments doesn't overlap with the innerPoint of intersection\n\n          if (tempV2_4.dot(innerPoint) < segmentLengthPrev && tempV2_6.dot(innerPoint) < segmentLengthNext) {\n            innerSideModified = true;\n          }\n          outerPoint.copy(tempV2_5).add(currentPoint);\n          innerPoint.add(currentPoint);\n          isMiter = false;\n          if (innerSideModified) {\n            if (joinIsOnLeftSide) {\n              nextPointR.copy(innerPoint);\n              currentPointR.copy(innerPoint);\n            } else {\n              nextPointL.copy(innerPoint);\n              currentPointL.copy(innerPoint);\n            }\n          } else {\n            // The segment triangles are generated here if there was overlapping\n            makeSegmentTriangles();\n          }\n          switch (style.strokeLineJoin) {\n            case 'bevel':\n              makeSegmentWithBevelJoin(joinIsOnLeftSide, innerSideModified, u1);\n              break;\n            case 'round':\n              // Segment triangles\n              createSegmentTrianglesWithMiddleSection(joinIsOnLeftSide, innerSideModified); // Join triangles\n\n              if (joinIsOnLeftSide) {\n                makeCircularSector(currentPoint, currentPointL, nextPointL, u1, 0);\n              } else {\n                makeCircularSector(currentPoint, nextPointR, currentPointR, u1, 1);\n              }\n              break;\n            case 'miter':\n            case 'miter-clip':\n            default:\n              const miterFraction = strokeWidth2 * style.strokeMiterLimit / miterLength2;\n              if (miterFraction < 1) {\n                // The join miter length exceeds the miter limit\n                if (style.strokeLineJoin !== 'miter-clip') {\n                  makeSegmentWithBevelJoin(joinIsOnLeftSide, innerSideModified, u1);\n                  break;\n                } else {\n                  // Segment triangles\n                  createSegmentTrianglesWithMiddleSection(joinIsOnLeftSide, innerSideModified); // Miter-clip join triangles\n\n                  if (joinIsOnLeftSide) {\n                    tempV2_6.subVectors(outerPoint, currentPointL).multiplyScalar(miterFraction).add(currentPointL);\n                    tempV2_7.subVectors(outerPoint, nextPointL).multiplyScalar(miterFraction).add(nextPointL);\n                    addVertex(currentPointL, u1, 0);\n                    addVertex(tempV2_6, u1, 0);\n                    addVertex(currentPoint, u1, 0.5);\n                    addVertex(currentPoint, u1, 0.5);\n                    addVertex(tempV2_6, u1, 0);\n                    addVertex(tempV2_7, u1, 0);\n                    addVertex(currentPoint, u1, 0.5);\n                    addVertex(tempV2_7, u1, 0);\n                    addVertex(nextPointL, u1, 0);\n                  } else {\n                    tempV2_6.subVectors(outerPoint, currentPointR).multiplyScalar(miterFraction).add(currentPointR);\n                    tempV2_7.subVectors(outerPoint, nextPointR).multiplyScalar(miterFraction).add(nextPointR);\n                    addVertex(currentPointR, u1, 1);\n                    addVertex(tempV2_6, u1, 1);\n                    addVertex(currentPoint, u1, 0.5);\n                    addVertex(currentPoint, u1, 0.5);\n                    addVertex(tempV2_6, u1, 1);\n                    addVertex(tempV2_7, u1, 1);\n                    addVertex(currentPoint, u1, 0.5);\n                    addVertex(tempV2_7, u1, 1);\n                    addVertex(nextPointR, u1, 1);\n                  }\n                }\n              } else {\n                // Miter join segment triangles\n                if (innerSideModified) {\n                  // Optimized segment + join triangles\n                  if (joinIsOnLeftSide) {\n                    addVertex(lastPointR, u0, 1);\n                    addVertex(lastPointL, u0, 0);\n                    addVertex(outerPoint, u1, 0);\n                    addVertex(lastPointR, u0, 1);\n                    addVertex(outerPoint, u1, 0);\n                    addVertex(innerPoint, u1, 1);\n                  } else {\n                    addVertex(lastPointR, u0, 1);\n                    addVertex(lastPointL, u0, 0);\n                    addVertex(outerPoint, u1, 1);\n                    addVertex(lastPointL, u0, 0);\n                    addVertex(innerPoint, u1, 0);\n                    addVertex(outerPoint, u1, 1);\n                  }\n                  if (joinIsOnLeftSide) {\n                    nextPointL.copy(outerPoint);\n                  } else {\n                    nextPointR.copy(outerPoint);\n                  }\n                } else {\n                  // Add extra miter join triangles\n                  if (joinIsOnLeftSide) {\n                    addVertex(currentPointL, u1, 0);\n                    addVertex(outerPoint, u1, 0);\n                    addVertex(currentPoint, u1, 0.5);\n                    addVertex(currentPoint, u1, 0.5);\n                    addVertex(outerPoint, u1, 0);\n                    addVertex(nextPointL, u1, 0);\n                  } else {\n                    addVertex(currentPointR, u1, 1);\n                    addVertex(outerPoint, u1, 1);\n                    addVertex(currentPoint, u1, 0.5);\n                    addVertex(currentPoint, u1, 0.5);\n                    addVertex(outerPoint, u1, 1);\n                    addVertex(nextPointR, u1, 1);\n                  }\n                }\n                isMiter = true;\n              }\n              break;\n          }\n        } else {\n          // The segment triangles are generated here when two consecutive points are collinear\n          makeSegmentTriangles();\n        }\n      } else {\n        // The segment triangles are generated here if it is the ending segment\n        makeSegmentTriangles();\n      }\n      if (!isClosed && iPoint === numPoints - 1) {\n        // Start line endcap\n        addCapGeometry(points[0], point0L, point0R, joinIsOnLeftSide, true, u0);\n      } // Increment loop variables\n\n      u0 = u1;\n      previousPoint = currentPoint;\n      lastPointL.copy(nextPointL);\n      lastPointR.copy(nextPointR);\n    }\n    if (!isClosed) {\n      // Ending line endcap\n      addCapGeometry(currentPoint, currentPointL, currentPointR, joinIsOnLeftSide, false, u1);\n    } else if (innerSideModified && vertices) {\n      // Modify path first segment vertices to adjust to the segments inner and outer intersections\n      let lastOuter = outerPoint;\n      let lastInner = innerPoint;\n      if (initialJoinIsOnLeftSide !== joinIsOnLeftSide) {\n        lastOuter = innerPoint;\n        lastInner = outerPoint;\n      }\n      if (joinIsOnLeftSide) {\n        if (isMiter || initialJoinIsOnLeftSide) {\n          lastInner.toArray(vertices, 0 * 3);\n          lastInner.toArray(vertices, 3 * 3);\n          if (isMiter) {\n            lastOuter.toArray(vertices, 1 * 3);\n          }\n        }\n      } else {\n        if (isMiter || !initialJoinIsOnLeftSide) {\n          lastInner.toArray(vertices, 1 * 3);\n          lastInner.toArray(vertices, 3 * 3);\n          if (isMiter) {\n            lastOuter.toArray(vertices, 0 * 3);\n          }\n        }\n      }\n    }\n    return numVertices; // -- End of algorithm\n    // -- Functions\n\n    function getNormal(p1, p2, result) {\n      result.subVectors(p2, p1);\n      return result.set(-result.y, result.x).normalize();\n    }\n    function addVertex(position, u, v) {\n      if (vertices) {\n        vertices[currentCoordinate] = position.x;\n        vertices[currentCoordinate + 1] = position.y;\n        vertices[currentCoordinate + 2] = 0;\n        if (normals) {\n          normals[currentCoordinate] = 0;\n          normals[currentCoordinate + 1] = 0;\n          normals[currentCoordinate + 2] = 1;\n        }\n        currentCoordinate += 3;\n        if (uvs) {\n          uvs[currentCoordinateUV] = u;\n          uvs[currentCoordinateUV + 1] = v;\n          currentCoordinateUV += 2;\n        }\n      }\n      numVertices += 3;\n    }\n    function makeCircularSector(center, p1, p2, u, v) {\n      // param p1, p2: Points in the circle arc.\n      // p1 and p2 are in clockwise direction.\n      tempV2_1.copy(p1).sub(center).normalize();\n      tempV2_2.copy(p2).sub(center).normalize();\n      let angle = Math.PI;\n      const dot = tempV2_1.dot(tempV2_2);\n      if (Math.abs(dot) < 1) angle = Math.abs(Math.acos(dot));\n      angle /= arcDivisions;\n      tempV2_3.copy(p1);\n      for (let i = 0, il = arcDivisions - 1; i < il; i++) {\n        tempV2_4.copy(tempV2_3).rotateAround(center, angle);\n        addVertex(tempV2_3, u, v);\n        addVertex(tempV2_4, u, v);\n        addVertex(center, u, 0.5);\n        tempV2_3.copy(tempV2_4);\n      }\n      addVertex(tempV2_4, u, v);\n      addVertex(p2, u, v);\n      addVertex(center, u, 0.5);\n    }\n    function makeSegmentTriangles() {\n      addVertex(lastPointR, u0, 1);\n      addVertex(lastPointL, u0, 0);\n      addVertex(currentPointL, u1, 0);\n      addVertex(lastPointR, u0, 1);\n      addVertex(currentPointL, u1, 1);\n      addVertex(currentPointR, u1, 0);\n    }\n    function makeSegmentWithBevelJoin(joinIsOnLeftSide, innerSideModified, u) {\n      if (innerSideModified) {\n        // Optimized segment + bevel triangles\n        if (joinIsOnLeftSide) {\n          // Path segments triangles\n          addVertex(lastPointR, u0, 1);\n          addVertex(lastPointL, u0, 0);\n          addVertex(currentPointL, u1, 0);\n          addVertex(lastPointR, u0, 1);\n          addVertex(currentPointL, u1, 0);\n          addVertex(innerPoint, u1, 1); // Bevel join triangle\n\n          addVertex(currentPointL, u, 0);\n          addVertex(nextPointL, u, 0);\n          addVertex(innerPoint, u, 0.5);\n        } else {\n          // Path segments triangles\n          addVertex(lastPointR, u0, 1);\n          addVertex(lastPointL, u0, 0);\n          addVertex(currentPointR, u1, 1);\n          addVertex(lastPointL, u0, 0);\n          addVertex(innerPoint, u1, 0);\n          addVertex(currentPointR, u1, 1); // Bevel join triangle\n\n          addVertex(currentPointR, u, 1);\n          addVertex(nextPointR, u, 0);\n          addVertex(innerPoint, u, 0.5);\n        }\n      } else {\n        // Bevel join triangle. The segment triangles are done in the main loop\n        if (joinIsOnLeftSide) {\n          addVertex(currentPointL, u, 0);\n          addVertex(nextPointL, u, 0);\n          addVertex(currentPoint, u, 0.5);\n        } else {\n          addVertex(currentPointR, u, 1);\n          addVertex(nextPointR, u, 0);\n          addVertex(currentPoint, u, 0.5);\n        }\n      }\n    }\n    function createSegmentTrianglesWithMiddleSection(joinIsOnLeftSide, innerSideModified) {\n      if (innerSideModified) {\n        if (joinIsOnLeftSide) {\n          addVertex(lastPointR, u0, 1);\n          addVertex(lastPointL, u0, 0);\n          addVertex(currentPointL, u1, 0);\n          addVertex(lastPointR, u0, 1);\n          addVertex(currentPointL, u1, 0);\n          addVertex(innerPoint, u1, 1);\n          addVertex(currentPointL, u0, 0);\n          addVertex(currentPoint, u1, 0.5);\n          addVertex(innerPoint, u1, 1);\n          addVertex(currentPoint, u1, 0.5);\n          addVertex(nextPointL, u0, 0);\n          addVertex(innerPoint, u1, 1);\n        } else {\n          addVertex(lastPointR, u0, 1);\n          addVertex(lastPointL, u0, 0);\n          addVertex(currentPointR, u1, 1);\n          addVertex(lastPointL, u0, 0);\n          addVertex(innerPoint, u1, 0);\n          addVertex(currentPointR, u1, 1);\n          addVertex(currentPointR, u0, 1);\n          addVertex(innerPoint, u1, 0);\n          addVertex(currentPoint, u1, 0.5);\n          addVertex(currentPoint, u1, 0.5);\n          addVertex(innerPoint, u1, 0);\n          addVertex(nextPointR, u0, 1);\n        }\n      }\n    }\n    function addCapGeometry(center, p1, p2, joinIsOnLeftSide, start, u) {\n      // param center: End point of the path\n      // param p1, p2: Left and right cap points\n      switch (style.strokeLineCap) {\n        case 'round':\n          if (start) {\n            makeCircularSector(center, p2, p1, u, 0.5);\n          } else {\n            makeCircularSector(center, p1, p2, u, 0.5);\n          }\n          break;\n        case 'square':\n          if (start) {\n            tempV2_1.subVectors(p1, center);\n            tempV2_2.set(tempV2_1.y, -tempV2_1.x);\n            tempV2_3.addVectors(tempV2_1, tempV2_2).add(center);\n            tempV2_4.subVectors(tempV2_2, tempV2_1).add(center); // Modify already existing vertices\n\n            if (joinIsOnLeftSide) {\n              tempV2_3.toArray(vertices, 1 * 3);\n              tempV2_4.toArray(vertices, 0 * 3);\n              tempV2_4.toArray(vertices, 3 * 3);\n            } else {\n              tempV2_3.toArray(vertices, 1 * 3);\n              tempV2_3.toArray(vertices, 3 * 3);\n              tempV2_4.toArray(vertices, 0 * 3);\n            }\n          } else {\n            tempV2_1.subVectors(p2, center);\n            tempV2_2.set(tempV2_1.y, -tempV2_1.x);\n            tempV2_3.addVectors(tempV2_1, tempV2_2).add(center);\n            tempV2_4.subVectors(tempV2_2, tempV2_1).add(center);\n            const vl = vertices.length; // Modify already existing vertices\n\n            if (joinIsOnLeftSide) {\n              tempV2_3.toArray(vertices, vl - 1 * 3);\n              tempV2_4.toArray(vertices, vl - 2 * 3);\n              tempV2_4.toArray(vertices, vl - 4 * 3);\n            } else {\n              tempV2_3.toArray(vertices, vl - 2 * 3);\n              tempV2_4.toArray(vertices, vl - 1 * 3);\n              tempV2_4.toArray(vertices, vl - 4 * 3);\n            }\n          }\n          break;\n      }\n    }\n    function removeDuplicatedPoints(points) {\n      // Creates a new array if necessary with duplicated points removed.\n      // This does not remove duplicated initial and ending points of a closed path.\n      let dupPoints = false;\n      for (let i = 1, n = points.length - 1; i < n; i++) {\n        if (points[i].distanceTo(points[i + 1]) < minDistance) {\n          dupPoints = true;\n          break;\n        }\n      }\n      if (!dupPoints) return points;\n      const newPoints = [];\n      newPoints.push(points[0]);\n      for (let i = 1, n = points.length - 1; i < n; i++) {\n        if (points[i].distanceTo(points[i + 1]) >= minDistance) {\n          newPoints.push(points[i]);\n        }\n      }\n      newPoints.push(points[points.length - 1]);\n      return newPoints;\n    }\n  }\n}\nexport { SVGLoader };","map":{"version":3,"names":["Loader","FileLoader","Matrix3","Vector2","Vector3","ShapeUtils","Box2","Shape","Path","BufferGeometry","Float32BufferAttribute","ShapePath","SVGLoader","constructor","manager","defaultDPI","defaultUnit","load","url","onLoad","onProgress","onError","scope","loader","setPath","path","setRequestHeader","requestHeader","setWithCredentials","withCredentials","text","parse","e","console","error","itemError","parseNode","node","style","nodeType","transform","getNodeTransform","traverseChildNodes","nodeName","parseCSSStylesheet","parseStyle","hasAttribute","parsePathNode","parseRectNode","parsePolygonNode","parsePolylineNode","parseCircleNode","parseEllipseNode","parseLineNode","usedNodeId","href","baseVal","substring","usedNode","viewportElement","getElementById","warn","fill","undefined","color","setStyle","transformPath","currentTransform","paths","push","userData","nodes","childNodes","i","length","transformStack","pop","copy","identity","point","control","firstPoint","isFirstPoint","doSetFirstPoint","d","getAttribute","commands","match","l","command","type","charAt","data","substr","trim","numbers","parseFloats","j","jl","x","y","moveTo","lineTo","bezierCurveTo","getReflection","quadraticCurveTo","rx","ry","start","clone","parseArcCommand","currentPath","autoClose","curves","currentPoint","sheet","cssRules","stylesheet","selectorList","selectorText","split","filter","Boolean","map","stylesheets","Object","assign","x_axis_rotation","large_arc_flag","sweep_flag","end","Math","PI","abs","dx2","dy2","x1p","cos","sin","y1p","rxs","rys","x1ps","y1ps","cr","s","sqrt","dq","pq","q","max","cxp","cyp","cx","cy","theta","svgAngle","delta","absellipse","ux","uy","vx","vy","dot","len","ang","acos","min","parseFloatWithUnits","w","h","iterator","a","b","index","regex","replace","r","subpath","absarc","subPaths","x1","y1","x2","y2","stylesheetStyles","classSelectors","addStyle","svgName","jsName","adjustFunction","v","startsWith","clamp","positive","input","flags","stride","TypeError","RE","SEPARATOR","WHITESPACE","DIGIT","SIGN","POINT","COMMA","EXP","FLAGS","SEP","INT","FLOAT","state","seenComma","number","exponent","result","throwSyntaxError","current","partial","SyntaxError","newNumber","Number","pow","Array","isArray","includes","test","units","unitConversion","mm","cm","in","pt","pc","px","string","theUnit","String","n","u","endsWith","scale","parseFloat","parseNodeTransform","premultiply","tempTransform0","tx","ty","translate","transformsTexts","tIndex","transformText","openParPos","indexOf","closeParPos","transformType","array","angle","tempTransform1","tempTransform2","rotate","tempTransform3","multiplyMatrices","scaleX","scaleY","set","tan","m","transfVec2","v2","tempV3","applyMatrix3","isRotated","isTransformRotated","subPath","curve","isLineCurve","v1","isCubicBezierCurve","v0","v3","isQuadraticBezierCurve","isEllipseCurve","tempV2","aX","aY","xRadius","getTransformScaleX","yRadius","getTransformScaleY","elements","te","xml","DOMParser","parseFromString","documentElement","fillOpacity","strokeOpacity","strokeWidth","strokeLineJoin","strokeLineCap","strokeMiterLimit","createShapes","shapePath","BIGNUMBER","IntersectionLocationType","ORIGIN","DESTINATION","BETWEEN","LEFT","RIGHT","BEHIND","BEYOND","classifyResult","loc","t","findEdgeIntersection","a0","a1","b0","b1","x3","x4","y3","y4","nom1","nom2","denom","t1","t2","classifyPoint","toPrecision","p","edgeStart","edgeEnd","ax","ay","bx","by","sa","EPSILON","getIntersections","path1","path2","intersectionsRaw","intersections","path1EdgeStart","path1EdgeEnd","index2","path2EdgeStart","path2EdgeEnd","intersection","find","getScanlineIntersections","scanline","boundingBox","center","getCenter","allIntersections","forEach","containsPoint","points","identifier","isCW","sort","i1","i2","isHoleTo","simplePath","allPaths","scanlineMinX","scanlineMaxX","_fillRule","centerBoundingBox","scanlineIntersections","baseIntersections","otherIntersections","firstXOfPath","stack","isHole","isHoleFor","for","lastCWValue","simplePaths","getPoints","maxY","minY","maxX","minX","isClockWise","sp","isAHole","fillRule","shapesToReturn","amIAHole","shape","holes","getStrokeStyle","width","lineJoin","lineCap","miterLimit","strokeColor","pointsToStroke","arcDivisions","minDistance","vertices","normals","uvs","pointsToStrokeWithBuffers","geometry","setAttribute","vertexOffset","tempV2_1","tempV2_2","tempV2_3","tempV2_4","tempV2_5","tempV2_6","tempV2_7","lastPointL","lastPointR","point0L","point0R","currentPointL","currentPointR","nextPointL","nextPointR","innerPoint","outerPoint","removeDuplicatedPoints","numPoints","isClosed","equals","previousPoint","nextPoint","strokeWidth2","deltaU","u0","u1","innerSideModified","joinIsOnLeftSide","isMiter","initialJoinIsOnLeftSide","numVertices","currentCoordinate","currentCoordinateUV","getNormal","multiplyScalar","sub","add","iPoint","normal1","subVectors","normalize","miterSide","setLength","negate","miterLength2","segmentLengthPrev","divideScalar","segmentLengthNext","makeSegmentTriangles","makeSegmentWithBevelJoin","createSegmentTrianglesWithMiddleSection","makeCircularSector","miterFraction","addVertex","addCapGeometry","lastOuter","lastInner","toArray","p1","p2","position","il","rotateAround","addVectors","vl","dupPoints","distanceTo","newPoints"],"sources":["C:/Users/Work/node_modules/three-stdlib/loaders/SVGLoader.js"],"sourcesContent":["import { Loader, FileLoader, Matrix3, Vector2, Vector3, ShapeUtils, Box2, Shape, Path, BufferGeometry, Float32BufferAttribute, ShapePath } from 'three';\n\nclass SVGLoader extends Loader {\n  constructor(manager) {\n    super(manager); // Default dots per inch\n\n    this.defaultDPI = 90; // Accepted units: 'mm', 'cm', 'in', 'pt', 'pc', 'px'\n\n    this.defaultUnit = 'px';\n  }\n\n  load(url, onLoad, onProgress, onError) {\n    const scope = this;\n    const loader = new FileLoader(scope.manager);\n    loader.setPath(scope.path);\n    loader.setRequestHeader(scope.requestHeader);\n    loader.setWithCredentials(scope.withCredentials);\n    loader.load(url, function (text) {\n      try {\n        onLoad(scope.parse(text));\n      } catch (e) {\n        if (onError) {\n          onError(e);\n        } else {\n          console.error(e);\n        }\n\n        scope.manager.itemError(url);\n      }\n    }, onProgress, onError);\n  }\n\n  parse(text) {\n    const scope = this;\n\n    function parseNode(node, style) {\n      if (node.nodeType !== 1) return;\n      const transform = getNodeTransform(node);\n      let traverseChildNodes = true;\n      let path = null;\n\n      switch (node.nodeName) {\n        case 'svg':\n          break;\n\n        case 'style':\n          parseCSSStylesheet(node);\n          break;\n\n        case 'g':\n          style = parseStyle(node, style);\n          break;\n\n        case 'path':\n          style = parseStyle(node, style);\n          if (node.hasAttribute('d')) path = parsePathNode(node);\n          break;\n\n        case 'rect':\n          style = parseStyle(node, style);\n          path = parseRectNode(node);\n          break;\n\n        case 'polygon':\n          style = parseStyle(node, style);\n          path = parsePolygonNode(node);\n          break;\n\n        case 'polyline':\n          style = parseStyle(node, style);\n          path = parsePolylineNode(node);\n          break;\n\n        case 'circle':\n          style = parseStyle(node, style);\n          path = parseCircleNode(node);\n          break;\n\n        case 'ellipse':\n          style = parseStyle(node, style);\n          path = parseEllipseNode(node);\n          break;\n\n        case 'line':\n          style = parseStyle(node, style);\n          path = parseLineNode(node);\n          break;\n\n        case 'defs':\n          traverseChildNodes = false;\n          break;\n\n        case 'use':\n          style = parseStyle(node, style);\n          const usedNodeId = node.href.baseVal.substring(1);\n          const usedNode = node.viewportElement.getElementById(usedNodeId);\n\n          if (usedNode) {\n            parseNode(usedNode, style);\n          } else {\n            console.warn(\"SVGLoader: 'use node' references non-existent node id: \" + usedNodeId);\n          }\n\n          break;\n\n      }\n\n      if (path) {\n        if (style.fill !== undefined && style.fill !== 'none') {\n          path.color.setStyle(style.fill);\n        }\n\n        transformPath(path, currentTransform);\n        paths.push(path);\n        path.userData = {\n          node: node,\n          style: style\n        };\n      }\n\n      if (traverseChildNodes) {\n        const nodes = node.childNodes;\n\n        for (let i = 0; i < nodes.length; i++) {\n          parseNode(nodes[i], style);\n        }\n      }\n\n      if (transform) {\n        transformStack.pop();\n\n        if (transformStack.length > 0) {\n          currentTransform.copy(transformStack[transformStack.length - 1]);\n        } else {\n          currentTransform.identity();\n        }\n      }\n    }\n\n    function parsePathNode(node) {\n      const path = new ShapePath();\n      const point = new Vector2();\n      const control = new Vector2();\n      const firstPoint = new Vector2();\n      let isFirstPoint = true;\n      let doSetFirstPoint = false;\n      const d = node.getAttribute('d'); // console.log( d );\n\n      const commands = d.match(/[a-df-z][^a-df-z]*/gi);\n\n      for (let i = 0, l = commands.length; i < l; i++) {\n        const command = commands[i];\n        const type = command.charAt(0);\n        const data = command.substr(1).trim();\n\n        if (isFirstPoint === true) {\n          doSetFirstPoint = true;\n          isFirstPoint = false;\n        }\n\n        let numbers;\n\n        switch (type) {\n          case 'M':\n            numbers = parseFloats(data);\n\n            for (let j = 0, jl = numbers.length; j < jl; j += 2) {\n              point.x = numbers[j + 0];\n              point.y = numbers[j + 1];\n              control.x = point.x;\n              control.y = point.y;\n\n              if (j === 0) {\n                path.moveTo(point.x, point.y);\n              } else {\n                path.lineTo(point.x, point.y);\n              }\n\n              if (j === 0 && doSetFirstPoint === true) firstPoint.copy(point);\n            }\n\n            break;\n\n          case 'H':\n            numbers = parseFloats(data);\n\n            for (let j = 0, jl = numbers.length; j < jl; j++) {\n              point.x = numbers[j];\n              control.x = point.x;\n              control.y = point.y;\n              path.lineTo(point.x, point.y);\n              if (j === 0 && doSetFirstPoint === true) firstPoint.copy(point);\n            }\n\n            break;\n\n          case 'V':\n            numbers = parseFloats(data);\n\n            for (let j = 0, jl = numbers.length; j < jl; j++) {\n              point.y = numbers[j];\n              control.x = point.x;\n              control.y = point.y;\n              path.lineTo(point.x, point.y);\n              if (j === 0 && doSetFirstPoint === true) firstPoint.copy(point);\n            }\n\n            break;\n\n          case 'L':\n            numbers = parseFloats(data);\n\n            for (let j = 0, jl = numbers.length; j < jl; j += 2) {\n              point.x = numbers[j + 0];\n              point.y = numbers[j + 1];\n              control.x = point.x;\n              control.y = point.y;\n              path.lineTo(point.x, point.y);\n              if (j === 0 && doSetFirstPoint === true) firstPoint.copy(point);\n            }\n\n            break;\n\n          case 'C':\n            numbers = parseFloats(data);\n\n            for (let j = 0, jl = numbers.length; j < jl; j += 6) {\n              path.bezierCurveTo(numbers[j + 0], numbers[j + 1], numbers[j + 2], numbers[j + 3], numbers[j + 4], numbers[j + 5]);\n              control.x = numbers[j + 2];\n              control.y = numbers[j + 3];\n              point.x = numbers[j + 4];\n              point.y = numbers[j + 5];\n              if (j === 0 && doSetFirstPoint === true) firstPoint.copy(point);\n            }\n\n            break;\n\n          case 'S':\n            numbers = parseFloats(data);\n\n            for (let j = 0, jl = numbers.length; j < jl; j += 4) {\n              path.bezierCurveTo(getReflection(point.x, control.x), getReflection(point.y, control.y), numbers[j + 0], numbers[j + 1], numbers[j + 2], numbers[j + 3]);\n              control.x = numbers[j + 0];\n              control.y = numbers[j + 1];\n              point.x = numbers[j + 2];\n              point.y = numbers[j + 3];\n              if (j === 0 && doSetFirstPoint === true) firstPoint.copy(point);\n            }\n\n            break;\n\n          case 'Q':\n            numbers = parseFloats(data);\n\n            for (let j = 0, jl = numbers.length; j < jl; j += 4) {\n              path.quadraticCurveTo(numbers[j + 0], numbers[j + 1], numbers[j + 2], numbers[j + 3]);\n              control.x = numbers[j + 0];\n              control.y = numbers[j + 1];\n              point.x = numbers[j + 2];\n              point.y = numbers[j + 3];\n              if (j === 0 && doSetFirstPoint === true) firstPoint.copy(point);\n            }\n\n            break;\n\n          case 'T':\n            numbers = parseFloats(data);\n\n            for (let j = 0, jl = numbers.length; j < jl; j += 2) {\n              const rx = getReflection(point.x, control.x);\n              const ry = getReflection(point.y, control.y);\n              path.quadraticCurveTo(rx, ry, numbers[j + 0], numbers[j + 1]);\n              control.x = rx;\n              control.y = ry;\n              point.x = numbers[j + 0];\n              point.y = numbers[j + 1];\n              if (j === 0 && doSetFirstPoint === true) firstPoint.copy(point);\n            }\n\n            break;\n\n          case 'A':\n            numbers = parseFloats(data, [3, 4], 7);\n\n            for (let j = 0, jl = numbers.length; j < jl; j += 7) {\n              // skip command if start point == end point\n              if (numbers[j + 5] == point.x && numbers[j + 6] == point.y) continue;\n              const start = point.clone();\n              point.x = numbers[j + 5];\n              point.y = numbers[j + 6];\n              control.x = point.x;\n              control.y = point.y;\n              parseArcCommand(path, numbers[j], numbers[j + 1], numbers[j + 2], numbers[j + 3], numbers[j + 4], start, point);\n              if (j === 0 && doSetFirstPoint === true) firstPoint.copy(point);\n            }\n\n            break;\n\n          case 'm':\n            numbers = parseFloats(data);\n\n            for (let j = 0, jl = numbers.length; j < jl; j += 2) {\n              point.x += numbers[j + 0];\n              point.y += numbers[j + 1];\n              control.x = point.x;\n              control.y = point.y;\n\n              if (j === 0) {\n                path.moveTo(point.x, point.y);\n              } else {\n                path.lineTo(point.x, point.y);\n              }\n\n              if (j === 0 && doSetFirstPoint === true) firstPoint.copy(point);\n            }\n\n            break;\n\n          case 'h':\n            numbers = parseFloats(data);\n\n            for (let j = 0, jl = numbers.length; j < jl; j++) {\n              point.x += numbers[j];\n              control.x = point.x;\n              control.y = point.y;\n              path.lineTo(point.x, point.y);\n              if (j === 0 && doSetFirstPoint === true) firstPoint.copy(point);\n            }\n\n            break;\n\n          case 'v':\n            numbers = parseFloats(data);\n\n            for (let j = 0, jl = numbers.length; j < jl; j++) {\n              point.y += numbers[j];\n              control.x = point.x;\n              control.y = point.y;\n              path.lineTo(point.x, point.y);\n              if (j === 0 && doSetFirstPoint === true) firstPoint.copy(point);\n            }\n\n            break;\n\n          case 'l':\n            numbers = parseFloats(data);\n\n            for (let j = 0, jl = numbers.length; j < jl; j += 2) {\n              point.x += numbers[j + 0];\n              point.y += numbers[j + 1];\n              control.x = point.x;\n              control.y = point.y;\n              path.lineTo(point.x, point.y);\n              if (j === 0 && doSetFirstPoint === true) firstPoint.copy(point);\n            }\n\n            break;\n\n          case 'c':\n            numbers = parseFloats(data);\n\n            for (let j = 0, jl = numbers.length; j < jl; j += 6) {\n              path.bezierCurveTo(point.x + numbers[j + 0], point.y + numbers[j + 1], point.x + numbers[j + 2], point.y + numbers[j + 3], point.x + numbers[j + 4], point.y + numbers[j + 5]);\n              control.x = point.x + numbers[j + 2];\n              control.y = point.y + numbers[j + 3];\n              point.x += numbers[j + 4];\n              point.y += numbers[j + 5];\n              if (j === 0 && doSetFirstPoint === true) firstPoint.copy(point);\n            }\n\n            break;\n\n          case 's':\n            numbers = parseFloats(data);\n\n            for (let j = 0, jl = numbers.length; j < jl; j += 4) {\n              path.bezierCurveTo(getReflection(point.x, control.x), getReflection(point.y, control.y), point.x + numbers[j + 0], point.y + numbers[j + 1], point.x + numbers[j + 2], point.y + numbers[j + 3]);\n              control.x = point.x + numbers[j + 0];\n              control.y = point.y + numbers[j + 1];\n              point.x += numbers[j + 2];\n              point.y += numbers[j + 3];\n              if (j === 0 && doSetFirstPoint === true) firstPoint.copy(point);\n            }\n\n            break;\n\n          case 'q':\n            numbers = parseFloats(data);\n\n            for (let j = 0, jl = numbers.length; j < jl; j += 4) {\n              path.quadraticCurveTo(point.x + numbers[j + 0], point.y + numbers[j + 1], point.x + numbers[j + 2], point.y + numbers[j + 3]);\n              control.x = point.x + numbers[j + 0];\n              control.y = point.y + numbers[j + 1];\n              point.x += numbers[j + 2];\n              point.y += numbers[j + 3];\n              if (j === 0 && doSetFirstPoint === true) firstPoint.copy(point);\n            }\n\n            break;\n\n          case 't':\n            numbers = parseFloats(data);\n\n            for (let j = 0, jl = numbers.length; j < jl; j += 2) {\n              const rx = getReflection(point.x, control.x);\n              const ry = getReflection(point.y, control.y);\n              path.quadraticCurveTo(rx, ry, point.x + numbers[j + 0], point.y + numbers[j + 1]);\n              control.x = rx;\n              control.y = ry;\n              point.x = point.x + numbers[j + 0];\n              point.y = point.y + numbers[j + 1];\n              if (j === 0 && doSetFirstPoint === true) firstPoint.copy(point);\n            }\n\n            break;\n\n          case 'a':\n            numbers = parseFloats(data, [3, 4], 7);\n\n            for (let j = 0, jl = numbers.length; j < jl; j += 7) {\n              // skip command if no displacement\n              if (numbers[j + 5] == 0 && numbers[j + 6] == 0) continue;\n              const start = point.clone();\n              point.x += numbers[j + 5];\n              point.y += numbers[j + 6];\n              control.x = point.x;\n              control.y = point.y;\n              parseArcCommand(path, numbers[j], numbers[j + 1], numbers[j + 2], numbers[j + 3], numbers[j + 4], start, point);\n              if (j === 0 && doSetFirstPoint === true) firstPoint.copy(point);\n            }\n\n            break;\n\n          case 'Z':\n          case 'z':\n            path.currentPath.autoClose = true;\n\n            if (path.currentPath.curves.length > 0) {\n              // Reset point to beginning of Path\n              point.copy(firstPoint);\n              path.currentPath.currentPoint.copy(point);\n              isFirstPoint = true;\n            }\n\n            break;\n\n          default:\n            console.warn(command);\n        } // console.log( type, parseFloats( data ), parseFloats( data ).length  )\n\n\n        doSetFirstPoint = false;\n      }\n\n      return path;\n    }\n\n    function parseCSSStylesheet(node) {\n      if (!node.sheet || !node.sheet.cssRules || !node.sheet.cssRules.length) return;\n\n      for (let i = 0; i < node.sheet.cssRules.length; i++) {\n        const stylesheet = node.sheet.cssRules[i];\n        if (stylesheet.type !== 1) continue;\n        const selectorList = stylesheet.selectorText.split(/,/gm).filter(Boolean).map(i => i.trim());\n\n        for (let j = 0; j < selectorList.length; j++) {\n          stylesheets[selectorList[j]] = Object.assign(stylesheets[selectorList[j]] || {}, stylesheet.style);\n        }\n      }\n    }\n    /**\n     * https://www.w3.org/TR/SVG/implnote.html#ArcImplementationNotes\n     * https://mortoray.com/2017/02/16/rendering-an-svg-elliptical-arc-as-bezier-curves/ Appendix: Endpoint to center arc conversion\n     * From\n     * rx ry x-axis-rotation large-arc-flag sweep-flag x y\n     * To\n     * aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation\n     */\n\n\n    function parseArcCommand(path, rx, ry, x_axis_rotation, large_arc_flag, sweep_flag, start, end) {\n      if (rx == 0 || ry == 0) {\n        // draw a line if either of the radii == 0\n        path.lineTo(end.x, end.y);\n        return;\n      }\n\n      x_axis_rotation = x_axis_rotation * Math.PI / 180; // Ensure radii are positive\n\n      rx = Math.abs(rx);\n      ry = Math.abs(ry); // Compute (x1', y1')\n\n      const dx2 = (start.x - end.x) / 2.0;\n      const dy2 = (start.y - end.y) / 2.0;\n      const x1p = Math.cos(x_axis_rotation) * dx2 + Math.sin(x_axis_rotation) * dy2;\n      const y1p = -Math.sin(x_axis_rotation) * dx2 + Math.cos(x_axis_rotation) * dy2; // Compute (cx', cy')\n\n      let rxs = rx * rx;\n      let rys = ry * ry;\n      const x1ps = x1p * x1p;\n      const y1ps = y1p * y1p; // Ensure radii are large enough\n\n      const cr = x1ps / rxs + y1ps / rys;\n\n      if (cr > 1) {\n        // scale up rx,ry equally so cr == 1\n        const s = Math.sqrt(cr);\n        rx = s * rx;\n        ry = s * ry;\n        rxs = rx * rx;\n        rys = ry * ry;\n      }\n\n      const dq = rxs * y1ps + rys * x1ps;\n      const pq = (rxs * rys - dq) / dq;\n      let q = Math.sqrt(Math.max(0, pq));\n      if (large_arc_flag === sweep_flag) q = -q;\n      const cxp = q * rx * y1p / ry;\n      const cyp = -q * ry * x1p / rx; // Step 3: Compute (cx, cy) from (cx', cy')\n\n      const cx = Math.cos(x_axis_rotation) * cxp - Math.sin(x_axis_rotation) * cyp + (start.x + end.x) / 2;\n      const cy = Math.sin(x_axis_rotation) * cxp + Math.cos(x_axis_rotation) * cyp + (start.y + end.y) / 2; // Step 4: Compute θ1 and Δθ\n\n      const theta = svgAngle(1, 0, (x1p - cxp) / rx, (y1p - cyp) / ry);\n      const delta = svgAngle((x1p - cxp) / rx, (y1p - cyp) / ry, (-x1p - cxp) / rx, (-y1p - cyp) / ry) % (Math.PI * 2);\n      path.currentPath.absellipse(cx, cy, rx, ry, theta, theta + delta, sweep_flag === 0, x_axis_rotation);\n    }\n\n    function svgAngle(ux, uy, vx, vy) {\n      const dot = ux * vx + uy * vy;\n      const len = Math.sqrt(ux * ux + uy * uy) * Math.sqrt(vx * vx + vy * vy);\n      let ang = Math.acos(Math.max(-1, Math.min(1, dot / len))); // floating point precision, slightly over values appear\n\n      if (ux * vy - uy * vx < 0) ang = -ang;\n      return ang;\n    }\n    /*\n     * According to https://www.w3.org/TR/SVG/shapes.html#RectElementRXAttribute\n     * rounded corner should be rendered to elliptical arc, but bezier curve does the job well enough\n     */\n\n\n    function parseRectNode(node) {\n      const x = parseFloatWithUnits(node.getAttribute('x') || 0);\n      const y = parseFloatWithUnits(node.getAttribute('y') || 0);\n      const rx = parseFloatWithUnits(node.getAttribute('rx') || 0);\n      const ry = parseFloatWithUnits(node.getAttribute('ry') || 0);\n      const w = parseFloatWithUnits(node.getAttribute('width'));\n      const h = parseFloatWithUnits(node.getAttribute('height'));\n      const path = new ShapePath();\n      path.moveTo(x + 2 * rx, y);\n      path.lineTo(x + w - 2 * rx, y);\n      if (rx !== 0 || ry !== 0) path.bezierCurveTo(x + w, y, x + w, y, x + w, y + 2 * ry);\n      path.lineTo(x + w, y + h - 2 * ry);\n      if (rx !== 0 || ry !== 0) path.bezierCurveTo(x + w, y + h, x + w, y + h, x + w - 2 * rx, y + h);\n      path.lineTo(x + 2 * rx, y + h);\n\n      if (rx !== 0 || ry !== 0) {\n        path.bezierCurveTo(x, y + h, x, y + h, x, y + h - 2 * ry);\n      }\n\n      path.lineTo(x, y + 2 * ry);\n\n      if (rx !== 0 || ry !== 0) {\n        path.bezierCurveTo(x, y, x, y, x + 2 * rx, y);\n      }\n\n      return path;\n    }\n\n    function parsePolygonNode(node) {\n      function iterator(match, a, b) {\n        const x = parseFloatWithUnits(a);\n        const y = parseFloatWithUnits(b);\n\n        if (index === 0) {\n          path.moveTo(x, y);\n        } else {\n          path.lineTo(x, y);\n        }\n\n        index++;\n      }\n\n      const regex = /(-?[\\d\\.?]+)[,|\\s](-?[\\d\\.?]+)/g;\n      const path = new ShapePath();\n      let index = 0;\n      node.getAttribute('points').replace(regex, iterator);\n      path.currentPath.autoClose = true;\n      return path;\n    }\n\n    function parsePolylineNode(node) {\n      function iterator(match, a, b) {\n        const x = parseFloatWithUnits(a);\n        const y = parseFloatWithUnits(b);\n\n        if (index === 0) {\n          path.moveTo(x, y);\n        } else {\n          path.lineTo(x, y);\n        }\n\n        index++;\n      }\n\n      const regex = /(-?[\\d\\.?]+)[,|\\s](-?[\\d\\.?]+)/g;\n      const path = new ShapePath();\n      let index = 0;\n      node.getAttribute('points').replace(regex, iterator);\n      path.currentPath.autoClose = false;\n      return path;\n    }\n\n    function parseCircleNode(node) {\n      const x = parseFloatWithUnits(node.getAttribute('cx') || 0);\n      const y = parseFloatWithUnits(node.getAttribute('cy') || 0);\n      const r = parseFloatWithUnits(node.getAttribute('r') || 0);\n      const subpath = new Path();\n      subpath.absarc(x, y, r, 0, Math.PI * 2);\n      const path = new ShapePath();\n      path.subPaths.push(subpath);\n      return path;\n    }\n\n    function parseEllipseNode(node) {\n      const x = parseFloatWithUnits(node.getAttribute('cx') || 0);\n      const y = parseFloatWithUnits(node.getAttribute('cy') || 0);\n      const rx = parseFloatWithUnits(node.getAttribute('rx') || 0);\n      const ry = parseFloatWithUnits(node.getAttribute('ry') || 0);\n      const subpath = new Path();\n      subpath.absellipse(x, y, rx, ry, 0, Math.PI * 2);\n      const path = new ShapePath();\n      path.subPaths.push(subpath);\n      return path;\n    }\n\n    function parseLineNode(node) {\n      const x1 = parseFloatWithUnits(node.getAttribute('x1') || 0);\n      const y1 = parseFloatWithUnits(node.getAttribute('y1') || 0);\n      const x2 = parseFloatWithUnits(node.getAttribute('x2') || 0);\n      const y2 = parseFloatWithUnits(node.getAttribute('y2') || 0);\n      const path = new ShapePath();\n      path.moveTo(x1, y1);\n      path.lineTo(x2, y2);\n      path.currentPath.autoClose = false;\n      return path;\n    } //\n\n\n    function parseStyle(node, style) {\n      style = Object.assign({}, style); // clone style\n\n      let stylesheetStyles = {};\n\n      if (node.hasAttribute('class')) {\n        const classSelectors = node.getAttribute('class').split(/\\s/).filter(Boolean).map(i => i.trim());\n\n        for (let i = 0; i < classSelectors.length; i++) {\n          stylesheetStyles = Object.assign(stylesheetStyles, stylesheets['.' + classSelectors[i]]);\n        }\n      }\n\n      if (node.hasAttribute('id')) {\n        stylesheetStyles = Object.assign(stylesheetStyles, stylesheets['#' + node.getAttribute('id')]);\n      }\n\n      function addStyle(svgName, jsName, adjustFunction) {\n        if (adjustFunction === undefined) {\n          adjustFunction = function copy(v) {\n            if (v.startsWith('url')) console.warn('SVGLoader: url access in attributes is not implemented.');\n            return v;\n          };\n        }\n\n        if (node.hasAttribute(svgName)) style[jsName] = adjustFunction(node.getAttribute(svgName));\n        if (stylesheetStyles[svgName]) style[jsName] = adjustFunction(stylesheetStyles[svgName]);\n        if (node.style && node.style[svgName] !== '') style[jsName] = adjustFunction(node.style[svgName]);\n      }\n\n      function clamp(v) {\n        return Math.max(0, Math.min(1, parseFloatWithUnits(v)));\n      }\n\n      function positive(v) {\n        return Math.max(0, parseFloatWithUnits(v));\n      }\n\n      addStyle('fill', 'fill');\n      addStyle('fill-opacity', 'fillOpacity', clamp);\n      addStyle('opacity', 'opacity', clamp);\n      addStyle('stroke', 'stroke');\n      addStyle('stroke-opacity', 'strokeOpacity', clamp);\n      addStyle('stroke-width', 'strokeWidth', positive);\n      addStyle('stroke-linejoin', 'strokeLineJoin');\n      addStyle('stroke-linecap', 'strokeLineCap');\n      addStyle('stroke-miterlimit', 'strokeMiterLimit', positive);\n      addStyle('visibility', 'visibility');\n      return style;\n    } // http://www.w3.org/TR/SVG11/implnote.html#PathElementImplementationNotes\n\n\n    function getReflection(a, b) {\n      return a - (b - a);\n    } // from https://github.com/ppvg/svg-numbers (MIT License)\n\n\n    function parseFloats(input, flags, stride) {\n      if (typeof input !== 'string') {\n        throw new TypeError('Invalid input: ' + typeof input);\n      } // Character groups\n\n\n      const RE = {\n        SEPARATOR: /[ \\t\\r\\n\\,.\\-+]/,\n        WHITESPACE: /[ \\t\\r\\n]/,\n        DIGIT: /[\\d]/,\n        SIGN: /[-+]/,\n        POINT: /\\./,\n        COMMA: /,/,\n        EXP: /e/i,\n        FLAGS: /[01]/\n      }; // States\n\n      const SEP = 0;\n      const INT = 1;\n      const FLOAT = 2;\n      const EXP = 3;\n      let state = SEP;\n      let seenComma = true;\n      let number = '',\n          exponent = '';\n      const result = [];\n\n      function throwSyntaxError(current, i, partial) {\n        const error = new SyntaxError('Unexpected character \"' + current + '\" at index ' + i + '.');\n        error.partial = partial;\n        throw error;\n      }\n\n      function newNumber() {\n        if (number !== '') {\n          if (exponent === '') result.push(Number(number));else result.push(Number(number) * Math.pow(10, Number(exponent)));\n        }\n\n        number = '';\n        exponent = '';\n      }\n\n      let current;\n      const length = input.length;\n\n      for (let i = 0; i < length; i++) {\n        current = input[i]; // check for flags\n\n        if (Array.isArray(flags) && flags.includes(result.length % stride) && RE.FLAGS.test(current)) {\n          state = INT;\n          number = current;\n          newNumber();\n          continue;\n        } // parse until next number\n\n\n        if (state === SEP) {\n          // eat whitespace\n          if (RE.WHITESPACE.test(current)) {\n            continue;\n          } // start new number\n\n\n          if (RE.DIGIT.test(current) || RE.SIGN.test(current)) {\n            state = INT;\n            number = current;\n            continue;\n          }\n\n          if (RE.POINT.test(current)) {\n            state = FLOAT;\n            number = current;\n            continue;\n          } // throw on double commas (e.g. \"1, , 2\")\n\n\n          if (RE.COMMA.test(current)) {\n            if (seenComma) {\n              throwSyntaxError(current, i, result);\n            }\n\n            seenComma = true;\n          }\n        } // parse integer part\n\n\n        if (state === INT) {\n          if (RE.DIGIT.test(current)) {\n            number += current;\n            continue;\n          }\n\n          if (RE.POINT.test(current)) {\n            number += current;\n            state = FLOAT;\n            continue;\n          }\n\n          if (RE.EXP.test(current)) {\n            state = EXP;\n            continue;\n          } // throw on double signs (\"-+1\"), but not on sign as separator (\"-1-2\")\n\n\n          if (RE.SIGN.test(current) && number.length === 1 && RE.SIGN.test(number[0])) {\n            throwSyntaxError(current, i, result);\n          }\n        } // parse decimal part\n\n\n        if (state === FLOAT) {\n          if (RE.DIGIT.test(current)) {\n            number += current;\n            continue;\n          }\n\n          if (RE.EXP.test(current)) {\n            state = EXP;\n            continue;\n          } // throw on double decimal points (e.g. \"1..2\")\n\n\n          if (RE.POINT.test(current) && number[number.length - 1] === '.') {\n            throwSyntaxError(current, i, result);\n          }\n        } // parse exponent part\n\n\n        if (state === EXP) {\n          if (RE.DIGIT.test(current)) {\n            exponent += current;\n            continue;\n          }\n\n          if (RE.SIGN.test(current)) {\n            if (exponent === '') {\n              exponent += current;\n              continue;\n            }\n\n            if (exponent.length === 1 && RE.SIGN.test(exponent)) {\n              throwSyntaxError(current, i, result);\n            }\n          }\n        } // end of number\n\n\n        if (RE.WHITESPACE.test(current)) {\n          newNumber();\n          state = SEP;\n          seenComma = false;\n        } else if (RE.COMMA.test(current)) {\n          newNumber();\n          state = SEP;\n          seenComma = true;\n        } else if (RE.SIGN.test(current)) {\n          newNumber();\n          state = INT;\n          number = current;\n        } else if (RE.POINT.test(current)) {\n          newNumber();\n          state = FLOAT;\n          number = current;\n        } else {\n          throwSyntaxError(current, i, result);\n        }\n      } // add the last number found (if any)\n\n\n      newNumber();\n      return result;\n    } // Units\n\n\n    const units = ['mm', 'cm', 'in', 'pt', 'pc', 'px']; // Conversion: [ fromUnit ][ toUnit ] (-1 means dpi dependent)\n\n    const unitConversion = {\n      mm: {\n        mm: 1,\n        cm: 0.1,\n        in: 1 / 25.4,\n        pt: 72 / 25.4,\n        pc: 6 / 25.4,\n        px: -1\n      },\n      cm: {\n        mm: 10,\n        cm: 1,\n        in: 1 / 2.54,\n        pt: 72 / 2.54,\n        pc: 6 / 2.54,\n        px: -1\n      },\n      in: {\n        mm: 25.4,\n        cm: 2.54,\n        in: 1,\n        pt: 72,\n        pc: 6,\n        px: -1\n      },\n      pt: {\n        mm: 25.4 / 72,\n        cm: 2.54 / 72,\n        in: 1 / 72,\n        pt: 1,\n        pc: 6 / 72,\n        px: -1\n      },\n      pc: {\n        mm: 25.4 / 6,\n        cm: 2.54 / 6,\n        in: 1 / 6,\n        pt: 72 / 6,\n        pc: 1,\n        px: -1\n      },\n      px: {\n        px: 1\n      }\n    };\n\n    function parseFloatWithUnits(string) {\n      let theUnit = 'px';\n\n      if (typeof string === 'string' || string instanceof String) {\n        for (let i = 0, n = units.length; i < n; i++) {\n          const u = units[i];\n\n          if (string.endsWith(u)) {\n            theUnit = u;\n            string = string.substring(0, string.length - u.length);\n            break;\n          }\n        }\n      }\n\n      let scale = undefined;\n\n      if (theUnit === 'px' && scope.defaultUnit !== 'px') {\n        // Conversion scale from  pixels to inches, then to default units\n        scale = unitConversion['in'][scope.defaultUnit] / scope.defaultDPI;\n      } else {\n        scale = unitConversion[theUnit][scope.defaultUnit];\n\n        if (scale < 0) {\n          // Conversion scale to pixels\n          scale = unitConversion[theUnit]['in'] * scope.defaultDPI;\n        }\n      }\n\n      return scale * parseFloat(string);\n    } // Transforms\n\n\n    function getNodeTransform(node) {\n      if (!(node.hasAttribute('transform') || node.nodeName === 'use' && (node.hasAttribute('x') || node.hasAttribute('y')))) {\n        return null;\n      }\n\n      const transform = parseNodeTransform(node);\n\n      if (transformStack.length > 0) {\n        transform.premultiply(transformStack[transformStack.length - 1]);\n      }\n\n      currentTransform.copy(transform);\n      transformStack.push(transform);\n      return transform;\n    }\n\n    function parseNodeTransform(node) {\n      const transform = new Matrix3();\n      const currentTransform = tempTransform0;\n\n      if (node.nodeName === 'use' && (node.hasAttribute('x') || node.hasAttribute('y'))) {\n        const tx = parseFloatWithUnits(node.getAttribute('x'));\n        const ty = parseFloatWithUnits(node.getAttribute('y'));\n        transform.translate(tx, ty);\n      }\n\n      if (node.hasAttribute('transform')) {\n        const transformsTexts = node.getAttribute('transform').split(')');\n\n        for (let tIndex = transformsTexts.length - 1; tIndex >= 0; tIndex--) {\n          const transformText = transformsTexts[tIndex].trim();\n          if (transformText === '') continue;\n          const openParPos = transformText.indexOf('(');\n          const closeParPos = transformText.length;\n\n          if (openParPos > 0 && openParPos < closeParPos) {\n            const transformType = transformText.substr(0, openParPos);\n            const array = parseFloats(transformText.substr(openParPos + 1, closeParPos - openParPos - 1));\n            currentTransform.identity();\n\n            switch (transformType) {\n              case 'translate':\n                if (array.length >= 1) {\n                  const tx = array[0];\n                  let ty = tx;\n\n                  if (array.length >= 2) {\n                    ty = array[1];\n                  }\n\n                  currentTransform.translate(tx, ty);\n                }\n\n                break;\n\n              case 'rotate':\n                if (array.length >= 1) {\n                  let angle = 0;\n                  let cx = 0;\n                  let cy = 0; // Angle\n\n                  angle = -array[0] * Math.PI / 180;\n\n                  if (array.length >= 3) {\n                    // Center x, y\n                    cx = array[1];\n                    cy = array[2];\n                  } // Rotate around center (cx, cy)\n\n\n                  tempTransform1.identity().translate(-cx, -cy);\n                  tempTransform2.identity().rotate(angle);\n                  tempTransform3.multiplyMatrices(tempTransform2, tempTransform1);\n                  tempTransform1.identity().translate(cx, cy);\n                  currentTransform.multiplyMatrices(tempTransform1, tempTransform3);\n                }\n\n                break;\n\n              case 'scale':\n                if (array.length >= 1) {\n                  const scaleX = array[0];\n                  let scaleY = scaleX;\n\n                  if (array.length >= 2) {\n                    scaleY = array[1];\n                  }\n\n                  currentTransform.scale(scaleX, scaleY);\n                }\n\n                break;\n\n              case 'skewX':\n                if (array.length === 1) {\n                  currentTransform.set(1, Math.tan(array[0] * Math.PI / 180), 0, 0, 1, 0, 0, 0, 1);\n                }\n\n                break;\n\n              case 'skewY':\n                if (array.length === 1) {\n                  currentTransform.set(1, 0, 0, Math.tan(array[0] * Math.PI / 180), 1, 0, 0, 0, 1);\n                }\n\n                break;\n\n              case 'matrix':\n                if (array.length === 6) {\n                  currentTransform.set(array[0], array[2], array[4], array[1], array[3], array[5], 0, 0, 1);\n                }\n\n                break;\n            }\n          }\n\n          transform.premultiply(currentTransform);\n        }\n      }\n\n      return transform;\n    }\n\n    function transformPath(path, m) {\n      function transfVec2(v2) {\n        tempV3.set(v2.x, v2.y, 1).applyMatrix3(m);\n        v2.set(tempV3.x, tempV3.y);\n      }\n\n      const isRotated = isTransformRotated(m);\n      const subPaths = path.subPaths;\n\n      for (let i = 0, n = subPaths.length; i < n; i++) {\n        const subPath = subPaths[i];\n        const curves = subPath.curves;\n\n        for (let j = 0; j < curves.length; j++) {\n          const curve = curves[j];\n\n          if (curve.isLineCurve) {\n            transfVec2(curve.v1);\n            transfVec2(curve.v2);\n          } else if (curve.isCubicBezierCurve) {\n            transfVec2(curve.v0);\n            transfVec2(curve.v1);\n            transfVec2(curve.v2);\n            transfVec2(curve.v3);\n          } else if (curve.isQuadraticBezierCurve) {\n            transfVec2(curve.v0);\n            transfVec2(curve.v1);\n            transfVec2(curve.v2);\n          } else if (curve.isEllipseCurve) {\n            if (isRotated) {\n              console.warn('SVGLoader: Elliptic arc or ellipse rotation or skewing is not implemented.');\n            }\n\n            tempV2.set(curve.aX, curve.aY);\n            transfVec2(tempV2);\n            curve.aX = tempV2.x;\n            curve.aY = tempV2.y;\n            curve.xRadius *= getTransformScaleX(m);\n            curve.yRadius *= getTransformScaleY(m);\n          }\n        }\n      }\n    }\n\n    function isTransformRotated(m) {\n      return m.elements[1] !== 0 || m.elements[3] !== 0;\n    }\n\n    function getTransformScaleX(m) {\n      const te = m.elements;\n      return Math.sqrt(te[0] * te[0] + te[1] * te[1]);\n    }\n\n    function getTransformScaleY(m) {\n      const te = m.elements;\n      return Math.sqrt(te[3] * te[3] + te[4] * te[4]);\n    } //\n\n\n    const paths = [];\n    const stylesheets = {};\n    const transformStack = [];\n    const tempTransform0 = new Matrix3();\n    const tempTransform1 = new Matrix3();\n    const tempTransform2 = new Matrix3();\n    const tempTransform3 = new Matrix3();\n    const tempV2 = new Vector2();\n    const tempV3 = new Vector3();\n    const currentTransform = new Matrix3();\n    const xml = new DOMParser().parseFromString(text, 'image/svg+xml'); // application/xml\n\n    parseNode(xml.documentElement, {\n      fill: '#000',\n      fillOpacity: 1,\n      strokeOpacity: 1,\n      strokeWidth: 1,\n      strokeLineJoin: 'miter',\n      strokeLineCap: 'butt',\n      strokeMiterLimit: 4\n    });\n    const data = {\n      paths: paths,\n      xml: xml.documentElement\n    }; // console.log( paths );\n\n    return data;\n  }\n\n  static createShapes(shapePath) {\n    // Param shapePath: a shapepath as returned by the parse function of this class\n    // Returns Shape object\n    const BIGNUMBER = 999999999;\n    const IntersectionLocationType = {\n      ORIGIN: 0,\n      DESTINATION: 1,\n      BETWEEN: 2,\n      LEFT: 3,\n      RIGHT: 4,\n      BEHIND: 5,\n      BEYOND: 6\n    };\n    const classifyResult = {\n      loc: IntersectionLocationType.ORIGIN,\n      t: 0\n    };\n\n    function findEdgeIntersection(a0, a1, b0, b1) {\n      const x1 = a0.x;\n      const x2 = a1.x;\n      const x3 = b0.x;\n      const x4 = b1.x;\n      const y1 = a0.y;\n      const y2 = a1.y;\n      const y3 = b0.y;\n      const y4 = b1.y;\n      const nom1 = (x4 - x3) * (y1 - y3) - (y4 - y3) * (x1 - x3);\n      const nom2 = (x2 - x1) * (y1 - y3) - (y2 - y1) * (x1 - x3);\n      const denom = (y4 - y3) * (x2 - x1) - (x4 - x3) * (y2 - y1);\n      const t1 = nom1 / denom;\n      const t2 = nom2 / denom;\n\n      if (denom === 0 && nom1 !== 0 || t1 <= 0 || t1 >= 1 || t2 < 0 || t2 > 1) {\n        //1. lines are parallel or edges don't intersect\n        return null;\n      } else if (nom1 === 0 && denom === 0) {\n        //2. lines are colinear\n        //check if endpoints of edge2 (b0-b1) lies on edge1 (a0-a1)\n        for (let i = 0; i < 2; i++) {\n          classifyPoint(i === 0 ? b0 : b1, a0, a1); //find position of this endpoints relatively to edge1\n\n          if (classifyResult.loc == IntersectionLocationType.ORIGIN) {\n            const point = i === 0 ? b0 : b1;\n            return {\n              x: point.x,\n              y: point.y,\n              t: classifyResult.t\n            };\n          } else if (classifyResult.loc == IntersectionLocationType.BETWEEN) {\n            const x = +(x1 + classifyResult.t * (x2 - x1)).toPrecision(10);\n            const y = +(y1 + classifyResult.t * (y2 - y1)).toPrecision(10);\n            return {\n              x: x,\n              y: y,\n              t: classifyResult.t\n            };\n          }\n        }\n\n        return null;\n      } else {\n        //3. edges intersect\n        for (let i = 0; i < 2; i++) {\n          classifyPoint(i === 0 ? b0 : b1, a0, a1);\n\n          if (classifyResult.loc == IntersectionLocationType.ORIGIN) {\n            const point = i === 0 ? b0 : b1;\n            return {\n              x: point.x,\n              y: point.y,\n              t: classifyResult.t\n            };\n          }\n        }\n\n        const x = +(x1 + t1 * (x2 - x1)).toPrecision(10);\n        const y = +(y1 + t1 * (y2 - y1)).toPrecision(10);\n        return {\n          x: x,\n          y: y,\n          t: t1\n        };\n      }\n    }\n\n    function classifyPoint(p, edgeStart, edgeEnd) {\n      const ax = edgeEnd.x - edgeStart.x;\n      const ay = edgeEnd.y - edgeStart.y;\n      const bx = p.x - edgeStart.x;\n      const by = p.y - edgeStart.y;\n      const sa = ax * by - bx * ay;\n\n      if (p.x === edgeStart.x && p.y === edgeStart.y) {\n        classifyResult.loc = IntersectionLocationType.ORIGIN;\n        classifyResult.t = 0;\n        return;\n      }\n\n      if (p.x === edgeEnd.x && p.y === edgeEnd.y) {\n        classifyResult.loc = IntersectionLocationType.DESTINATION;\n        classifyResult.t = 1;\n        return;\n      }\n\n      if (sa < -Number.EPSILON) {\n        classifyResult.loc = IntersectionLocationType.LEFT;\n        return;\n      }\n\n      if (sa > Number.EPSILON) {\n        classifyResult.loc = IntersectionLocationType.RIGHT;\n        return;\n      }\n\n      if (ax * bx < 0 || ay * by < 0) {\n        classifyResult.loc = IntersectionLocationType.BEHIND;\n        return;\n      }\n\n      if (Math.sqrt(ax * ax + ay * ay) < Math.sqrt(bx * bx + by * by)) {\n        classifyResult.loc = IntersectionLocationType.BEYOND;\n        return;\n      }\n\n      let t;\n\n      if (ax !== 0) {\n        t = bx / ax;\n      } else {\n        t = by / ay;\n      }\n\n      classifyResult.loc = IntersectionLocationType.BETWEEN;\n      classifyResult.t = t;\n    }\n\n    function getIntersections(path1, path2) {\n      const intersectionsRaw = [];\n      const intersections = [];\n\n      for (let index = 1; index < path1.length; index++) {\n        const path1EdgeStart = path1[index - 1];\n        const path1EdgeEnd = path1[index];\n\n        for (let index2 = 1; index2 < path2.length; index2++) {\n          const path2EdgeStart = path2[index2 - 1];\n          const path2EdgeEnd = path2[index2];\n          const intersection = findEdgeIntersection(path1EdgeStart, path1EdgeEnd, path2EdgeStart, path2EdgeEnd);\n\n          if (intersection !== null && intersectionsRaw.find(i => i.t <= intersection.t + Number.EPSILON && i.t >= intersection.t - Number.EPSILON) === undefined) {\n            intersectionsRaw.push(intersection);\n            intersections.push(new Vector2(intersection.x, intersection.y));\n          }\n        }\n      }\n\n      return intersections;\n    }\n\n    function getScanlineIntersections(scanline, boundingBox, paths) {\n      const center = new Vector2();\n      boundingBox.getCenter(center);\n      const allIntersections = [];\n      paths.forEach(path => {\n        // check if the center of the bounding box is in the bounding box of the paths.\n        // this is a pruning method to limit the search of intersections in paths that can't envelop of the current path.\n        // if a path envelops another path. The center of that oter path, has to be inside the bounding box of the enveloping path.\n        if (path.boundingBox.containsPoint(center)) {\n          const intersections = getIntersections(scanline, path.points);\n          intersections.forEach(p => {\n            allIntersections.push({\n              identifier: path.identifier,\n              isCW: path.isCW,\n              point: p\n            });\n          });\n        }\n      });\n      allIntersections.sort((i1, i2) => {\n        return i1.point.x - i2.point.x;\n      });\n      return allIntersections;\n    }\n\n    function isHoleTo(simplePath, allPaths, scanlineMinX, scanlineMaxX, _fillRule) {\n      if (_fillRule === null || _fillRule === undefined || _fillRule === '') {\n        _fillRule = 'nonzero';\n      }\n\n      const centerBoundingBox = new Vector2();\n      simplePath.boundingBox.getCenter(centerBoundingBox);\n      const scanline = [new Vector2(scanlineMinX, centerBoundingBox.y), new Vector2(scanlineMaxX, centerBoundingBox.y)];\n      const scanlineIntersections = getScanlineIntersections(scanline, simplePath.boundingBox, allPaths);\n      scanlineIntersections.sort((i1, i2) => {\n        return i1.point.x - i2.point.x;\n      });\n      const baseIntersections = [];\n      const otherIntersections = [];\n      scanlineIntersections.forEach(i => {\n        if (i.identifier === simplePath.identifier) {\n          baseIntersections.push(i);\n        } else {\n          otherIntersections.push(i);\n        }\n      });\n      const firstXOfPath = baseIntersections[0].point.x; // build up the path hierarchy\n\n      const stack = [];\n      let i = 0;\n\n      while (i < otherIntersections.length && otherIntersections[i].point.x < firstXOfPath) {\n        if (stack.length > 0 && stack[stack.length - 1] === otherIntersections[i].identifier) {\n          stack.pop();\n        } else {\n          stack.push(otherIntersections[i].identifier);\n        }\n\n        i++;\n      }\n\n      stack.push(simplePath.identifier);\n\n      if (_fillRule === 'evenodd') {\n        const isHole = stack.length % 2 === 0 ? true : false;\n        const isHoleFor = stack[stack.length - 2];\n        return {\n          identifier: simplePath.identifier,\n          isHole: isHole,\n          for: isHoleFor\n        };\n      } else if (_fillRule === 'nonzero') {\n        // check if path is a hole by counting the amount of paths with alternating rotations it has to cross.\n        let isHole = true;\n        let isHoleFor = null;\n        let lastCWValue = null;\n\n        for (let i = 0; i < stack.length; i++) {\n          const identifier = stack[i];\n\n          if (isHole) {\n            lastCWValue = allPaths[identifier].isCW;\n            isHole = false;\n            isHoleFor = identifier;\n          } else if (lastCWValue !== allPaths[identifier].isCW) {\n            lastCWValue = allPaths[identifier].isCW;\n            isHole = true;\n          }\n        }\n\n        return {\n          identifier: simplePath.identifier,\n          isHole: isHole,\n          for: isHoleFor\n        };\n      } else {\n        console.warn('fill-rule: \"' + _fillRule + '\" is currently not implemented.');\n      }\n    } // check for self intersecting paths\n    // TODO\n    // check intersecting paths\n    // TODO\n    // prepare paths for hole detection\n\n\n    let identifier = 0;\n    let scanlineMinX = BIGNUMBER;\n    let scanlineMaxX = -BIGNUMBER;\n    let simplePaths = shapePath.subPaths.map(p => {\n      const points = p.getPoints();\n      let maxY = -BIGNUMBER;\n      let minY = BIGNUMBER;\n      let maxX = -BIGNUMBER;\n      let minX = BIGNUMBER; //points.forEach(p => p.y *= -1);\n\n      for (let i = 0; i < points.length; i++) {\n        const p = points[i];\n\n        if (p.y > maxY) {\n          maxY = p.y;\n        }\n\n        if (p.y < minY) {\n          minY = p.y;\n        }\n\n        if (p.x > maxX) {\n          maxX = p.x;\n        }\n\n        if (p.x < minX) {\n          minX = p.x;\n        }\n      } //\n\n\n      if (scanlineMaxX <= maxX) {\n        scanlineMaxX = maxX + 1;\n      }\n\n      if (scanlineMinX >= minX) {\n        scanlineMinX = minX - 1;\n      }\n\n      return {\n        points: points,\n        isCW: ShapeUtils.isClockWise(points),\n        identifier: identifier++,\n        boundingBox: new Box2(new Vector2(minX, minY), new Vector2(maxX, maxY))\n      };\n    });\n    simplePaths = simplePaths.filter(sp => sp.points.length > 0); // check if path is solid or a hole\n\n    const isAHole = simplePaths.map(p => isHoleTo(p, simplePaths, scanlineMinX, scanlineMaxX, shapePath.userData.style.fillRule));\n    const shapesToReturn = [];\n    simplePaths.forEach(p => {\n      const amIAHole = isAHole[p.identifier];\n\n      if (!amIAHole.isHole) {\n        const shape = new Shape(p.points);\n        const holes = isAHole.filter(h => h.isHole && h.for === p.identifier);\n        holes.forEach(h => {\n          const path = simplePaths[h.identifier];\n          shape.holes.push(new Path(path.points));\n        });\n        shapesToReturn.push(shape);\n      }\n    });\n    return shapesToReturn;\n  }\n\n  static getStrokeStyle(width, color, lineJoin, lineCap, miterLimit) {\n    // Param width: Stroke width\n    // Param color: As returned by THREE.Color.getStyle()\n    // Param lineJoin: One of \"round\", \"bevel\", \"miter\" or \"miter-limit\"\n    // Param lineCap: One of \"round\", \"square\" or \"butt\"\n    // Param miterLimit: Maximum join length, in multiples of the \"width\" parameter (join is truncated if it exceeds that distance)\n    // Returns style object\n    width = width !== undefined ? width : 1;\n    color = color !== undefined ? color : '#000';\n    lineJoin = lineJoin !== undefined ? lineJoin : 'miter';\n    lineCap = lineCap !== undefined ? lineCap : 'butt';\n    miterLimit = miterLimit !== undefined ? miterLimit : 4;\n    return {\n      strokeColor: color,\n      strokeWidth: width,\n      strokeLineJoin: lineJoin,\n      strokeLineCap: lineCap,\n      strokeMiterLimit: miterLimit\n    };\n  }\n\n  static pointsToStroke(points, style, arcDivisions, minDistance) {\n    // Generates a stroke with some witdh around the given path.\n    // The path can be open or closed (last point equals to first point)\n    // Param points: Array of Vector2D (the path). Minimum 2 points.\n    // Param style: Object with SVG properties as returned by SVGLoader.getStrokeStyle(), or SVGLoader.parse() in the path.userData.style object\n    // Params arcDivisions: Arc divisions for round joins and endcaps. (Optional)\n    // Param minDistance: Points closer to this distance will be merged. (Optional)\n    // Returns BufferGeometry with stroke triangles (In plane z = 0). UV coordinates are generated ('u' along path. 'v' across it, from left to right)\n    const vertices = [];\n    const normals = [];\n    const uvs = [];\n\n    if (SVGLoader.pointsToStrokeWithBuffers(points, style, arcDivisions, minDistance, vertices, normals, uvs) === 0) {\n      return null;\n    }\n\n    const geometry = new BufferGeometry();\n    geometry.setAttribute('position', new Float32BufferAttribute(vertices, 3));\n    geometry.setAttribute('normal', new Float32BufferAttribute(normals, 3));\n    geometry.setAttribute('uv', new Float32BufferAttribute(uvs, 2));\n    return geometry;\n  }\n\n  static pointsToStrokeWithBuffers(points, style, arcDivisions, minDistance, vertices, normals, uvs, vertexOffset) {\n    // This function can be called to update existing arrays or buffers.\n    // Accepts same parameters as pointsToStroke, plus the buffers and optional offset.\n    // Param vertexOffset: Offset vertices to start writing in the buffers (3 elements/vertex for vertices and normals, and 2 elements/vertex for uvs)\n    // Returns number of written vertices / normals / uvs pairs\n    // if 'vertices' parameter is undefined no triangles will be generated, but the returned vertices count will still be valid (useful to preallocate the buffers)\n    // 'normals' and 'uvs' buffers are optional\n    const tempV2_1 = new Vector2();\n    const tempV2_2 = new Vector2();\n    const tempV2_3 = new Vector2();\n    const tempV2_4 = new Vector2();\n    const tempV2_5 = new Vector2();\n    const tempV2_6 = new Vector2();\n    const tempV2_7 = new Vector2();\n    const lastPointL = new Vector2();\n    const lastPointR = new Vector2();\n    const point0L = new Vector2();\n    const point0R = new Vector2();\n    const currentPointL = new Vector2();\n    const currentPointR = new Vector2();\n    const nextPointL = new Vector2();\n    const nextPointR = new Vector2();\n    const innerPoint = new Vector2();\n    const outerPoint = new Vector2();\n    arcDivisions = arcDivisions !== undefined ? arcDivisions : 12;\n    minDistance = minDistance !== undefined ? minDistance : 0.001;\n    vertexOffset = vertexOffset !== undefined ? vertexOffset : 0; // First ensure there are no duplicated points\n\n    points = removeDuplicatedPoints(points);\n    const numPoints = points.length;\n    if (numPoints < 2) return 0;\n    const isClosed = points[0].equals(points[numPoints - 1]);\n    let currentPoint;\n    let previousPoint = points[0];\n    let nextPoint;\n    const strokeWidth2 = style.strokeWidth / 2;\n    const deltaU = 1 / (numPoints - 1);\n    let u0 = 0,\n        u1;\n    let innerSideModified;\n    let joinIsOnLeftSide;\n    let isMiter;\n    let initialJoinIsOnLeftSide = false;\n    let numVertices = 0;\n    let currentCoordinate = vertexOffset * 3;\n    let currentCoordinateUV = vertexOffset * 2; // Get initial left and right stroke points\n\n    getNormal(points[0], points[1], tempV2_1).multiplyScalar(strokeWidth2);\n    lastPointL.copy(points[0]).sub(tempV2_1);\n    lastPointR.copy(points[0]).add(tempV2_1);\n    point0L.copy(lastPointL);\n    point0R.copy(lastPointR);\n\n    for (let iPoint = 1; iPoint < numPoints; iPoint++) {\n      currentPoint = points[iPoint]; // Get next point\n\n      if (iPoint === numPoints - 1) {\n        if (isClosed) {\n          // Skip duplicated initial point\n          nextPoint = points[1];\n        } else {\n          nextPoint = undefined;\n        }\n      } else {\n        nextPoint = points[iPoint + 1];\n      } // Normal of previous segment in tempV2_1\n\n\n      const normal1 = tempV2_1;\n      getNormal(previousPoint, currentPoint, normal1);\n      tempV2_3.copy(normal1).multiplyScalar(strokeWidth2);\n      currentPointL.copy(currentPoint).sub(tempV2_3);\n      currentPointR.copy(currentPoint).add(tempV2_3);\n      u1 = u0 + deltaU;\n      innerSideModified = false;\n\n      if (nextPoint !== undefined) {\n        // Normal of next segment in tempV2_2\n        getNormal(currentPoint, nextPoint, tempV2_2);\n        tempV2_3.copy(tempV2_2).multiplyScalar(strokeWidth2);\n        nextPointL.copy(currentPoint).sub(tempV2_3);\n        nextPointR.copy(currentPoint).add(tempV2_3);\n        joinIsOnLeftSide = true;\n        tempV2_3.subVectors(nextPoint, previousPoint);\n\n        if (normal1.dot(tempV2_3) < 0) {\n          joinIsOnLeftSide = false;\n        }\n\n        if (iPoint === 1) initialJoinIsOnLeftSide = joinIsOnLeftSide;\n        tempV2_3.subVectors(nextPoint, currentPoint);\n        tempV2_3.normalize();\n        const dot = Math.abs(normal1.dot(tempV2_3)); // If path is straight, don't create join\n\n        if (dot !== 0) {\n          // Compute inner and outer segment intersections\n          const miterSide = strokeWidth2 / dot;\n          tempV2_3.multiplyScalar(-miterSide);\n          tempV2_4.subVectors(currentPoint, previousPoint);\n          tempV2_5.copy(tempV2_4).setLength(miterSide).add(tempV2_3);\n          innerPoint.copy(tempV2_5).negate();\n          const miterLength2 = tempV2_5.length();\n          const segmentLengthPrev = tempV2_4.length();\n          tempV2_4.divideScalar(segmentLengthPrev);\n          tempV2_6.subVectors(nextPoint, currentPoint);\n          const segmentLengthNext = tempV2_6.length();\n          tempV2_6.divideScalar(segmentLengthNext); // Check that previous and next segments doesn't overlap with the innerPoint of intersection\n\n          if (tempV2_4.dot(innerPoint) < segmentLengthPrev && tempV2_6.dot(innerPoint) < segmentLengthNext) {\n            innerSideModified = true;\n          }\n\n          outerPoint.copy(tempV2_5).add(currentPoint);\n          innerPoint.add(currentPoint);\n          isMiter = false;\n\n          if (innerSideModified) {\n            if (joinIsOnLeftSide) {\n              nextPointR.copy(innerPoint);\n              currentPointR.copy(innerPoint);\n            } else {\n              nextPointL.copy(innerPoint);\n              currentPointL.copy(innerPoint);\n            }\n          } else {\n            // The segment triangles are generated here if there was overlapping\n            makeSegmentTriangles();\n          }\n\n          switch (style.strokeLineJoin) {\n            case 'bevel':\n              makeSegmentWithBevelJoin(joinIsOnLeftSide, innerSideModified, u1);\n              break;\n\n            case 'round':\n              // Segment triangles\n              createSegmentTrianglesWithMiddleSection(joinIsOnLeftSide, innerSideModified); // Join triangles\n\n              if (joinIsOnLeftSide) {\n                makeCircularSector(currentPoint, currentPointL, nextPointL, u1, 0);\n              } else {\n                makeCircularSector(currentPoint, nextPointR, currentPointR, u1, 1);\n              }\n\n              break;\n\n            case 'miter':\n            case 'miter-clip':\n            default:\n              const miterFraction = strokeWidth2 * style.strokeMiterLimit / miterLength2;\n\n              if (miterFraction < 1) {\n                // The join miter length exceeds the miter limit\n                if (style.strokeLineJoin !== 'miter-clip') {\n                  makeSegmentWithBevelJoin(joinIsOnLeftSide, innerSideModified, u1);\n                  break;\n                } else {\n                  // Segment triangles\n                  createSegmentTrianglesWithMiddleSection(joinIsOnLeftSide, innerSideModified); // Miter-clip join triangles\n\n                  if (joinIsOnLeftSide) {\n                    tempV2_6.subVectors(outerPoint, currentPointL).multiplyScalar(miterFraction).add(currentPointL);\n                    tempV2_7.subVectors(outerPoint, nextPointL).multiplyScalar(miterFraction).add(nextPointL);\n                    addVertex(currentPointL, u1, 0);\n                    addVertex(tempV2_6, u1, 0);\n                    addVertex(currentPoint, u1, 0.5);\n                    addVertex(currentPoint, u1, 0.5);\n                    addVertex(tempV2_6, u1, 0);\n                    addVertex(tempV2_7, u1, 0);\n                    addVertex(currentPoint, u1, 0.5);\n                    addVertex(tempV2_7, u1, 0);\n                    addVertex(nextPointL, u1, 0);\n                  } else {\n                    tempV2_6.subVectors(outerPoint, currentPointR).multiplyScalar(miterFraction).add(currentPointR);\n                    tempV2_7.subVectors(outerPoint, nextPointR).multiplyScalar(miterFraction).add(nextPointR);\n                    addVertex(currentPointR, u1, 1);\n                    addVertex(tempV2_6, u1, 1);\n                    addVertex(currentPoint, u1, 0.5);\n                    addVertex(currentPoint, u1, 0.5);\n                    addVertex(tempV2_6, u1, 1);\n                    addVertex(tempV2_7, u1, 1);\n                    addVertex(currentPoint, u1, 0.5);\n                    addVertex(tempV2_7, u1, 1);\n                    addVertex(nextPointR, u1, 1);\n                  }\n                }\n              } else {\n                // Miter join segment triangles\n                if (innerSideModified) {\n                  // Optimized segment + join triangles\n                  if (joinIsOnLeftSide) {\n                    addVertex(lastPointR, u0, 1);\n                    addVertex(lastPointL, u0, 0);\n                    addVertex(outerPoint, u1, 0);\n                    addVertex(lastPointR, u0, 1);\n                    addVertex(outerPoint, u1, 0);\n                    addVertex(innerPoint, u1, 1);\n                  } else {\n                    addVertex(lastPointR, u0, 1);\n                    addVertex(lastPointL, u0, 0);\n                    addVertex(outerPoint, u1, 1);\n                    addVertex(lastPointL, u0, 0);\n                    addVertex(innerPoint, u1, 0);\n                    addVertex(outerPoint, u1, 1);\n                  }\n\n                  if (joinIsOnLeftSide) {\n                    nextPointL.copy(outerPoint);\n                  } else {\n                    nextPointR.copy(outerPoint);\n                  }\n                } else {\n                  // Add extra miter join triangles\n                  if (joinIsOnLeftSide) {\n                    addVertex(currentPointL, u1, 0);\n                    addVertex(outerPoint, u1, 0);\n                    addVertex(currentPoint, u1, 0.5);\n                    addVertex(currentPoint, u1, 0.5);\n                    addVertex(outerPoint, u1, 0);\n                    addVertex(nextPointL, u1, 0);\n                  } else {\n                    addVertex(currentPointR, u1, 1);\n                    addVertex(outerPoint, u1, 1);\n                    addVertex(currentPoint, u1, 0.5);\n                    addVertex(currentPoint, u1, 0.5);\n                    addVertex(outerPoint, u1, 1);\n                    addVertex(nextPointR, u1, 1);\n                  }\n                }\n\n                isMiter = true;\n              }\n\n              break;\n          }\n        } else {\n          // The segment triangles are generated here when two consecutive points are collinear\n          makeSegmentTriangles();\n        }\n      } else {\n        // The segment triangles are generated here if it is the ending segment\n        makeSegmentTriangles();\n      }\n\n      if (!isClosed && iPoint === numPoints - 1) {\n        // Start line endcap\n        addCapGeometry(points[0], point0L, point0R, joinIsOnLeftSide, true, u0);\n      } // Increment loop variables\n\n\n      u0 = u1;\n      previousPoint = currentPoint;\n      lastPointL.copy(nextPointL);\n      lastPointR.copy(nextPointR);\n    }\n\n    if (!isClosed) {\n      // Ending line endcap\n      addCapGeometry(currentPoint, currentPointL, currentPointR, joinIsOnLeftSide, false, u1);\n    } else if (innerSideModified && vertices) {\n      // Modify path first segment vertices to adjust to the segments inner and outer intersections\n      let lastOuter = outerPoint;\n      let lastInner = innerPoint;\n\n      if (initialJoinIsOnLeftSide !== joinIsOnLeftSide) {\n        lastOuter = innerPoint;\n        lastInner = outerPoint;\n      }\n\n      if (joinIsOnLeftSide) {\n        if (isMiter || initialJoinIsOnLeftSide) {\n          lastInner.toArray(vertices, 0 * 3);\n          lastInner.toArray(vertices, 3 * 3);\n\n          if (isMiter) {\n            lastOuter.toArray(vertices, 1 * 3);\n          }\n        }\n      } else {\n        if (isMiter || !initialJoinIsOnLeftSide) {\n          lastInner.toArray(vertices, 1 * 3);\n          lastInner.toArray(vertices, 3 * 3);\n\n          if (isMiter) {\n            lastOuter.toArray(vertices, 0 * 3);\n          }\n        }\n      }\n    }\n\n    return numVertices; // -- End of algorithm\n    // -- Functions\n\n    function getNormal(p1, p2, result) {\n      result.subVectors(p2, p1);\n      return result.set(-result.y, result.x).normalize();\n    }\n\n    function addVertex(position, u, v) {\n      if (vertices) {\n        vertices[currentCoordinate] = position.x;\n        vertices[currentCoordinate + 1] = position.y;\n        vertices[currentCoordinate + 2] = 0;\n\n        if (normals) {\n          normals[currentCoordinate] = 0;\n          normals[currentCoordinate + 1] = 0;\n          normals[currentCoordinate + 2] = 1;\n        }\n\n        currentCoordinate += 3;\n\n        if (uvs) {\n          uvs[currentCoordinateUV] = u;\n          uvs[currentCoordinateUV + 1] = v;\n          currentCoordinateUV += 2;\n        }\n      }\n\n      numVertices += 3;\n    }\n\n    function makeCircularSector(center, p1, p2, u, v) {\n      // param p1, p2: Points in the circle arc.\n      // p1 and p2 are in clockwise direction.\n      tempV2_1.copy(p1).sub(center).normalize();\n      tempV2_2.copy(p2).sub(center).normalize();\n      let angle = Math.PI;\n      const dot = tempV2_1.dot(tempV2_2);\n      if (Math.abs(dot) < 1) angle = Math.abs(Math.acos(dot));\n      angle /= arcDivisions;\n      tempV2_3.copy(p1);\n\n      for (let i = 0, il = arcDivisions - 1; i < il; i++) {\n        tempV2_4.copy(tempV2_3).rotateAround(center, angle);\n        addVertex(tempV2_3, u, v);\n        addVertex(tempV2_4, u, v);\n        addVertex(center, u, 0.5);\n        tempV2_3.copy(tempV2_4);\n      }\n\n      addVertex(tempV2_4, u, v);\n      addVertex(p2, u, v);\n      addVertex(center, u, 0.5);\n    }\n\n    function makeSegmentTriangles() {\n      addVertex(lastPointR, u0, 1);\n      addVertex(lastPointL, u0, 0);\n      addVertex(currentPointL, u1, 0);\n      addVertex(lastPointR, u0, 1);\n      addVertex(currentPointL, u1, 1);\n      addVertex(currentPointR, u1, 0);\n    }\n\n    function makeSegmentWithBevelJoin(joinIsOnLeftSide, innerSideModified, u) {\n      if (innerSideModified) {\n        // Optimized segment + bevel triangles\n        if (joinIsOnLeftSide) {\n          // Path segments triangles\n          addVertex(lastPointR, u0, 1);\n          addVertex(lastPointL, u0, 0);\n          addVertex(currentPointL, u1, 0);\n          addVertex(lastPointR, u0, 1);\n          addVertex(currentPointL, u1, 0);\n          addVertex(innerPoint, u1, 1); // Bevel join triangle\n\n          addVertex(currentPointL, u, 0);\n          addVertex(nextPointL, u, 0);\n          addVertex(innerPoint, u, 0.5);\n        } else {\n          // Path segments triangles\n          addVertex(lastPointR, u0, 1);\n          addVertex(lastPointL, u0, 0);\n          addVertex(currentPointR, u1, 1);\n          addVertex(lastPointL, u0, 0);\n          addVertex(innerPoint, u1, 0);\n          addVertex(currentPointR, u1, 1); // Bevel join triangle\n\n          addVertex(currentPointR, u, 1);\n          addVertex(nextPointR, u, 0);\n          addVertex(innerPoint, u, 0.5);\n        }\n      } else {\n        // Bevel join triangle. The segment triangles are done in the main loop\n        if (joinIsOnLeftSide) {\n          addVertex(currentPointL, u, 0);\n          addVertex(nextPointL, u, 0);\n          addVertex(currentPoint, u, 0.5);\n        } else {\n          addVertex(currentPointR, u, 1);\n          addVertex(nextPointR, u, 0);\n          addVertex(currentPoint, u, 0.5);\n        }\n      }\n    }\n\n    function createSegmentTrianglesWithMiddleSection(joinIsOnLeftSide, innerSideModified) {\n      if (innerSideModified) {\n        if (joinIsOnLeftSide) {\n          addVertex(lastPointR, u0, 1);\n          addVertex(lastPointL, u0, 0);\n          addVertex(currentPointL, u1, 0);\n          addVertex(lastPointR, u0, 1);\n          addVertex(currentPointL, u1, 0);\n          addVertex(innerPoint, u1, 1);\n          addVertex(currentPointL, u0, 0);\n          addVertex(currentPoint, u1, 0.5);\n          addVertex(innerPoint, u1, 1);\n          addVertex(currentPoint, u1, 0.5);\n          addVertex(nextPointL, u0, 0);\n          addVertex(innerPoint, u1, 1);\n        } else {\n          addVertex(lastPointR, u0, 1);\n          addVertex(lastPointL, u0, 0);\n          addVertex(currentPointR, u1, 1);\n          addVertex(lastPointL, u0, 0);\n          addVertex(innerPoint, u1, 0);\n          addVertex(currentPointR, u1, 1);\n          addVertex(currentPointR, u0, 1);\n          addVertex(innerPoint, u1, 0);\n          addVertex(currentPoint, u1, 0.5);\n          addVertex(currentPoint, u1, 0.5);\n          addVertex(innerPoint, u1, 0);\n          addVertex(nextPointR, u0, 1);\n        }\n      }\n    }\n\n    function addCapGeometry(center, p1, p2, joinIsOnLeftSide, start, u) {\n      // param center: End point of the path\n      // param p1, p2: Left and right cap points\n      switch (style.strokeLineCap) {\n        case 'round':\n          if (start) {\n            makeCircularSector(center, p2, p1, u, 0.5);\n          } else {\n            makeCircularSector(center, p1, p2, u, 0.5);\n          }\n\n          break;\n\n        case 'square':\n          if (start) {\n            tempV2_1.subVectors(p1, center);\n            tempV2_2.set(tempV2_1.y, -tempV2_1.x);\n            tempV2_3.addVectors(tempV2_1, tempV2_2).add(center);\n            tempV2_4.subVectors(tempV2_2, tempV2_1).add(center); // Modify already existing vertices\n\n            if (joinIsOnLeftSide) {\n              tempV2_3.toArray(vertices, 1 * 3);\n              tempV2_4.toArray(vertices, 0 * 3);\n              tempV2_4.toArray(vertices, 3 * 3);\n            } else {\n              tempV2_3.toArray(vertices, 1 * 3);\n              tempV2_3.toArray(vertices, 3 * 3);\n              tempV2_4.toArray(vertices, 0 * 3);\n            }\n          } else {\n            tempV2_1.subVectors(p2, center);\n            tempV2_2.set(tempV2_1.y, -tempV2_1.x);\n            tempV2_3.addVectors(tempV2_1, tempV2_2).add(center);\n            tempV2_4.subVectors(tempV2_2, tempV2_1).add(center);\n            const vl = vertices.length; // Modify already existing vertices\n\n            if (joinIsOnLeftSide) {\n              tempV2_3.toArray(vertices, vl - 1 * 3);\n              tempV2_4.toArray(vertices, vl - 2 * 3);\n              tempV2_4.toArray(vertices, vl - 4 * 3);\n            } else {\n              tempV2_3.toArray(vertices, vl - 2 * 3);\n              tempV2_4.toArray(vertices, vl - 1 * 3);\n              tempV2_4.toArray(vertices, vl - 4 * 3);\n            }\n          }\n\n          break;\n      }\n    }\n\n    function removeDuplicatedPoints(points) {\n      // Creates a new array if necessary with duplicated points removed.\n      // This does not remove duplicated initial and ending points of a closed path.\n      let dupPoints = false;\n\n      for (let i = 1, n = points.length - 1; i < n; i++) {\n        if (points[i].distanceTo(points[i + 1]) < minDistance) {\n          dupPoints = true;\n          break;\n        }\n      }\n\n      if (!dupPoints) return points;\n      const newPoints = [];\n      newPoints.push(points[0]);\n\n      for (let i = 1, n = points.length - 1; i < n; i++) {\n        if (points[i].distanceTo(points[i + 1]) >= minDistance) {\n          newPoints.push(points[i]);\n        }\n      }\n\n      newPoints.push(points[points.length - 1]);\n      return newPoints;\n    }\n  }\n\n}\n\nexport { SVGLoader };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}