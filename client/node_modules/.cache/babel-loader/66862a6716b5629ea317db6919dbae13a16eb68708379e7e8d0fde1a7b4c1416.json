{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n    return extendStatics(d, b);\n  };\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.collectMethods = exports.DslMethodsCollectorVisitor = exports.getProductionDslName = exports.isBranchingProd = exports.isOptionalProd = exports.isSequenceProd = void 0;\nvar utils_1 = require(\"@chevrotain/utils\");\nvar gast_public_1 = require(\"./gast_public\");\nvar gast_visitor_public_1 = require(\"./gast_visitor_public\");\nfunction isSequenceProd(prod) {\n  return prod instanceof gast_public_1.Alternative || prod instanceof gast_public_1.Option || prod instanceof gast_public_1.Repetition || prod instanceof gast_public_1.RepetitionMandatory || prod instanceof gast_public_1.RepetitionMandatoryWithSeparator || prod instanceof gast_public_1.RepetitionWithSeparator || prod instanceof gast_public_1.Terminal || prod instanceof gast_public_1.Rule;\n}\nexports.isSequenceProd = isSequenceProd;\nfunction isOptionalProd(prod, alreadyVisited) {\n  if (alreadyVisited === void 0) {\n    alreadyVisited = [];\n  }\n  var isDirectlyOptional = prod instanceof gast_public_1.Option || prod instanceof gast_public_1.Repetition || prod instanceof gast_public_1.RepetitionWithSeparator;\n  if (isDirectlyOptional) {\n    return true;\n  }\n  // note that this can cause infinite loop if one optional empty TOP production has a cyclic dependency with another\n  // empty optional top rule\n  // may be indirectly optional ((A?B?C?) | (D?E?F?))\n  if (prod instanceof gast_public_1.Alternation) {\n    // for OR its enough for just one of the alternatives to be optional\n    return utils_1.some(prod.definition, function (subProd) {\n      return isOptionalProd(subProd, alreadyVisited);\n    });\n  } else if (prod instanceof gast_public_1.NonTerminal && utils_1.contains(alreadyVisited, prod)) {\n    // avoiding stack overflow due to infinite recursion\n    return false;\n  } else if (prod instanceof gast_public_1.AbstractProduction) {\n    if (prod instanceof gast_public_1.NonTerminal) {\n      alreadyVisited.push(prod);\n    }\n    return utils_1.every(prod.definition, function (subProd) {\n      return isOptionalProd(subProd, alreadyVisited);\n    });\n  } else {\n    return false;\n  }\n}\nexports.isOptionalProd = isOptionalProd;\nfunction isBranchingProd(prod) {\n  return prod instanceof gast_public_1.Alternation;\n}\nexports.isBranchingProd = isBranchingProd;\nfunction getProductionDslName(prod) {\n  /* istanbul ignore else */\n  if (prod instanceof gast_public_1.NonTerminal) {\n    return \"SUBRULE\";\n  } else if (prod instanceof gast_public_1.Option) {\n    return \"OPTION\";\n  } else if (prod instanceof gast_public_1.Alternation) {\n    return \"OR\";\n  } else if (prod instanceof gast_public_1.RepetitionMandatory) {\n    return \"AT_LEAST_ONE\";\n  } else if (prod instanceof gast_public_1.RepetitionMandatoryWithSeparator) {\n    return \"AT_LEAST_ONE_SEP\";\n  } else if (prod instanceof gast_public_1.RepetitionWithSeparator) {\n    return \"MANY_SEP\";\n  } else if (prod instanceof gast_public_1.Repetition) {\n    return \"MANY\";\n  } else if (prod instanceof gast_public_1.Terminal) {\n    return \"CONSUME\";\n  } else {\n    throw Error(\"non exhaustive match\");\n  }\n}\nexports.getProductionDslName = getProductionDslName;\nvar DslMethodsCollectorVisitor = /** @class */function (_super) {\n  __extends(DslMethodsCollectorVisitor, _super);\n  function DslMethodsCollectorVisitor() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n    // A minus is never valid in an identifier name\n    _this.separator = \"-\";\n    _this.dslMethods = {\n      option: [],\n      alternation: [],\n      repetition: [],\n      repetitionWithSeparator: [],\n      repetitionMandatory: [],\n      repetitionMandatoryWithSeparator: []\n    };\n    return _this;\n  }\n  DslMethodsCollectorVisitor.prototype.reset = function () {\n    this.dslMethods = {\n      option: [],\n      alternation: [],\n      repetition: [],\n      repetitionWithSeparator: [],\n      repetitionMandatory: [],\n      repetitionMandatoryWithSeparator: []\n    };\n  };\n  DslMethodsCollectorVisitor.prototype.visitTerminal = function (terminal) {\n    var key = terminal.terminalType.name + this.separator + \"Terminal\";\n    if (!utils_1.has(this.dslMethods, key)) {\n      this.dslMethods[key] = [];\n    }\n    this.dslMethods[key].push(terminal);\n  };\n  DslMethodsCollectorVisitor.prototype.visitNonTerminal = function (subrule) {\n    var key = subrule.nonTerminalName + this.separator + \"Terminal\";\n    if (!utils_1.has(this.dslMethods, key)) {\n      this.dslMethods[key] = [];\n    }\n    this.dslMethods[key].push(subrule);\n  };\n  DslMethodsCollectorVisitor.prototype.visitOption = function (option) {\n    this.dslMethods.option.push(option);\n  };\n  DslMethodsCollectorVisitor.prototype.visitRepetitionWithSeparator = function (manySep) {\n    this.dslMethods.repetitionWithSeparator.push(manySep);\n  };\n  DslMethodsCollectorVisitor.prototype.visitRepetitionMandatory = function (atLeastOne) {\n    this.dslMethods.repetitionMandatory.push(atLeastOne);\n  };\n  DslMethodsCollectorVisitor.prototype.visitRepetitionMandatoryWithSeparator = function (atLeastOneSep) {\n    this.dslMethods.repetitionMandatoryWithSeparator.push(atLeastOneSep);\n  };\n  DslMethodsCollectorVisitor.prototype.visitRepetition = function (many) {\n    this.dslMethods.repetition.push(many);\n  };\n  DslMethodsCollectorVisitor.prototype.visitAlternation = function (or) {\n    this.dslMethods.alternation.push(or);\n  };\n  return DslMethodsCollectorVisitor;\n}(gast_visitor_public_1.GAstVisitor);\nexports.DslMethodsCollectorVisitor = DslMethodsCollectorVisitor;\nvar collectorVisitor = new DslMethodsCollectorVisitor();\nfunction collectMethods(rule) {\n  collectorVisitor.reset();\n  rule.accept(collectorVisitor);\n  var dslMethods = collectorVisitor.dslMethods;\n  // avoid uncleaned references\n  collectorVisitor.reset();\n  return dslMethods;\n}\nexports.collectMethods = collectMethods;","map":{"version":3,"names":["utils_1","require","gast_public_1","gast_visitor_public_1","isSequenceProd","prod","Alternative","Option","Repetition","RepetitionMandatory","RepetitionMandatoryWithSeparator","RepetitionWithSeparator","Terminal","Rule","exports","isOptionalProd","alreadyVisited","isDirectlyOptional","Alternation","some","definition","subProd","NonTerminal","contains","AbstractProduction","push","every","isBranchingProd","getProductionDslName","Error","DslMethodsCollectorVisitor","_super","__extends","_this","apply","arguments","separator","dslMethods","option","alternation","repetition","repetitionWithSeparator","repetitionMandatory","repetitionMandatoryWithSeparator","prototype","reset","visitTerminal","terminal","key","terminalType","name","has","visitNonTerminal","subrule","nonTerminalName","visitOption","visitRepetitionWithSeparator","manySep","visitRepetitionMandatory","atLeastOne","visitRepetitionMandatoryWithSeparator","atLeastOneSep","visitRepetition","many","visitAlternation","or","GAstVisitor","collectorVisitor","collectMethods","rule","accept"],"sources":["C:\\Users\\Work\\node_modules\\chevrotain\\src\\parse\\grammar\\gast\\gast.ts"],"sourcesContent":["import { contains, every, has, some } from \"@chevrotain/utils\"\nimport {\n  AbstractProduction,\n  Alternation,\n  Alternative,\n  NonTerminal,\n  Option,\n  Repetition,\n  RepetitionMandatory,\n  RepetitionMandatoryWithSeparator,\n  RepetitionWithSeparator,\n  Rule,\n  Terminal\n} from \"./gast_public\"\nimport { GAstVisitor } from \"./gast_visitor_public\"\nimport { IProduction, IProductionWithOccurrence } from \"@chevrotain/types\"\n\nexport function isSequenceProd(prod: IProduction): boolean {\n  return (\n    prod instanceof Alternative ||\n    prod instanceof Option ||\n    prod instanceof Repetition ||\n    prod instanceof RepetitionMandatory ||\n    prod instanceof RepetitionMandatoryWithSeparator ||\n    prod instanceof RepetitionWithSeparator ||\n    prod instanceof Terminal ||\n    prod instanceof Rule\n  )\n}\n\nexport function isOptionalProd(\n  prod: IProduction,\n  alreadyVisited: NonTerminal[] = []\n): boolean {\n  const isDirectlyOptional =\n    prod instanceof Option ||\n    prod instanceof Repetition ||\n    prod instanceof RepetitionWithSeparator\n  if (isDirectlyOptional) {\n    return true\n  }\n\n  // note that this can cause infinite loop if one optional empty TOP production has a cyclic dependency with another\n  // empty optional top rule\n  // may be indirectly optional ((A?B?C?) | (D?E?F?))\n  if (prod instanceof Alternation) {\n    // for OR its enough for just one of the alternatives to be optional\n    return some((<Alternation>prod).definition, (subProd: IProduction) => {\n      return isOptionalProd(subProd, alreadyVisited)\n    })\n  } else if (prod instanceof NonTerminal && contains(alreadyVisited, prod)) {\n    // avoiding stack overflow due to infinite recursion\n    return false\n  } else if (prod instanceof AbstractProduction) {\n    if (prod instanceof NonTerminal) {\n      alreadyVisited.push(prod)\n    }\n    return every(\n      (<AbstractProduction>prod).definition,\n      (subProd: IProduction) => {\n        return isOptionalProd(subProd, alreadyVisited)\n      }\n    )\n  } else {\n    return false\n  }\n}\n\nexport function isBranchingProd(prod: IProduction): boolean {\n  return prod instanceof Alternation\n}\n\nexport function getProductionDslName(prod: IProductionWithOccurrence): string {\n  /* istanbul ignore else */\n  if (prod instanceof NonTerminal) {\n    return \"SUBRULE\"\n  } else if (prod instanceof Option) {\n    return \"OPTION\"\n  } else if (prod instanceof Alternation) {\n    return \"OR\"\n  } else if (prod instanceof RepetitionMandatory) {\n    return \"AT_LEAST_ONE\"\n  } else if (prod instanceof RepetitionMandatoryWithSeparator) {\n    return \"AT_LEAST_ONE_SEP\"\n  } else if (prod instanceof RepetitionWithSeparator) {\n    return \"MANY_SEP\"\n  } else if (prod instanceof Repetition) {\n    return \"MANY\"\n  } else if (prod instanceof Terminal) {\n    return \"CONSUME\"\n  } else {\n    throw Error(\"non exhaustive match\")\n  }\n}\n\nexport class DslMethodsCollectorVisitor extends GAstVisitor {\n  // A minus is never valid in an identifier name\n  public separator = \"-\"\n  public dslMethods = {\n    option: [],\n    alternation: [],\n    repetition: [],\n    repetitionWithSeparator: [],\n    repetitionMandatory: [],\n    repetitionMandatoryWithSeparator: []\n  }\n\n  reset() {\n    this.dslMethods = {\n      option: [],\n      alternation: [],\n      repetition: [],\n      repetitionWithSeparator: [],\n      repetitionMandatory: [],\n      repetitionMandatoryWithSeparator: []\n    }\n  }\n\n  public visitTerminal(terminal: Terminal): void {\n    const key = terminal.terminalType.name + this.separator + \"Terminal\"\n    if (!has(this.dslMethods, key)) {\n      this.dslMethods[key] = []\n    }\n    this.dslMethods[key].push(terminal)\n  }\n\n  public visitNonTerminal(subrule: NonTerminal): void {\n    const key = subrule.nonTerminalName + this.separator + \"Terminal\"\n    if (!has(this.dslMethods, key)) {\n      this.dslMethods[key] = []\n    }\n    this.dslMethods[key].push(subrule)\n  }\n\n  public visitOption(option: Option): void {\n    this.dslMethods.option.push(option)\n  }\n\n  public visitRepetitionWithSeparator(manySep: RepetitionWithSeparator): void {\n    this.dslMethods.repetitionWithSeparator.push(manySep)\n  }\n\n  public visitRepetitionMandatory(atLeastOne: RepetitionMandatory): void {\n    this.dslMethods.repetitionMandatory.push(atLeastOne)\n  }\n\n  public visitRepetitionMandatoryWithSeparator(\n    atLeastOneSep: RepetitionMandatoryWithSeparator\n  ): void {\n    this.dslMethods.repetitionMandatoryWithSeparator.push(atLeastOneSep)\n  }\n\n  public visitRepetition(many: Repetition): void {\n    this.dslMethods.repetition.push(many)\n  }\n\n  public visitAlternation(or: Alternation): void {\n    this.dslMethods.alternation.push(or)\n  }\n}\n\nconst collectorVisitor = new DslMethodsCollectorVisitor()\nexport function collectMethods(\n  rule: Rule\n): {\n  option: Option[]\n  alternation: Alternation[]\n  repetition: Repetition[]\n  repetitionWithSeparator: RepetitionWithSeparator[]\n  repetitionMandatory: RepetitionMandatory[]\n  repetitionMandatoryWithSeparator: RepetitionMandatoryWithSeparator\n} {\n  collectorVisitor.reset()\n  rule.accept(collectorVisitor)\n  const dslMethods = collectorVisitor.dslMethods\n  // avoid uncleaned references\n  collectorVisitor.reset()\n  return <any>dslMethods\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}