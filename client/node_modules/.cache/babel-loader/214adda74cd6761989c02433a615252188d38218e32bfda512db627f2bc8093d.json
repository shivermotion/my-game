{"ast":null,"code":"import _extends from '@babel/runtime/helpers/esm/extends';\nimport * as React from 'react';\nimport * as THREE from 'three';\nimport { useThree, useFrame } from '@react-three/fiber';\nimport { HorizontalBlurShader, VerticalBlurShader } from 'three-stdlib';\nconst ContactShadows = /*#__PURE__*/React.forwardRef(({\n  opacity = 1,\n  width = 1,\n  height = 1,\n  blur = 1,\n  far = 10,\n  resolution = 256,\n  ...props\n}, ref) => {\n  const scene = useThree(({\n    scene\n  }) => scene);\n  const gl = useThree(({\n    gl\n  }) => gl);\n  const shadowCamera = React.useRef();\n  const [renderTarget, planeGeometry, depthMaterial, blurPlane, horizontalBlurMaterial, verticalBlurMaterial, renderTargetBlur] = React.useMemo(() => {\n    const renderTarget = new THREE.WebGLRenderTarget(resolution, resolution);\n    const renderTargetBlur = new THREE.WebGLRenderTarget(resolution, resolution);\n    renderTargetBlur.texture.generateMipmaps = renderTarget.texture.generateMipmaps = false;\n    const planeGeometry = new THREE.PlaneBufferGeometry(width, height).rotateX(Math.PI / 2);\n    const blurPlane = new THREE.Mesh(planeGeometry);\n    const depthMaterial = new THREE.MeshDepthMaterial();\n    depthMaterial.depthTest = depthMaterial.depthWrite = false;\n    depthMaterial.onBeforeCompile = shader => shader.fragmentShader = shader.fragmentShader.replace('1.0 - fragCoordZ ), opacity );', '0.0 ), ( 1.0 - fragCoordZ ) * 1.0 );');\n    const horizontalBlurMaterial = new THREE.ShaderMaterial(HorizontalBlurShader);\n    const verticalBlurMaterial = new THREE.ShaderMaterial(VerticalBlurShader);\n    verticalBlurMaterial.depthTest = horizontalBlurMaterial.depthTest = false;\n    return [renderTarget, planeGeometry, depthMaterial, blurPlane, horizontalBlurMaterial, verticalBlurMaterial, renderTargetBlur];\n  }, [resolution, width, height]);\n  useFrame(() => {\n    if (shadowCamera.current) {\n      const initialBackground = scene.background;\n      scene.background = null;\n      scene.overrideMaterial = depthMaterial;\n      gl.setRenderTarget(renderTarget);\n      gl.render(scene, shadowCamera.current);\n      scene.overrideMaterial = null;\n      blurPlane.material = horizontalBlurMaterial;\n      blurPlane.material.uniforms.tDiffuse.value = renderTarget.texture;\n      horizontalBlurMaterial.uniforms.h.value = blur / 256;\n      gl.setRenderTarget(renderTargetBlur);\n      gl.render(blurPlane, shadowCamera.current);\n      blurPlane.material = verticalBlurMaterial;\n      blurPlane.material.uniforms.tDiffuse.value = renderTargetBlur.texture;\n      verticalBlurMaterial.uniforms.v.value = blur / 256;\n      gl.setRenderTarget(renderTarget);\n      gl.render(blurPlane, shadowCamera.current);\n      gl.setRenderTarget(null);\n      scene.background = initialBackground;\n    }\n  });\n  return /*#__PURE__*/React.createElement(\"group\", _extends({}, props, {\n    ref: ref\n  }), /*#__PURE__*/React.createElement(\"mesh\", {\n    geometry: planeGeometry,\n    scale: [1, -1, 1],\n    rotation: [-Math.PI / 2, 0, 0]\n  }, /*#__PURE__*/React.createElement(\"meshBasicMaterial\", {\n    map: renderTarget.texture,\n    transparent: true,\n    opacity: opacity\n  })), /*#__PURE__*/React.createElement(\"orthographicCamera\", {\n    ref: shadowCamera,\n    args: [-width / 2, width / 2, height / 2, -height / 2, 0, far]\n  }));\n});\nexport { ContactShadows };","map":{"version":3,"names":["_extends","React","THREE","useThree","useFrame","HorizontalBlurShader","VerticalBlurShader","ContactShadows","forwardRef","opacity","width","height","blur","far","resolution","props","ref","scene","gl","shadowCamera","useRef","renderTarget","planeGeometry","depthMaterial","blurPlane","horizontalBlurMaterial","verticalBlurMaterial","renderTargetBlur","useMemo","WebGLRenderTarget","texture","generateMipmaps","PlaneBufferGeometry","rotateX","Math","PI","Mesh","MeshDepthMaterial","depthTest","depthWrite","onBeforeCompile","shader","fragmentShader","replace","ShaderMaterial","current","initialBackground","background","overrideMaterial","setRenderTarget","render","material","uniforms","tDiffuse","value","h","v","createElement","geometry","scale","rotation","map","transparent","args"],"sources":["C:/Users/Work/node_modules/@react-three/drei/core/ContactShadows.js"],"sourcesContent":["import _extends from '@babel/runtime/helpers/esm/extends';\nimport * as React from 'react';\nimport * as THREE from 'three';\nimport { useThree, useFrame } from '@react-three/fiber';\nimport { HorizontalBlurShader, VerticalBlurShader } from 'three-stdlib';\n\nconst ContactShadows = /*#__PURE__*/React.forwardRef(({\n  opacity = 1,\n  width = 1,\n  height = 1,\n  blur = 1,\n  far = 10,\n  resolution = 256,\n  ...props\n}, ref) => {\n  const scene = useThree(({\n    scene\n  }) => scene);\n  const gl = useThree(({\n    gl\n  }) => gl);\n  const shadowCamera = React.useRef();\n  const [renderTarget, planeGeometry, depthMaterial, blurPlane, horizontalBlurMaterial, verticalBlurMaterial, renderTargetBlur] = React.useMemo(() => {\n    const renderTarget = new THREE.WebGLRenderTarget(resolution, resolution);\n    const renderTargetBlur = new THREE.WebGLRenderTarget(resolution, resolution);\n    renderTargetBlur.texture.generateMipmaps = renderTarget.texture.generateMipmaps = false;\n    const planeGeometry = new THREE.PlaneBufferGeometry(width, height).rotateX(Math.PI / 2);\n    const blurPlane = new THREE.Mesh(planeGeometry);\n    const depthMaterial = new THREE.MeshDepthMaterial();\n    depthMaterial.depthTest = depthMaterial.depthWrite = false;\n\n    depthMaterial.onBeforeCompile = shader => shader.fragmentShader = shader.fragmentShader.replace('1.0 - fragCoordZ ), opacity );', '0.0 ), ( 1.0 - fragCoordZ ) * 1.0 );');\n\n    const horizontalBlurMaterial = new THREE.ShaderMaterial(HorizontalBlurShader);\n    const verticalBlurMaterial = new THREE.ShaderMaterial(VerticalBlurShader);\n    verticalBlurMaterial.depthTest = horizontalBlurMaterial.depthTest = false;\n    return [renderTarget, planeGeometry, depthMaterial, blurPlane, horizontalBlurMaterial, verticalBlurMaterial, renderTargetBlur];\n  }, [resolution, width, height]);\n  useFrame(() => {\n    if (shadowCamera.current) {\n      const initialBackground = scene.background;\n      scene.background = null;\n      scene.overrideMaterial = depthMaterial;\n      gl.setRenderTarget(renderTarget);\n      gl.render(scene, shadowCamera.current);\n      scene.overrideMaterial = null;\n      blurPlane.material = horizontalBlurMaterial;\n      blurPlane.material.uniforms.tDiffuse.value = renderTarget.texture;\n      horizontalBlurMaterial.uniforms.h.value = blur / 256;\n      gl.setRenderTarget(renderTargetBlur);\n      gl.render(blurPlane, shadowCamera.current);\n      blurPlane.material = verticalBlurMaterial;\n      blurPlane.material.uniforms.tDiffuse.value = renderTargetBlur.texture;\n      verticalBlurMaterial.uniforms.v.value = blur / 256;\n      gl.setRenderTarget(renderTarget);\n      gl.render(blurPlane, shadowCamera.current);\n      gl.setRenderTarget(null);\n      scene.background = initialBackground;\n    }\n  });\n  return /*#__PURE__*/React.createElement(\"group\", _extends({}, props, {\n    ref: ref\n  }), /*#__PURE__*/React.createElement(\"mesh\", {\n    geometry: planeGeometry,\n    scale: [1, -1, 1],\n    rotation: [-Math.PI / 2, 0, 0]\n  }, /*#__PURE__*/React.createElement(\"meshBasicMaterial\", {\n    map: renderTarget.texture,\n    transparent: true,\n    opacity: opacity\n  })), /*#__PURE__*/React.createElement(\"orthographicCamera\", {\n    ref: shadowCamera,\n    args: [-width / 2, width / 2, height / 2, -height / 2, 0, far]\n  }));\n});\n\nexport { ContactShadows };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}