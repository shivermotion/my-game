{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Work\\\\repos\\\\my-game\\\\src\\\\scenes\\\\MainMenu\\\\TitleText\\\\TitleText.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TitleText = () => {\n  _s();\n  const text = \"GACHAWORLD\".split('');\n\n  // Define different animations using Tailwind CSS classes\n  const animations = ['animate-bounce',\n  // Bounce animation\n  'animate-pulse',\n  // Pulse animation\n  'animate-spin',\n  // Spin animation\n  'transform transition duration-500 hover:scale-150' // Grow animation\n  // Add more animations as needed\n  ];\n\n  // Create a state for each character to hold its animation class\n  const [charAnimations, setCharAnimations] = useState(new Array(text.length).fill(''));\n  const handleCharClick = index => {\n    // Pick a random animation\n    const randomAnimation = animations[Math.floor(Math.random() * animations.length)];\n\n    // Apply the selected animation to the clicked character\n    setCharAnimations(prevAnimations => {\n      const newAnimations = [...prevAnimations];\n      newAnimations[index] = randomAnimation;\n      return newAnimations;\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"text-4xl\",\n    children: text.map((char, index) => /*#__PURE__*/_jsxDEV(\"span\", {\n      onClick: () => handleCharClick(index),\n      className: `cursor-pointer ${charAnimations[index]}`,\n      children: char\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 31,\n    columnNumber: 5\n  }, this);\n};\n_s(TitleText, \"0UClFpLfeYdTD4TCNevwLMY1mu8=\");\n_c = TitleText;\nexport default TitleText;\nvar _c;\n$RefreshReg$(_c, \"TitleText\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","TitleText","_s","text","split","animations","charAnimations","setCharAnimations","Array","length","fill","handleCharClick","index","randomAnimation","Math","floor","random","prevAnimations","newAnimations","className","children","map","char","onClick","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Work/repos/my-game/src/scenes/MainMenu/TitleText/TitleText.tsx"],"sourcesContent":["import React, { useState } from 'react';\r\n\r\nconst TitleText = () => {\r\n  const text = \"GACHAWORLD\".split('');\r\n\r\n  // Define different animations using Tailwind CSS classes\r\n  const animations = [\r\n    'animate-bounce', // Bounce animation\r\n    'animate-pulse',  // Pulse animation\r\n    'animate-spin',   // Spin animation\r\n    'transform transition duration-500 hover:scale-150', // Grow animation\r\n    // Add more animations as needed\r\n  ];\r\n\r\n  // Create a state for each character to hold its animation class\r\n  const [charAnimations, setCharAnimations] = useState(new Array(text.length).fill(''));\r\n\r\n  const handleCharClick = (index: number) => {\r\n    // Pick a random animation\r\n    const randomAnimation = animations[Math.floor(Math.random() * animations.length)];\r\n\r\n    // Apply the selected animation to the clicked character\r\n    setCharAnimations(prevAnimations => {\r\n      const newAnimations = [...prevAnimations];\r\n      newAnimations[index] = randomAnimation;\r\n      return newAnimations;\r\n    });\r\n  };\r\n\r\n  return (\r\n    <div className=\"text-4xl\">\r\n      {text.map((char, index) => (\r\n        <span\r\n          key={index}\r\n          onClick={() => handleCharClick(index)}\r\n          className={`cursor-pointer ${charAnimations[index]}`}\r\n        >\r\n          {char}\r\n        </span>\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TitleText;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAExC,MAAMC,SAAS,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACtB,MAAMC,IAAI,GAAG,YAAY,CAACC,KAAK,CAAC,EAAE,CAAC;;EAEnC;EACA,MAAMC,UAAU,GAAG,CACjB,gBAAgB;EAAE;EAClB,eAAe;EAAG;EAClB,cAAc;EAAI;EAClB,mDAAmD,CAAE;EACrD;EAAA,CACD;;EAED;EACA,MAAM,CAACC,cAAc,EAAEC,iBAAiB,CAAC,GAAGT,QAAQ,CAAC,IAAIU,KAAK,CAACL,IAAI,CAACM,MAAM,CAAC,CAACC,IAAI,CAAC,EAAE,CAAC,CAAC;EAErF,MAAMC,eAAe,GAAIC,KAAa,IAAK;IACzC;IACA,MAAMC,eAAe,GAAGR,UAAU,CAACS,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAGX,UAAU,CAACI,MAAM,CAAC,CAAC;;IAEjF;IACAF,iBAAiB,CAACU,cAAc,IAAI;MAClC,MAAMC,aAAa,GAAG,CAAC,GAAGD,cAAc,CAAC;MACzCC,aAAa,CAACN,KAAK,CAAC,GAAGC,eAAe;MACtC,OAAOK,aAAa;IACtB,CAAC,CAAC;EACJ,CAAC;EAED,oBACElB,OAAA;IAAKmB,SAAS,EAAC,UAAU;IAAAC,QAAA,EACtBjB,IAAI,CAACkB,GAAG,CAAC,CAACC,IAAI,EAAEV,KAAK,kBACpBZ,OAAA;MAEEuB,OAAO,EAAEA,CAAA,KAAMZ,eAAe,CAACC,KAAK,CAAE;MACtCO,SAAS,EAAG,kBAAiBb,cAAc,CAACM,KAAK,CAAE,EAAE;MAAAQ,QAAA,EAEpDE;IAAI,GAJAV,KAAK;MAAAY,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAKN,CACP;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACC,CAAC;AAEV,CAAC;AAACzB,EAAA,CAxCID,SAAS;AAAA2B,EAAA,GAAT3B,SAAS;AA0Cf,eAAeA,SAAS;AAAC,IAAA2B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}