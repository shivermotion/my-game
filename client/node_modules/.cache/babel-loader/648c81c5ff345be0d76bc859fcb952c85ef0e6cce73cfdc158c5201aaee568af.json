{"ast":null,"code":"// Returns a Float32Array representing the bounds data for box.\nexport function boxToArray(bx) {\n  const arr = new Float32Array(6);\n  arr[0] = bx.min.x;\n  arr[1] = bx.min.y;\n  arr[2] = bx.min.z;\n  arr[3] = bx.max.x;\n  arr[4] = bx.max.y;\n  arr[5] = bx.max.z;\n  return arr;\n}\nexport function arrayToBox(arr, target) {\n  target.min.x = arr[0];\n  target.min.y = arr[1];\n  target.min.z = arr[2];\n  target.max.x = arr[3];\n  target.max.y = arr[4];\n  target.max.z = arr[5];\n  return target;\n}\nexport function getLongestEdgeIndex(bounds) {\n  let splitDimIdx = -1;\n  let splitDist = -Infinity;\n  for (let i = 0; i < 3; i++) {\n    const dist = bounds[i + 3] - bounds[i];\n    if (dist > splitDist) {\n      splitDist = dist;\n      splitDimIdx = i;\n    }\n  }\n  return splitDimIdx;\n}\n\n// copys bounds a into bounds b\nexport function copyBounds(source, target) {\n  target.set(source);\n}\n\n// sets bounds target to the union of bounds a and b\nexport function unionBounds(a, b, target) {\n  let aVal, bVal;\n  for (let d = 0; d < 3; d++) {\n    const d3 = d + 3;\n\n    // set the minimum values\n    aVal = a[d];\n    bVal = b[d];\n    target[d] = aVal < bVal ? aVal : bVal;\n\n    // set the max values\n    aVal = a[d3];\n    bVal = b[d3];\n    target[d3] = aVal > bVal ? aVal : bVal;\n  }\n}\n\n// compute bounds surface area\nexport function computeSurfaceArea(bounds) {\n  const d0 = bounds[3] - bounds[0];\n  const d1 = bounds[4] - bounds[1];\n  const d2 = bounds[5] - bounds[2];\n  return 2 * (d0 * d1 + d1 * d2 + d2 * d0);\n}","map":{"version":3,"names":["boxToArray","bx","arr","Float32Array","min","x","y","z","max","arrayToBox","target","getLongestEdgeIndex","bounds","splitDimIdx","splitDist","Infinity","i","dist","copyBounds","source","set","unionBounds","a","b","aVal","bVal","d","d3","computeSurfaceArea","d0","d1","d2"],"sources":["C:/Users/Work/node_modules/three-mesh-bvh/src/Utils/ArrayBoxUtilities.js"],"sourcesContent":["// Returns a Float32Array representing the bounds data for box.\r\nexport function boxToArray( bx ) {\r\n\r\n\tconst arr = new Float32Array( 6 );\r\n\r\n\tarr[ 0 ] = bx.min.x;\r\n\tarr[ 1 ] = bx.min.y;\r\n\tarr[ 2 ] = bx.min.z;\r\n\r\n\tarr[ 3 ] = bx.max.x;\r\n\tarr[ 4 ] = bx.max.y;\r\n\tarr[ 5 ] = bx.max.z;\r\n\r\n\treturn arr;\r\n\r\n}\r\n\r\nexport function arrayToBox( arr, target ) {\r\n\r\n\ttarget.min.x = arr[ 0 ];\r\n\ttarget.min.y = arr[ 1 ];\r\n\ttarget.min.z = arr[ 2 ];\r\n\r\n\ttarget.max.x = arr[ 3 ];\r\n\ttarget.max.y = arr[ 4 ];\r\n\ttarget.max.z = arr[ 5 ];\r\n\r\n\treturn target;\r\n\r\n}\r\n\r\nexport function getLongestEdgeIndex( bounds ) {\r\n\r\n\tlet splitDimIdx = - 1;\r\n\tlet splitDist = - Infinity;\r\n\r\n\tfor ( let i = 0; i < 3; i ++ ) {\r\n\r\n\t\tconst dist = bounds[ i + 3 ] - bounds[ i ];\r\n\t\tif ( dist > splitDist ) {\r\n\r\n\t\t\tsplitDist = dist;\r\n\t\t\tsplitDimIdx = i;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\treturn splitDimIdx;\r\n\r\n}\r\n\r\n// copys bounds a into bounds b\r\nexport function copyBounds( source, target ) {\r\n\r\n\ttarget.set( source );\r\n\r\n}\r\n\r\n// sets bounds target to the union of bounds a and b\r\nexport function unionBounds( a, b, target ) {\r\n\r\n\tlet aVal, bVal;\r\n\tfor ( let d = 0; d < 3; d ++ ) {\r\n\r\n\t\tconst d3 = d + 3;\r\n\r\n\t\t// set the minimum values\r\n\t\taVal = a[ d ];\r\n\t\tbVal = b[ d ];\r\n\t\ttarget[ d ] = aVal < bVal ? aVal : bVal;\r\n\r\n\t\t// set the max values\r\n\t\taVal = a[ d3 ];\r\n\t\tbVal = b[ d3 ];\r\n\t\ttarget[ d3 ] = aVal > bVal ? aVal : bVal;\r\n\r\n\t}\r\n\r\n}\r\n\r\n// compute bounds surface area\r\nexport function computeSurfaceArea( bounds ) {\r\n\r\n\tconst d0 = bounds[ 3 ] - bounds[ 0 ];\r\n\tconst d1 = bounds[ 4 ] - bounds[ 1 ];\r\n\tconst d2 = bounds[ 5 ] - bounds[ 2 ];\r\n\r\n\treturn 2 * ( d0 * d1 + d1 * d2 + d2 * d0 );\r\n\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}