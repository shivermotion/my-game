{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n    return extendStatics(d, b);\n  };\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.areTokenCategoriesNotUsed = exports.isStrictPrefixOfPath = exports.containsPath = exports.getLookaheadPathsForOptionalProd = exports.getLookaheadPathsForOr = exports.lookAheadSequenceFromAlternatives = exports.buildSingleAlternativeLookaheadFunction = exports.buildAlternativesLookAheadFunc = exports.buildLookaheadFuncForOptionalProd = exports.buildLookaheadFuncForOr = exports.getProdType = exports.PROD_TYPE = void 0;\nvar utils_1 = require(\"@chevrotain/utils\");\nvar interpreter_1 = require(\"./interpreter\");\nvar rest_1 = require(\"./rest\");\nvar tokens_1 = require(\"../../scan/tokens\");\nvar gast_public_1 = require(\"./gast/gast_public\");\nvar gast_visitor_public_1 = require(\"./gast/gast_visitor_public\");\nvar PROD_TYPE;\n(function (PROD_TYPE) {\n  PROD_TYPE[PROD_TYPE[\"OPTION\"] = 0] = \"OPTION\";\n  PROD_TYPE[PROD_TYPE[\"REPETITION\"] = 1] = \"REPETITION\";\n  PROD_TYPE[PROD_TYPE[\"REPETITION_MANDATORY\"] = 2] = \"REPETITION_MANDATORY\";\n  PROD_TYPE[PROD_TYPE[\"REPETITION_MANDATORY_WITH_SEPARATOR\"] = 3] = \"REPETITION_MANDATORY_WITH_SEPARATOR\";\n  PROD_TYPE[PROD_TYPE[\"REPETITION_WITH_SEPARATOR\"] = 4] = \"REPETITION_WITH_SEPARATOR\";\n  PROD_TYPE[PROD_TYPE[\"ALTERNATION\"] = 5] = \"ALTERNATION\";\n})(PROD_TYPE = exports.PROD_TYPE || (exports.PROD_TYPE = {}));\nfunction getProdType(prod) {\n  /* istanbul ignore else */\n  if (prod instanceof gast_public_1.Option) {\n    return PROD_TYPE.OPTION;\n  } else if (prod instanceof gast_public_1.Repetition) {\n    return PROD_TYPE.REPETITION;\n  } else if (prod instanceof gast_public_1.RepetitionMandatory) {\n    return PROD_TYPE.REPETITION_MANDATORY;\n  } else if (prod instanceof gast_public_1.RepetitionMandatoryWithSeparator) {\n    return PROD_TYPE.REPETITION_MANDATORY_WITH_SEPARATOR;\n  } else if (prod instanceof gast_public_1.RepetitionWithSeparator) {\n    return PROD_TYPE.REPETITION_WITH_SEPARATOR;\n  } else if (prod instanceof gast_public_1.Alternation) {\n    return PROD_TYPE.ALTERNATION;\n  } else {\n    throw Error(\"non exhaustive match\");\n  }\n}\nexports.getProdType = getProdType;\nfunction buildLookaheadFuncForOr(occurrence, ruleGrammar, maxLookahead, hasPredicates, dynamicTokensEnabled, laFuncBuilder) {\n  var lookAheadPaths = getLookaheadPathsForOr(occurrence, ruleGrammar, maxLookahead);\n  var tokenMatcher = areTokenCategoriesNotUsed(lookAheadPaths) ? tokens_1.tokenStructuredMatcherNoCategories : tokens_1.tokenStructuredMatcher;\n  return laFuncBuilder(lookAheadPaths, hasPredicates, tokenMatcher, dynamicTokensEnabled);\n}\nexports.buildLookaheadFuncForOr = buildLookaheadFuncForOr;\n/**\n *  When dealing with an Optional production (OPTION/MANY/2nd iteration of AT_LEAST_ONE/...) we need to compare\n *  the lookahead \"inside\" the production and the lookahead immediately \"after\" it in the same top level rule (context free).\n *\n *  Example: given a production:\n *  ABC(DE)?DF\n *\n *  The optional '(DE)?' should only be entered if we see 'DE'. a single Token 'D' is not sufficient to distinguish between the two\n *  alternatives.\n *\n *  @returns A Lookahead function which will return true IFF the parser should parse the Optional production.\n */\nfunction buildLookaheadFuncForOptionalProd(occurrence, ruleGrammar, k, dynamicTokensEnabled, prodType, lookaheadBuilder) {\n  var lookAheadPaths = getLookaheadPathsForOptionalProd(occurrence, ruleGrammar, prodType, k);\n  var tokenMatcher = areTokenCategoriesNotUsed(lookAheadPaths) ? tokens_1.tokenStructuredMatcherNoCategories : tokens_1.tokenStructuredMatcher;\n  return lookaheadBuilder(lookAheadPaths[0], tokenMatcher, dynamicTokensEnabled);\n}\nexports.buildLookaheadFuncForOptionalProd = buildLookaheadFuncForOptionalProd;\nfunction buildAlternativesLookAheadFunc(alts, hasPredicates, tokenMatcher, dynamicTokensEnabled) {\n  var numOfAlts = alts.length;\n  var areAllOneTokenLookahead = utils_1.every(alts, function (currAlt) {\n    return utils_1.every(currAlt, function (currPath) {\n      return currPath.length === 1;\n    });\n  });\n  // This version takes into account the predicates as well.\n  if (hasPredicates) {\n    /**\n     * @returns {number} - The chosen alternative index\n     */\n    return function (orAlts) {\n      // unfortunately the predicates must be extracted every single time\n      // as they cannot be cached due to references to parameters(vars) which are no longer valid.\n      // note that in the common case of no predicates, no cpu time will be wasted on this (see else block)\n      var predicates = utils_1.map(orAlts, function (currAlt) {\n        return currAlt.GATE;\n      });\n      for (var t = 0; t < numOfAlts; t++) {\n        var currAlt = alts[t];\n        var currNumOfPaths = currAlt.length;\n        var currPredicate = predicates[t];\n        if (currPredicate !== undefined && currPredicate.call(this) === false) {\n          // if the predicate does not match there is no point in checking the paths\n          continue;\n        }\n        nextPath: for (var j = 0; j < currNumOfPaths; j++) {\n          var currPath = currAlt[j];\n          var currPathLength = currPath.length;\n          for (var i = 0; i < currPathLength; i++) {\n            var nextToken = this.LA(i + 1);\n            if (tokenMatcher(nextToken, currPath[i]) === false) {\n              // mismatch in current path\n              // try the next pth\n              continue nextPath;\n            }\n          }\n          // found a full path that matches.\n          // this will also work for an empty ALT as the loop will be skipped\n          return t;\n        }\n        // none of the paths for the current alternative matched\n        // try the next alternative\n      }\n      // none of the alternatives could be matched\n      return undefined;\n    };\n  } else if (areAllOneTokenLookahead && !dynamicTokensEnabled) {\n    // optimized (common) case of all the lookaheads paths requiring only\n    // a single token lookahead. These Optimizations cannot work if dynamically defined Tokens are used.\n    var singleTokenAlts = utils_1.map(alts, function (currAlt) {\n      return utils_1.flatten(currAlt);\n    });\n    var choiceToAlt_1 = utils_1.reduce(singleTokenAlts, function (result, currAlt, idx) {\n      utils_1.forEach(currAlt, function (currTokType) {\n        if (!utils_1.has(result, currTokType.tokenTypeIdx)) {\n          result[currTokType.tokenTypeIdx] = idx;\n        }\n        utils_1.forEach(currTokType.categoryMatches, function (currExtendingType) {\n          if (!utils_1.has(result, currExtendingType)) {\n            result[currExtendingType] = idx;\n          }\n        });\n      });\n      return result;\n    }, []);\n    /**\n     * @returns {number} - The chosen alternative index\n     */\n    return function () {\n      var nextToken = this.LA(1);\n      return choiceToAlt_1[nextToken.tokenTypeIdx];\n    };\n  } else {\n    // optimized lookahead without needing to check the predicates at all.\n    // this causes code duplication which is intentional to improve performance.\n    /**\n     * @returns {number} - The chosen alternative index\n     */\n    return function () {\n      for (var t = 0; t < numOfAlts; t++) {\n        var currAlt = alts[t];\n        var currNumOfPaths = currAlt.length;\n        nextPath: for (var j = 0; j < currNumOfPaths; j++) {\n          var currPath = currAlt[j];\n          var currPathLength = currPath.length;\n          for (var i = 0; i < currPathLength; i++) {\n            var nextToken = this.LA(i + 1);\n            if (tokenMatcher(nextToken, currPath[i]) === false) {\n              // mismatch in current path\n              // try the next pth\n              continue nextPath;\n            }\n          }\n          // found a full path that matches.\n          // this will also work for an empty ALT as the loop will be skipped\n          return t;\n        }\n        // none of the paths for the current alternative matched\n        // try the next alternative\n      }\n      // none of the alternatives could be matched\n      return undefined;\n    };\n  }\n}\nexports.buildAlternativesLookAheadFunc = buildAlternativesLookAheadFunc;\nfunction buildSingleAlternativeLookaheadFunction(alt, tokenMatcher, dynamicTokensEnabled) {\n  var areAllOneTokenLookahead = utils_1.every(alt, function (currPath) {\n    return currPath.length === 1;\n  });\n  var numOfPaths = alt.length;\n  // optimized (common) case of all the lookaheads paths requiring only\n  // a single token lookahead.\n  if (areAllOneTokenLookahead && !dynamicTokensEnabled) {\n    var singleTokensTypes = utils_1.flatten(alt);\n    if (singleTokensTypes.length === 1 && utils_1.isEmpty(singleTokensTypes[0].categoryMatches)) {\n      var expectedTokenType = singleTokensTypes[0];\n      var expectedTokenUniqueKey_1 = expectedTokenType.tokenTypeIdx;\n      return function () {\n        return this.LA(1).tokenTypeIdx === expectedTokenUniqueKey_1;\n      };\n    } else {\n      var choiceToAlt_2 = utils_1.reduce(singleTokensTypes, function (result, currTokType, idx) {\n        result[currTokType.tokenTypeIdx] = true;\n        utils_1.forEach(currTokType.categoryMatches, function (currExtendingType) {\n          result[currExtendingType] = true;\n        });\n        return result;\n      }, []);\n      return function () {\n        var nextToken = this.LA(1);\n        return choiceToAlt_2[nextToken.tokenTypeIdx] === true;\n      };\n    }\n  } else {\n    return function () {\n      nextPath: for (var j = 0; j < numOfPaths; j++) {\n        var currPath = alt[j];\n        var currPathLength = currPath.length;\n        for (var i = 0; i < currPathLength; i++) {\n          var nextToken = this.LA(i + 1);\n          if (tokenMatcher(nextToken, currPath[i]) === false) {\n            // mismatch in current path\n            // try the next pth\n            continue nextPath;\n          }\n        }\n        // found a full path that matches.\n        return true;\n      }\n      // none of the paths matched\n      return false;\n    };\n  }\n}\nexports.buildSingleAlternativeLookaheadFunction = buildSingleAlternativeLookaheadFunction;\nvar RestDefinitionFinderWalker = /** @class */function (_super) {\n  __extends(RestDefinitionFinderWalker, _super);\n  function RestDefinitionFinderWalker(topProd, targetOccurrence, targetProdType) {\n    var _this = _super.call(this) || this;\n    _this.topProd = topProd;\n    _this.targetOccurrence = targetOccurrence;\n    _this.targetProdType = targetProdType;\n    return _this;\n  }\n  RestDefinitionFinderWalker.prototype.startWalking = function () {\n    this.walk(this.topProd);\n    return this.restDef;\n  };\n  RestDefinitionFinderWalker.prototype.checkIsTarget = function (node, expectedProdType, currRest, prevRest) {\n    if (node.idx === this.targetOccurrence && this.targetProdType === expectedProdType) {\n      this.restDef = currRest.concat(prevRest);\n      return true;\n    }\n    // performance optimization, do not iterate over the entire Grammar ast after we have found the target\n    return false;\n  };\n  RestDefinitionFinderWalker.prototype.walkOption = function (optionProd, currRest, prevRest) {\n    if (!this.checkIsTarget(optionProd, PROD_TYPE.OPTION, currRest, prevRest)) {\n      _super.prototype.walkOption.call(this, optionProd, currRest, prevRest);\n    }\n  };\n  RestDefinitionFinderWalker.prototype.walkAtLeastOne = function (atLeastOneProd, currRest, prevRest) {\n    if (!this.checkIsTarget(atLeastOneProd, PROD_TYPE.REPETITION_MANDATORY, currRest, prevRest)) {\n      _super.prototype.walkOption.call(this, atLeastOneProd, currRest, prevRest);\n    }\n  };\n  RestDefinitionFinderWalker.prototype.walkAtLeastOneSep = function (atLeastOneSepProd, currRest, prevRest) {\n    if (!this.checkIsTarget(atLeastOneSepProd, PROD_TYPE.REPETITION_MANDATORY_WITH_SEPARATOR, currRest, prevRest)) {\n      _super.prototype.walkOption.call(this, atLeastOneSepProd, currRest, prevRest);\n    }\n  };\n  RestDefinitionFinderWalker.prototype.walkMany = function (manyProd, currRest, prevRest) {\n    if (!this.checkIsTarget(manyProd, PROD_TYPE.REPETITION, currRest, prevRest)) {\n      _super.prototype.walkOption.call(this, manyProd, currRest, prevRest);\n    }\n  };\n  RestDefinitionFinderWalker.prototype.walkManySep = function (manySepProd, currRest, prevRest) {\n    if (!this.checkIsTarget(manySepProd, PROD_TYPE.REPETITION_WITH_SEPARATOR, currRest, prevRest)) {\n      _super.prototype.walkOption.call(this, manySepProd, currRest, prevRest);\n    }\n  };\n  return RestDefinitionFinderWalker;\n}(rest_1.RestWalker);\n/**\n * Returns the definition of a target production in a top level level rule.\n */\nvar InsideDefinitionFinderVisitor = /** @class */function (_super) {\n  __extends(InsideDefinitionFinderVisitor, _super);\n  function InsideDefinitionFinderVisitor(targetOccurrence, targetProdType, targetRef) {\n    var _this = _super.call(this) || this;\n    _this.targetOccurrence = targetOccurrence;\n    _this.targetProdType = targetProdType;\n    _this.targetRef = targetRef;\n    _this.result = [];\n    return _this;\n  }\n  InsideDefinitionFinderVisitor.prototype.checkIsTarget = function (node, expectedProdName) {\n    if (node.idx === this.targetOccurrence && this.targetProdType === expectedProdName && (this.targetRef === undefined || node === this.targetRef)) {\n      this.result = node.definition;\n    }\n  };\n  InsideDefinitionFinderVisitor.prototype.visitOption = function (node) {\n    this.checkIsTarget(node, PROD_TYPE.OPTION);\n  };\n  InsideDefinitionFinderVisitor.prototype.visitRepetition = function (node) {\n    this.checkIsTarget(node, PROD_TYPE.REPETITION);\n  };\n  InsideDefinitionFinderVisitor.prototype.visitRepetitionMandatory = function (node) {\n    this.checkIsTarget(node, PROD_TYPE.REPETITION_MANDATORY);\n  };\n  InsideDefinitionFinderVisitor.prototype.visitRepetitionMandatoryWithSeparator = function (node) {\n    this.checkIsTarget(node, PROD_TYPE.REPETITION_MANDATORY_WITH_SEPARATOR);\n  };\n  InsideDefinitionFinderVisitor.prototype.visitRepetitionWithSeparator = function (node) {\n    this.checkIsTarget(node, PROD_TYPE.REPETITION_WITH_SEPARATOR);\n  };\n  InsideDefinitionFinderVisitor.prototype.visitAlternation = function (node) {\n    this.checkIsTarget(node, PROD_TYPE.ALTERNATION);\n  };\n  return InsideDefinitionFinderVisitor;\n}(gast_visitor_public_1.GAstVisitor);\nfunction initializeArrayOfArrays(size) {\n  var result = new Array(size);\n  for (var i = 0; i < size; i++) {\n    result[i] = [];\n  }\n  return result;\n}\n/**\n * A sort of hash function between a Path in the grammar and a string.\n * Note that this returns multiple \"hashes\" to support the scenario of token categories.\n * -  A single path with categories may match multiple **actual** paths.\n */\nfunction pathToHashKeys(path) {\n  var keys = [\"\"];\n  for (var i = 0; i < path.length; i++) {\n    var tokType = path[i];\n    var longerKeys = [];\n    for (var j = 0; j < keys.length; j++) {\n      var currShorterKey = keys[j];\n      longerKeys.push(currShorterKey + \"_\" + tokType.tokenTypeIdx);\n      for (var t = 0; t < tokType.categoryMatches.length; t++) {\n        var categoriesKeySuffix = \"_\" + tokType.categoryMatches[t];\n        longerKeys.push(currShorterKey + categoriesKeySuffix);\n      }\n    }\n    keys = longerKeys;\n  }\n  return keys;\n}\n/**\n * Imperative style due to being called from a hot spot\n */\nfunction isUniquePrefixHash(altKnownPathsKeys, searchPathKeys, idx) {\n  for (var currAltIdx = 0; currAltIdx < altKnownPathsKeys.length; currAltIdx++) {\n    // We only want to test vs the other alternatives\n    if (currAltIdx === idx) {\n      continue;\n    }\n    var otherAltKnownPathsKeys = altKnownPathsKeys[currAltIdx];\n    for (var searchIdx = 0; searchIdx < searchPathKeys.length; searchIdx++) {\n      var searchKey = searchPathKeys[searchIdx];\n      if (otherAltKnownPathsKeys[searchKey] === true) {\n        return false;\n      }\n    }\n  }\n  // None of the SearchPathKeys were found in any of the other alternatives\n  return true;\n}\nfunction lookAheadSequenceFromAlternatives(altsDefs, k) {\n  var partialAlts = utils_1.map(altsDefs, function (currAlt) {\n    return interpreter_1.possiblePathsFrom([currAlt], 1);\n  });\n  var finalResult = initializeArrayOfArrays(partialAlts.length);\n  var altsHashes = utils_1.map(partialAlts, function (currAltPaths) {\n    var dict = {};\n    utils_1.forEach(currAltPaths, function (item) {\n      var keys = pathToHashKeys(item.partialPath);\n      utils_1.forEach(keys, function (currKey) {\n        dict[currKey] = true;\n      });\n    });\n    return dict;\n  });\n  var newData = partialAlts;\n  // maxLookahead loop\n  for (var pathLength = 1; pathLength <= k; pathLength++) {\n    var currDataset = newData;\n    newData = initializeArrayOfArrays(currDataset.length);\n    var _loop_1 = function (altIdx) {\n      var currAltPathsAndSuffixes = currDataset[altIdx];\n      // paths in current alternative loop\n      for (var currPathIdx = 0; currPathIdx < currAltPathsAndSuffixes.length; currPathIdx++) {\n        var currPathPrefix = currAltPathsAndSuffixes[currPathIdx].partialPath;\n        var suffixDef = currAltPathsAndSuffixes[currPathIdx].suffixDef;\n        var prefixKeys = pathToHashKeys(currPathPrefix);\n        var isUnique = isUniquePrefixHash(altsHashes, prefixKeys, altIdx);\n        // End of the line for this path.\n        if (isUnique || utils_1.isEmpty(suffixDef) || currPathPrefix.length === k) {\n          var currAltResult = finalResult[altIdx];\n          // TODO: Can we implement a containsPath using Maps/Dictionaries?\n          if (containsPath(currAltResult, currPathPrefix) === false) {\n            currAltResult.push(currPathPrefix);\n            // Update all new  keys for the current path.\n            for (var j = 0; j < prefixKeys.length; j++) {\n              var currKey = prefixKeys[j];\n              altsHashes[altIdx][currKey] = true;\n            }\n          }\n        }\n        // Expand longer paths\n        else {\n          var newPartialPathsAndSuffixes = interpreter_1.possiblePathsFrom(suffixDef, pathLength + 1, currPathPrefix);\n          newData[altIdx] = newData[altIdx].concat(newPartialPathsAndSuffixes);\n          // Update keys for new known paths\n          utils_1.forEach(newPartialPathsAndSuffixes, function (item) {\n            var prefixKeys = pathToHashKeys(item.partialPath);\n            utils_1.forEach(prefixKeys, function (key) {\n              altsHashes[altIdx][key] = true;\n            });\n          });\n        }\n      }\n    };\n    // alternatives loop\n    for (var altIdx = 0; altIdx < currDataset.length; altIdx++) {\n      _loop_1(altIdx);\n    }\n  }\n  return finalResult;\n}\nexports.lookAheadSequenceFromAlternatives = lookAheadSequenceFromAlternatives;\nfunction getLookaheadPathsForOr(occurrence, ruleGrammar, k, orProd) {\n  var visitor = new InsideDefinitionFinderVisitor(occurrence, PROD_TYPE.ALTERNATION, orProd);\n  ruleGrammar.accept(visitor);\n  return lookAheadSequenceFromAlternatives(visitor.result, k);\n}\nexports.getLookaheadPathsForOr = getLookaheadPathsForOr;\nfunction getLookaheadPathsForOptionalProd(occurrence, ruleGrammar, prodType, k) {\n  var insideDefVisitor = new InsideDefinitionFinderVisitor(occurrence, prodType);\n  ruleGrammar.accept(insideDefVisitor);\n  var insideDef = insideDefVisitor.result;\n  var afterDefWalker = new RestDefinitionFinderWalker(ruleGrammar, occurrence, prodType);\n  var afterDef = afterDefWalker.startWalking();\n  var insideFlat = new gast_public_1.Alternative({\n    definition: insideDef\n  });\n  var afterFlat = new gast_public_1.Alternative({\n    definition: afterDef\n  });\n  return lookAheadSequenceFromAlternatives([insideFlat, afterFlat], k);\n}\nexports.getLookaheadPathsForOptionalProd = getLookaheadPathsForOptionalProd;\nfunction containsPath(alternative, searchPath) {\n  compareOtherPath: for (var i = 0; i < alternative.length; i++) {\n    var otherPath = alternative[i];\n    if (otherPath.length !== searchPath.length) {\n      continue;\n    }\n    for (var j = 0; j < otherPath.length; j++) {\n      var searchTok = searchPath[j];\n      var otherTok = otherPath[j];\n      var matchingTokens = searchTok === otherTok || otherTok.categoryMatchesMap[searchTok.tokenTypeIdx] !== undefined;\n      if (matchingTokens === false) {\n        continue compareOtherPath;\n      }\n    }\n    return true;\n  }\n  return false;\n}\nexports.containsPath = containsPath;\nfunction isStrictPrefixOfPath(prefix, other) {\n  return prefix.length < other.length && utils_1.every(prefix, function (tokType, idx) {\n    var otherTokType = other[idx];\n    return tokType === otherTokType || otherTokType.categoryMatchesMap[tokType.tokenTypeIdx];\n  });\n}\nexports.isStrictPrefixOfPath = isStrictPrefixOfPath;\nfunction areTokenCategoriesNotUsed(lookAheadPaths) {\n  return utils_1.every(lookAheadPaths, function (singleAltPaths) {\n    return utils_1.every(singleAltPaths, function (singlePath) {\n      return utils_1.every(singlePath, function (token) {\n        return utils_1.isEmpty(token.categoryMatches);\n      });\n    });\n  });\n}\nexports.areTokenCategoriesNotUsed = areTokenCategoriesNotUsed;","map":{"version":3,"names":["utils_1","require","interpreter_1","rest_1","tokens_1","gast_public_1","gast_visitor_public_1","PROD_TYPE","exports","getProdType","prod","Option","OPTION","Repetition","REPETITION","RepetitionMandatory","REPETITION_MANDATORY","RepetitionMandatoryWithSeparator","REPETITION_MANDATORY_WITH_SEPARATOR","RepetitionWithSeparator","REPETITION_WITH_SEPARATOR","Alternation","ALTERNATION","Error","buildLookaheadFuncForOr","occurrence","ruleGrammar","maxLookahead","hasPredicates","dynamicTokensEnabled","laFuncBuilder","lookAheadPaths","getLookaheadPathsForOr","tokenMatcher","areTokenCategoriesNotUsed","tokenStructuredMatcherNoCategories","tokenStructuredMatcher","buildLookaheadFuncForOptionalProd","k","prodType","lookaheadBuilder","getLookaheadPathsForOptionalProd","buildAlternativesLookAheadFunc","alts","numOfAlts","length","areAllOneTokenLookahead","every","currAlt","currPath","orAlts","predicates","map","GATE","t","currNumOfPaths","currPredicate","undefined","call","nextPath","j","currPathLength","i","nextToken","LA","singleTokenAlts","flatten","choiceToAlt_1","reduce","result","idx","forEach","currTokType","has","tokenTypeIdx","categoryMatches","currExtendingType","buildSingleAlternativeLookaheadFunction","alt","numOfPaths","singleTokensTypes","isEmpty","expectedTokenType","expectedTokenUniqueKey_1","choiceToAlt_2","RestDefinitionFinderWalker","_super","__extends","topProd","targetOccurrence","targetProdType","_this","prototype","startWalking","walk","restDef","checkIsTarget","node","expectedProdType","currRest","prevRest","concat","walkOption","optionProd","walkAtLeastOne","atLeastOneProd","walkAtLeastOneSep","atLeastOneSepProd","walkMany","manyProd","walkManySep","manySepProd","RestWalker","InsideDefinitionFinderVisitor","targetRef","expectedProdName","definition","visitOption","visitRepetition","visitRepetitionMandatory","visitRepetitionMandatoryWithSeparator","visitRepetitionWithSeparator","visitAlternation","GAstVisitor","initializeArrayOfArrays","size","Array","pathToHashKeys","path","keys","tokType","longerKeys","currShorterKey","push","categoriesKeySuffix","isUniquePrefixHash","altKnownPathsKeys","searchPathKeys","currAltIdx","otherAltKnownPathsKeys","searchIdx","searchKey","lookAheadSequenceFromAlternatives","altsDefs","partialAlts","possiblePathsFrom","finalResult","altsHashes","currAltPaths","dict","item","partialPath","currKey","newData","pathLength","currDataset","altIdx","currAltPathsAndSuffixes","currPathIdx","currPathPrefix","suffixDef","prefixKeys","isUnique","currAltResult","containsPath","newPartialPathsAndSuffixes","key","orProd","visitor","accept","insideDefVisitor","insideDef","afterDefWalker","afterDef","insideFlat","Alternative","afterFlat","alternative","searchPath","compareOtherPath","otherPath","searchTok","otherTok","matchingTokens","categoryMatchesMap","isStrictPrefixOfPath","prefix","other","otherTokType","singleAltPaths","singlePath","token"],"sources":["C:\\Users\\Work\\node_modules\\chevrotain\\src\\parse\\grammar\\lookahead.ts"],"sourcesContent":["import {\n  map,\n  reduce,\n  every,\n  isEmpty,\n  flatten,\n  forEach,\n  has\n} from \"@chevrotain/utils\"\nimport { possiblePathsFrom } from \"./interpreter\"\nimport { RestWalker } from \"./rest\"\nimport { Predicate, TokenMatcher, lookAheadSequence } from \"../parser/parser\"\nimport {\n  tokenStructuredMatcher,\n  tokenStructuredMatcherNoCategories\n} from \"../../scan/tokens\"\nimport {\n  AbstractProduction,\n  Alternation,\n  Alternative as AlternativeGAST,\n  Option,\n  Repetition,\n  RepetitionMandatory,\n  RepetitionMandatoryWithSeparator,\n  RepetitionWithSeparator,\n  Rule\n} from \"./gast/gast_public\"\nimport { GAstVisitor } from \"./gast/gast_visitor_public\"\nimport {\n  IOrAlt,\n  IProduction,\n  IProductionWithOccurrence,\n  TokenType\n} from \"@chevrotain/types\"\n\nexport enum PROD_TYPE {\n  OPTION,\n  REPETITION,\n  REPETITION_MANDATORY,\n  REPETITION_MANDATORY_WITH_SEPARATOR,\n  REPETITION_WITH_SEPARATOR,\n  ALTERNATION\n}\n\nexport function getProdType(prod: IProduction): PROD_TYPE {\n  /* istanbul ignore else */\n  if (prod instanceof Option) {\n    return PROD_TYPE.OPTION\n  } else if (prod instanceof Repetition) {\n    return PROD_TYPE.REPETITION\n  } else if (prod instanceof RepetitionMandatory) {\n    return PROD_TYPE.REPETITION_MANDATORY\n  } else if (prod instanceof RepetitionMandatoryWithSeparator) {\n    return PROD_TYPE.REPETITION_MANDATORY_WITH_SEPARATOR\n  } else if (prod instanceof RepetitionWithSeparator) {\n    return PROD_TYPE.REPETITION_WITH_SEPARATOR\n  } else if (prod instanceof Alternation) {\n    return PROD_TYPE.ALTERNATION\n  } else {\n    throw Error(\"non exhaustive match\")\n  }\n}\n\nexport function buildLookaheadFuncForOr(\n  occurrence: number,\n  ruleGrammar: Rule,\n  maxLookahead: number,\n  hasPredicates: boolean,\n  dynamicTokensEnabled: boolean,\n  laFuncBuilder: Function\n): (orAlts?: IOrAlt<any>[]) => number {\n  const lookAheadPaths = getLookaheadPathsForOr(\n    occurrence,\n    ruleGrammar,\n    maxLookahead\n  )\n\n  const tokenMatcher = areTokenCategoriesNotUsed(lookAheadPaths)\n    ? tokenStructuredMatcherNoCategories\n    : tokenStructuredMatcher\n\n  return laFuncBuilder(\n    lookAheadPaths,\n    hasPredicates,\n    tokenMatcher,\n    dynamicTokensEnabled\n  )\n}\n\n/**\n *  When dealing with an Optional production (OPTION/MANY/2nd iteration of AT_LEAST_ONE/...) we need to compare\n *  the lookahead \"inside\" the production and the lookahead immediately \"after\" it in the same top level rule (context free).\n *\n *  Example: given a production:\n *  ABC(DE)?DF\n *\n *  The optional '(DE)?' should only be entered if we see 'DE'. a single Token 'D' is not sufficient to distinguish between the two\n *  alternatives.\n *\n *  @returns A Lookahead function which will return true IFF the parser should parse the Optional production.\n */\nexport function buildLookaheadFuncForOptionalProd(\n  occurrence: number,\n  ruleGrammar: Rule,\n  k: number,\n  dynamicTokensEnabled: boolean,\n  prodType: PROD_TYPE,\n  lookaheadBuilder: (lookAheadSequence, TokenMatcher, boolean) => () => boolean\n): () => boolean {\n  const lookAheadPaths = getLookaheadPathsForOptionalProd(\n    occurrence,\n    ruleGrammar,\n    prodType,\n    k\n  )\n\n  const tokenMatcher = areTokenCategoriesNotUsed(lookAheadPaths)\n    ? tokenStructuredMatcherNoCategories\n    : tokenStructuredMatcher\n\n  return lookaheadBuilder(lookAheadPaths[0], tokenMatcher, dynamicTokensEnabled)\n}\n\nexport type Alternative = TokenType[][]\n\nexport function buildAlternativesLookAheadFunc(\n  alts: lookAheadSequence[],\n  hasPredicates: boolean,\n  tokenMatcher: TokenMatcher,\n  dynamicTokensEnabled: boolean\n): (orAlts?: IOrAlt<any>[]) => number {\n  const numOfAlts = alts.length\n  const areAllOneTokenLookahead = every(alts, (currAlt) => {\n    return every(currAlt, (currPath) => {\n      return currPath.length === 1\n    })\n  })\n\n  // This version takes into account the predicates as well.\n  if (hasPredicates) {\n    /**\n     * @returns {number} - The chosen alternative index\n     */\n    return function (orAlts: IOrAlt<any>[]): number {\n      // unfortunately the predicates must be extracted every single time\n      // as they cannot be cached due to references to parameters(vars) which are no longer valid.\n      // note that in the common case of no predicates, no cpu time will be wasted on this (see else block)\n      const predicates: Predicate[] = map(orAlts, (currAlt) => currAlt.GATE)\n\n      for (let t = 0; t < numOfAlts; t++) {\n        const currAlt = alts[t]\n        const currNumOfPaths = currAlt.length\n\n        const currPredicate = predicates[t]\n        if (currPredicate !== undefined && currPredicate.call(this) === false) {\n          // if the predicate does not match there is no point in checking the paths\n          continue\n        }\n        nextPath: for (let j = 0; j < currNumOfPaths; j++) {\n          const currPath = currAlt[j]\n          const currPathLength = currPath.length\n          for (let i = 0; i < currPathLength; i++) {\n            const nextToken = this.LA(i + 1)\n            if (tokenMatcher(nextToken, currPath[i]) === false) {\n              // mismatch in current path\n              // try the next pth\n              continue nextPath\n            }\n          }\n          // found a full path that matches.\n          // this will also work for an empty ALT as the loop will be skipped\n          return t\n        }\n        // none of the paths for the current alternative matched\n        // try the next alternative\n      }\n      // none of the alternatives could be matched\n      return undefined\n    }\n  } else if (areAllOneTokenLookahead && !dynamicTokensEnabled) {\n    // optimized (common) case of all the lookaheads paths requiring only\n    // a single token lookahead. These Optimizations cannot work if dynamically defined Tokens are used.\n    const singleTokenAlts = map(alts, (currAlt) => {\n      return flatten(currAlt)\n    })\n\n    const choiceToAlt = reduce(\n      singleTokenAlts,\n      (result, currAlt, idx) => {\n        forEach(currAlt, (currTokType) => {\n          if (!has(result, currTokType.tokenTypeIdx)) {\n            result[currTokType.tokenTypeIdx] = idx\n          }\n          forEach(currTokType.categoryMatches, (currExtendingType) => {\n            if (!has(result, currExtendingType)) {\n              result[currExtendingType] = idx\n            }\n          })\n        })\n        return result\n      },\n      []\n    )\n\n    /**\n     * @returns {number} - The chosen alternative index\n     */\n    return function (): number {\n      const nextToken = this.LA(1)\n      return choiceToAlt[nextToken.tokenTypeIdx]\n    }\n  } else {\n    // optimized lookahead without needing to check the predicates at all.\n    // this causes code duplication which is intentional to improve performance.\n    /**\n     * @returns {number} - The chosen alternative index\n     */\n    return function (): number {\n      for (let t = 0; t < numOfAlts; t++) {\n        const currAlt = alts[t]\n        const currNumOfPaths = currAlt.length\n        nextPath: for (let j = 0; j < currNumOfPaths; j++) {\n          const currPath = currAlt[j]\n          const currPathLength = currPath.length\n          for (let i = 0; i < currPathLength; i++) {\n            const nextToken = this.LA(i + 1)\n            if (tokenMatcher(nextToken, currPath[i]) === false) {\n              // mismatch in current path\n              // try the next pth\n              continue nextPath\n            }\n          }\n          // found a full path that matches.\n          // this will also work for an empty ALT as the loop will be skipped\n          return t\n        }\n        // none of the paths for the current alternative matched\n        // try the next alternative\n      }\n      // none of the alternatives could be matched\n      return undefined\n    }\n  }\n}\n\nexport function buildSingleAlternativeLookaheadFunction(\n  alt: lookAheadSequence,\n  tokenMatcher: TokenMatcher,\n  dynamicTokensEnabled: boolean\n): () => boolean {\n  const areAllOneTokenLookahead = every(alt, (currPath) => {\n    return currPath.length === 1\n  })\n\n  const numOfPaths = alt.length\n\n  // optimized (common) case of all the lookaheads paths requiring only\n  // a single token lookahead.\n  if (areAllOneTokenLookahead && !dynamicTokensEnabled) {\n    const singleTokensTypes = flatten(alt)\n\n    if (\n      singleTokensTypes.length === 1 &&\n      isEmpty((<any>singleTokensTypes[0]).categoryMatches)\n    ) {\n      const expectedTokenType = singleTokensTypes[0]\n      const expectedTokenUniqueKey = (<any>expectedTokenType).tokenTypeIdx\n\n      return function (): boolean {\n        return this.LA(1).tokenTypeIdx === expectedTokenUniqueKey\n      }\n    } else {\n      const choiceToAlt = reduce(\n        singleTokensTypes,\n        (result, currTokType, idx) => {\n          result[currTokType.tokenTypeIdx] = true\n          forEach(currTokType.categoryMatches, (currExtendingType) => {\n            result[currExtendingType] = true\n          })\n          return result\n        },\n        []\n      )\n\n      return function (): boolean {\n        const nextToken = this.LA(1)\n        return choiceToAlt[nextToken.tokenTypeIdx] === true\n      }\n    }\n  } else {\n    return function (): boolean {\n      nextPath: for (let j = 0; j < numOfPaths; j++) {\n        const currPath = alt[j]\n        const currPathLength = currPath.length\n        for (let i = 0; i < currPathLength; i++) {\n          const nextToken = this.LA(i + 1)\n          if (tokenMatcher(nextToken, currPath[i]) === false) {\n            // mismatch in current path\n            // try the next pth\n            continue nextPath\n          }\n        }\n        // found a full path that matches.\n        return true\n      }\n\n      // none of the paths matched\n      return false\n    }\n  }\n}\n\nclass RestDefinitionFinderWalker extends RestWalker {\n  private restDef: IProduction[]\n\n  constructor(\n    private topProd: Rule,\n    private targetOccurrence: number,\n    private targetProdType: PROD_TYPE\n  ) {\n    super()\n  }\n\n  startWalking(): IProduction[] {\n    this.walk(this.topProd)\n    return this.restDef\n  }\n\n  private checkIsTarget(\n    node: AbstractProduction & IProductionWithOccurrence,\n    expectedProdType: PROD_TYPE,\n    currRest: IProduction[],\n    prevRest: IProduction[]\n  ): boolean {\n    if (\n      node.idx === this.targetOccurrence &&\n      this.targetProdType === expectedProdType\n    ) {\n      this.restDef = currRest.concat(prevRest)\n      return true\n    }\n    // performance optimization, do not iterate over the entire Grammar ast after we have found the target\n    return false\n  }\n\n  walkOption(\n    optionProd: Option,\n    currRest: IProduction[],\n    prevRest: IProduction[]\n  ): void {\n    if (!this.checkIsTarget(optionProd, PROD_TYPE.OPTION, currRest, prevRest)) {\n      super.walkOption(optionProd, currRest, prevRest)\n    }\n  }\n\n  walkAtLeastOne(\n    atLeastOneProd: RepetitionMandatory,\n    currRest: IProduction[],\n    prevRest: IProduction[]\n  ): void {\n    if (\n      !this.checkIsTarget(\n        atLeastOneProd,\n        PROD_TYPE.REPETITION_MANDATORY,\n        currRest,\n        prevRest\n      )\n    ) {\n      super.walkOption(atLeastOneProd, currRest, prevRest)\n    }\n  }\n\n  walkAtLeastOneSep(\n    atLeastOneSepProd: RepetitionMandatoryWithSeparator,\n    currRest: IProduction[],\n    prevRest: IProduction[]\n  ): void {\n    if (\n      !this.checkIsTarget(\n        atLeastOneSepProd,\n        PROD_TYPE.REPETITION_MANDATORY_WITH_SEPARATOR,\n        currRest,\n        prevRest\n      )\n    ) {\n      super.walkOption(atLeastOneSepProd, currRest, prevRest)\n    }\n  }\n\n  walkMany(\n    manyProd: Repetition,\n    currRest: IProduction[],\n    prevRest: IProduction[]\n  ): void {\n    if (\n      !this.checkIsTarget(manyProd, PROD_TYPE.REPETITION, currRest, prevRest)\n    ) {\n      super.walkOption(manyProd, currRest, prevRest)\n    }\n  }\n\n  walkManySep(\n    manySepProd: RepetitionWithSeparator,\n    currRest: IProduction[],\n    prevRest: IProduction[]\n  ): void {\n    if (\n      !this.checkIsTarget(\n        manySepProd,\n        PROD_TYPE.REPETITION_WITH_SEPARATOR,\n        currRest,\n        prevRest\n      )\n    ) {\n      super.walkOption(manySepProd, currRest, prevRest)\n    }\n  }\n}\n\n/**\n * Returns the definition of a target production in a top level level rule.\n */\nclass InsideDefinitionFinderVisitor extends GAstVisitor {\n  public result: IProduction[] = []\n\n  constructor(\n    private targetOccurrence: number,\n    private targetProdType: PROD_TYPE,\n    private targetRef?: any\n  ) {\n    super()\n  }\n\n  private checkIsTarget(\n    node: AbstractProduction & IProductionWithOccurrence,\n    expectedProdName: PROD_TYPE\n  ): void {\n    if (\n      node.idx === this.targetOccurrence &&\n      this.targetProdType === expectedProdName &&\n      (this.targetRef === undefined || node === this.targetRef)\n    ) {\n      this.result = node.definition\n    }\n  }\n\n  public visitOption(node: Option): void {\n    this.checkIsTarget(node, PROD_TYPE.OPTION)\n  }\n\n  public visitRepetition(node: Repetition): void {\n    this.checkIsTarget(node, PROD_TYPE.REPETITION)\n  }\n\n  public visitRepetitionMandatory(node: RepetitionMandatory): void {\n    this.checkIsTarget(node, PROD_TYPE.REPETITION_MANDATORY)\n  }\n\n  public visitRepetitionMandatoryWithSeparator(\n    node: RepetitionMandatoryWithSeparator\n  ): void {\n    this.checkIsTarget(node, PROD_TYPE.REPETITION_MANDATORY_WITH_SEPARATOR)\n  }\n\n  public visitRepetitionWithSeparator(node: RepetitionWithSeparator): void {\n    this.checkIsTarget(node, PROD_TYPE.REPETITION_WITH_SEPARATOR)\n  }\n\n  public visitAlternation(node: Alternation): void {\n    this.checkIsTarget(node, PROD_TYPE.ALTERNATION)\n  }\n}\n\nfunction initializeArrayOfArrays(size): any[][] {\n  const result = new Array(size)\n  for (let i = 0; i < size; i++) {\n    result[i] = []\n  }\n  return result\n}\n\n/**\n * A sort of hash function between a Path in the grammar and a string.\n * Note that this returns multiple \"hashes\" to support the scenario of token categories.\n * -  A single path with categories may match multiple **actual** paths.\n */\nfunction pathToHashKeys(path: TokenType[]): string[] {\n  let keys = [\"\"]\n  for (let i = 0; i < path.length; i++) {\n    const tokType = path[i]\n    const longerKeys = []\n    for (let j = 0; j < keys.length; j++) {\n      const currShorterKey = keys[j]\n      longerKeys.push(currShorterKey + \"_\" + tokType.tokenTypeIdx)\n      for (let t = 0; t < tokType.categoryMatches.length; t++) {\n        const categoriesKeySuffix = \"_\" + tokType.categoryMatches[t]\n        longerKeys.push(currShorterKey + categoriesKeySuffix)\n      }\n    }\n    keys = longerKeys\n  }\n  return keys\n}\n\n/**\n * Imperative style due to being called from a hot spot\n */\nfunction isUniquePrefixHash(\n  altKnownPathsKeys: Record<string, boolean>[],\n  searchPathKeys: string[],\n  idx: number\n): boolean {\n  for (\n    let currAltIdx = 0;\n    currAltIdx < altKnownPathsKeys.length;\n    currAltIdx++\n  ) {\n    // We only want to test vs the other alternatives\n    if (currAltIdx === idx) {\n      continue\n    }\n    const otherAltKnownPathsKeys = altKnownPathsKeys[currAltIdx]\n    for (let searchIdx = 0; searchIdx < searchPathKeys.length; searchIdx++) {\n      const searchKey = searchPathKeys[searchIdx]\n      if (otherAltKnownPathsKeys[searchKey] === true) {\n        return false\n      }\n    }\n  }\n  // None of the SearchPathKeys were found in any of the other alternatives\n  return true\n}\n\nexport function lookAheadSequenceFromAlternatives(\n  altsDefs: IProduction[],\n  k: number\n): lookAheadSequence[] {\n  const partialAlts = map(altsDefs, (currAlt) =>\n    possiblePathsFrom([currAlt], 1)\n  )\n  const finalResult = initializeArrayOfArrays(partialAlts.length)\n  const altsHashes = map(partialAlts, (currAltPaths) => {\n    const dict = {}\n    forEach(currAltPaths, (item) => {\n      const keys = pathToHashKeys(item.partialPath)\n      forEach(keys, (currKey) => {\n        dict[currKey] = true\n      })\n    })\n    return dict\n  })\n  let newData = partialAlts\n\n  // maxLookahead loop\n  for (let pathLength = 1; pathLength <= k; pathLength++) {\n    const currDataset = newData\n    newData = initializeArrayOfArrays(currDataset.length)\n\n    // alternatives loop\n    for (let altIdx = 0; altIdx < currDataset.length; altIdx++) {\n      const currAltPathsAndSuffixes = currDataset[altIdx]\n      // paths in current alternative loop\n      for (\n        let currPathIdx = 0;\n        currPathIdx < currAltPathsAndSuffixes.length;\n        currPathIdx++\n      ) {\n        const currPathPrefix = currAltPathsAndSuffixes[currPathIdx].partialPath\n        const suffixDef = currAltPathsAndSuffixes[currPathIdx].suffixDef\n        const prefixKeys = pathToHashKeys(currPathPrefix)\n        const isUnique = isUniquePrefixHash(altsHashes, prefixKeys, altIdx)\n        // End of the line for this path.\n        if (isUnique || isEmpty(suffixDef) || currPathPrefix.length === k) {\n          const currAltResult = finalResult[altIdx]\n          // TODO: Can we implement a containsPath using Maps/Dictionaries?\n          if (containsPath(currAltResult, currPathPrefix) === false) {\n            currAltResult.push(currPathPrefix)\n            // Update all new  keys for the current path.\n            for (let j = 0; j < prefixKeys.length; j++) {\n              const currKey = prefixKeys[j]\n              altsHashes[altIdx][currKey] = true\n            }\n          }\n        }\n        // Expand longer paths\n        else {\n          const newPartialPathsAndSuffixes = possiblePathsFrom(\n            suffixDef,\n            pathLength + 1,\n            currPathPrefix\n          )\n          newData[altIdx] = newData[altIdx].concat(newPartialPathsAndSuffixes)\n\n          // Update keys for new known paths\n          forEach(newPartialPathsAndSuffixes, (item) => {\n            const prefixKeys = pathToHashKeys(item.partialPath)\n            forEach(prefixKeys, (key) => {\n              altsHashes[altIdx][key] = true\n            })\n          })\n        }\n      }\n    }\n  }\n\n  return finalResult\n}\n\nexport function getLookaheadPathsForOr(\n  occurrence: number,\n  ruleGrammar: Rule,\n  k: number,\n  orProd?: Alternation\n): lookAheadSequence[] {\n  const visitor = new InsideDefinitionFinderVisitor(\n    occurrence,\n    PROD_TYPE.ALTERNATION,\n    orProd\n  )\n  ruleGrammar.accept(visitor)\n  return lookAheadSequenceFromAlternatives(visitor.result, k)\n}\n\nexport function getLookaheadPathsForOptionalProd(\n  occurrence: number,\n  ruleGrammar: Rule,\n  prodType: PROD_TYPE,\n  k: number\n): lookAheadSequence[] {\n  const insideDefVisitor = new InsideDefinitionFinderVisitor(\n    occurrence,\n    prodType\n  )\n  ruleGrammar.accept(insideDefVisitor)\n  const insideDef = insideDefVisitor.result\n\n  const afterDefWalker = new RestDefinitionFinderWalker(\n    ruleGrammar,\n    occurrence,\n    prodType\n  )\n  const afterDef = afterDefWalker.startWalking()\n\n  const insideFlat = new AlternativeGAST({ definition: insideDef })\n  const afterFlat = new AlternativeGAST({ definition: afterDef })\n\n  return lookAheadSequenceFromAlternatives([insideFlat, afterFlat], k)\n}\n\nexport function containsPath(\n  alternative: Alternative,\n  searchPath: TokenType[]\n): boolean {\n  compareOtherPath: for (let i = 0; i < alternative.length; i++) {\n    const otherPath = alternative[i]\n    if (otherPath.length !== searchPath.length) {\n      continue\n    }\n    for (let j = 0; j < otherPath.length; j++) {\n      const searchTok = searchPath[j]\n      const otherTok = otherPath[j]\n\n      const matchingTokens =\n        searchTok === otherTok ||\n        otherTok.categoryMatchesMap[searchTok.tokenTypeIdx] !== undefined\n      if (matchingTokens === false) {\n        continue compareOtherPath\n      }\n    }\n    return true\n  }\n\n  return false\n}\n\nexport function isStrictPrefixOfPath(\n  prefix: TokenType[],\n  other: TokenType[]\n): boolean {\n  return (\n    prefix.length < other.length &&\n    every(prefix, (tokType, idx) => {\n      const otherTokType = other[idx]\n      return (\n        tokType === otherTokType ||\n        otherTokType.categoryMatchesMap[tokType.tokenTypeIdx]\n      )\n    })\n  )\n}\n\nexport function areTokenCategoriesNotUsed(\n  lookAheadPaths: lookAheadSequence[]\n): boolean {\n  return every(lookAheadPaths, (singleAltPaths) =>\n    every(singleAltPaths, (singlePath) =>\n      every(singlePath, (token) => isEmpty(token.categoryMatches))\n    )\n  )\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}