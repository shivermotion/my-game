{"ast":null,"code":"import { GLTFLoader, DRACOLoader, MeshoptDecoder } from 'three-stdlib';\nimport { useLoader } from '@react-three/fiber';\n\n// @ts-ignore\n\nfunction extensions(useDraco, useMeshopt, extendLoader) {\n  return loader => {\n    if (extendLoader) {\n      extendLoader(loader);\n    }\n    if (useDraco) {\n      const dracoLoader = new DRACOLoader();\n      dracoLoader.setDecoderPath(typeof useDraco === 'string' ? useDraco : 'https://www.gstatic.com/draco/v1/decoders/');\n      loader.setDRACOLoader(dracoLoader);\n    }\n    if (useMeshopt) {\n      loader.setMeshoptDecoder(MeshoptDecoder);\n    }\n  };\n}\nfunction useGLTF(path, useDraco = true, useMeshOpt = true, extendLoader) {\n  const gltf = useLoader(GLTFLoader, path, extensions(useDraco, useMeshOpt, extendLoader));\n  return gltf;\n}\nuseGLTF.preload = (path, useDraco = true, useMeshOpt = true, extendLoader) => useLoader.preload(GLTFLoader, path, extensions(useDraco, useMeshOpt, extendLoader)); // @ts-expect-error new in r3f 7.0.5\n\nuseGLTF.clear = input => useLoader.clear(GLTFLoader, input);\nexport { useGLTF };","map":{"version":3,"names":["GLTFLoader","DRACOLoader","MeshoptDecoder","useLoader","extensions","useDraco","useMeshopt","extendLoader","loader","dracoLoader","setDecoderPath","setDRACOLoader","setMeshoptDecoder","useGLTF","path","useMeshOpt","gltf","preload","clear","input"],"sources":["C:/Users/Work/node_modules/@react-three/drei/core/useGLTF.js"],"sourcesContent":["import { GLTFLoader, DRACOLoader, MeshoptDecoder } from 'three-stdlib';\nimport { useLoader } from '@react-three/fiber';\n\n// @ts-ignore\n\nfunction extensions(useDraco, useMeshopt, extendLoader) {\n  return loader => {\n    if (extendLoader) {\n      extendLoader(loader);\n    }\n\n    if (useDraco) {\n      const dracoLoader = new DRACOLoader();\n      dracoLoader.setDecoderPath(typeof useDraco === 'string' ? useDraco : 'https://www.gstatic.com/draco/v1/decoders/');\n      loader.setDRACOLoader(dracoLoader);\n    }\n\n    if (useMeshopt) {\n      loader.setMeshoptDecoder(MeshoptDecoder);\n    }\n  };\n}\n\nfunction useGLTF(path, useDraco = true, useMeshOpt = true, extendLoader) {\n  const gltf = useLoader(GLTFLoader, path, extensions(useDraco, useMeshOpt, extendLoader));\n  return gltf;\n}\n\nuseGLTF.preload = (path, useDraco = true, useMeshOpt = true, extendLoader) => useLoader.preload(GLTFLoader, path, extensions(useDraco, useMeshOpt, extendLoader)); // @ts-expect-error new in r3f 7.0.5\n\n\nuseGLTF.clear = input => useLoader.clear(GLTFLoader, input);\n\nexport { useGLTF };\n"],"mappings":"AAAA,SAASA,UAAU,EAAEC,WAAW,EAAEC,cAAc,QAAQ,cAAc;AACtE,SAASC,SAAS,QAAQ,oBAAoB;;AAE9C;;AAEA,SAASC,UAAUA,CAACC,QAAQ,EAAEC,UAAU,EAAEC,YAAY,EAAE;EACtD,OAAOC,MAAM,IAAI;IACf,IAAID,YAAY,EAAE;MAChBA,YAAY,CAACC,MAAM,CAAC;IACtB;IAEA,IAAIH,QAAQ,EAAE;MACZ,MAAMI,WAAW,GAAG,IAAIR,WAAW,CAAC,CAAC;MACrCQ,WAAW,CAACC,cAAc,CAAC,OAAOL,QAAQ,KAAK,QAAQ,GAAGA,QAAQ,GAAG,4CAA4C,CAAC;MAClHG,MAAM,CAACG,cAAc,CAACF,WAAW,CAAC;IACpC;IAEA,IAAIH,UAAU,EAAE;MACdE,MAAM,CAACI,iBAAiB,CAACV,cAAc,CAAC;IAC1C;EACF,CAAC;AACH;AAEA,SAASW,OAAOA,CAACC,IAAI,EAAET,QAAQ,GAAG,IAAI,EAAEU,UAAU,GAAG,IAAI,EAAER,YAAY,EAAE;EACvE,MAAMS,IAAI,GAAGb,SAAS,CAACH,UAAU,EAAEc,IAAI,EAAEV,UAAU,CAACC,QAAQ,EAAEU,UAAU,EAAER,YAAY,CAAC,CAAC;EACxF,OAAOS,IAAI;AACb;AAEAH,OAAO,CAACI,OAAO,GAAG,CAACH,IAAI,EAAET,QAAQ,GAAG,IAAI,EAAEU,UAAU,GAAG,IAAI,EAAER,YAAY,KAAKJ,SAAS,CAACc,OAAO,CAACjB,UAAU,EAAEc,IAAI,EAAEV,UAAU,CAACC,QAAQ,EAAEU,UAAU,EAAER,YAAY,CAAC,CAAC,CAAC,CAAC;;AAGnKM,OAAO,CAACK,KAAK,GAAGC,KAAK,IAAIhB,SAAS,CAACe,KAAK,CAAClB,UAAU,EAAEmB,KAAK,CAAC;AAE3D,SAASN,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}